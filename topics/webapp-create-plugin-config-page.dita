<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="urn:oasis:names:tc:dita:rng:topic.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<topic id="webapp-create-plugin-config-page">
  <title>Creating a Plugin Configuration Page</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Administration page<indexterm>Create plugin configuration
          page</indexterm></indexterm>
        <indexterm>Create plugin configuration page in Web Author</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>To create a configuration page for a <xref keyref="glossentry_plugin"
        ><term>plugin</term></xref> that does not already have the <uicontrol><image
          href="../img/ConfigureSearchScope16.png"/>Configure</uicontrol> icon displayed in the
        <uicontrol>Administration</uicontrol> page, follow these steps:<ol>
        <li>
          <p>Register a <codeph>WebappServlet</codeph> extension type with a <codeph>role</codeph>
            attribute set to <b>config</b> in your <filepath>plugin.xml</filepath> file, as in the
            following
            example:<codeblock outputclass="language-xml">&lt;extension type="WebappServlet" role="config" class="com.ex.MyPluginConfigExt"/></codeblock></p>
          <p>The <codeph>class</codeph> attribute value should point to an extension of the <xref
              href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/webapp/plugin/PluginConfigExtension.html"
              format="html" scope="external"><i>PluginConfigExtension</i></xref> class.</p>
        </li>
        <li>When extending the <xref
            href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/webapp/plugin/PluginConfigExtension.html"
            format="html" scope="external"><i>PluginConfigExtension</i></xref> class, consider the
          following notes:<ul>
            <li>Implement the <i>getOptionsForm</i> method to return an HTML form and make sure that
              contains inputs with the <codeph>name</codeph> attribute the same as the option you
              want to configure.</li>
            <li>Implement the <i>getOptionsJson</i> method to return a JSON string that contains the
              options that you want to make available to the JavaScript code. They will be
              accessible in your <term>plugin's</term> JavaScript code using the
                <codeph>sync.options.PluginsOptions.getClientOption(optionName)</codeph> method.
                <note>The JSON should only contain key values, where values are of the type
                  <codeph>string|number|boolean</codeph> with no arrays or other
                objects.</note><note type="tip">You should not include any sensitive information
                (e.g. OAuth secrets) in the options returned by this method.</note></li>
            <li>
              <p>Implement the <i>getPath</i> method to return a non-empty string that represents
                the path that will have this extension served.</p>
              <p>For
                example:<codeblock outputclass="language-bourne"> {webapp-context}/plugins-dispatcher/RESULT_OF_GETPATH</codeblock></p>
            </li>
            <li>Override the <i>init</i> method to set some defaults for your options and make sure
              you call <i>super.init()</i>. Otherwise, options will not be saved to disk and will be
              lost when you restart the application.</li>
            <li>Optionally, if you need to override any of the <i>doPut/doDelete</i> methods, make
              sure you call the <i>saveOptions</i> method at the end to save the options to
              disk.</li>
            <li>Optionally, if you need to override the <i>doGet</i> method, make sure it responds
              with the result of <i>getOptionsForm</i> for header <codeph>Accept=text/html</codeph>,
              and with the result of <i>getOptionsJson</i> when called with header
                <codeph>Accept=application/json</codeph>. Use the <i>getOption</i> or
                <i>getDefaultOptions</i> methods to access the current or default options.</li>
          </ul><note type="tip">For an implementation example, you can look at
              <i>com.oxygenxml.sdksamples.github.GithubPluginConfigExtension</i> in the <xref
              href="https://github.com/oxygenxml/webapp-github-plugin/blob/SNAPSHOT/src/main/java/com/oxygenxml/examples/github/GithubPluginConfigExtension.java/"
              format="html" scope="external"><i>webapp-github-plugin</i> project</xref>.</note></li>
        <li>To use these options from the Java code of your plugin, use the <xref
            href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/OptionsStorage.html"
            format="html" scope="external"><i>ro.sync.ecss.extensions.api.OptionsStorage</i></xref>
          API, as in the following
          example:<codeblock outputclass="language-bourne">PluginWorkspaceProvider.getPluginWorkspace().getOptionsStorage().getOption(name, defaultValue);</codeblock></li>
      </ol><b>Result:</b> A <uicontrol><image href="../img/ConfigureSearchScope16.png"
        />Configure</uicontrol> icon is now displayed next to its name in the
        <uicontrol>Administration</uicontrol> page. </p>
  </body>
  <related-links>
    <linklist>
      <title>Related Information:</title>
      <link href="webapp-configure-plugins.dita#webapp-configure-plugins"/>
    </linklist>
  </related-links>
</topic>
