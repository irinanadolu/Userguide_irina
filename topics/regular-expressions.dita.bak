<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="regular-expressions">
  <title>Regular Expressions Syntax</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Regular expressions syntax</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p><ph keyref="product"/> uses the <xref
        href="http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html" format="html"
        scope="external">Java regular expression syntax</xref>. It is <b>similar</b> to that used in
      Perl 5, with several exceptions. Thus, <ph keyref="product"/> does not support the following constructs:<ul>
        <li>The conditional constructs <codeph>(?{X})</codeph> and
              <codeph>(?(<i>condition</i>)<i>X</i>|<i>Y</i>)</codeph>.</li>
        <li>The embedded code constructs <codeph>(?{code})</codeph> and
          <codeph>(??{code})</codeph>.</li>
        <li>The embedded comment syntax <codeph>(?#comment)</codeph>.</li>
        <li>The preprocessing operations <codeph>\l</codeph>, <codeph>\u</codeph>,
            <codeph>\L</codeph>, and <codeph>\U</codeph>.</li>
      </ul></p>
    <p>When using regular expressions, note that some sets of characters from <xref
        href="https://www.w3.org/TR/xmlschema-2/#dt-ccesN" format="html" scope="external">XPath/XML
        Schema/Schematron</xref> are slightly different than the ones used by <ph keyref="product"
      />/Java in the text searches<ph product="author developer editor"> from the <xref
          href="find-replace-dialog.dita#find-replace-dialog"><uicontrol>Find/Replace</uicontrol>
          dialog box</xref> and <xref
          href="find-and-replace-text-in-files.dita#find-and-replace-text-in-files"
            ><uicontrol>Find/Replace in Files</uicontrol> dialog box</xref></ph>. The most common
      example is with the <codeph>\w</codeph> and <codeph>\W</codeph> set of characters. To ensure
      consistent results between the two, it is recommended that you use the following constructs<ph
        product="author developer editor"> in the <xref
          href="find-replace-dialog.dita#find-replace-dialog"><uicontrol>Find/Replace</uicontrol>
          dialog box</xref> and <xref
          href="find-and-replace-text-in-files.dita#find-and-replace-text-in-files"
            ><uicontrol>Find/Replace in Files</uicontrol> dialog box</xref></ph>:<ul>
        <li><b>/w</b> - <codeph>[#x0000-#x10FFFF]-[\p{P}\p{Z}\p{C}]</codeph> instead of
            <codeph>\w</codeph></li>
        <li><b>/W</b> - <codeph>[\p{P}\p{Z}\p{C}]</codeph> instead of <codeph>\W</codeph></li>
      </ul></p>
    <p>There are some other notable differences that may cause unexpected results, including the following:<ul>
        <li>In Perl, <codeph>\1</codeph> through <codeph>\9</codeph> are always interpreted as back
          references. A backslash-escaped number greater than 9 is treated as a back reference if at
          least that many sub-expressions exist. Otherwise, it is interpreted, if possible, as an
          octal escape. In this class octal escapes must always begin with a zero. In Java,
            <codeph>\1</codeph> through <codeph>\9</codeph> are always interpreted as back
          references, and a larger number is accepted as a back reference if at least that many
          sub-expressions exist at that point in the regular expression. Otherwise, the parser will
          drop digits until the number is smaller or equal to the existing number of groups or it is
          one digit.</li>
        <li>Perl uses the <codeph>g</codeph> flag to request a match that resumes where the last
          match left off.</li>
        <li>In Perl, embedded flags at the top level of an expression affect the whole expression.
          In Java, embedded flags always take effect at the point where they appear, whether they
          are at the top level or within a group. In the latter case, flags are restored at the end
          of the group just as in Perl.</li>
        <li>Perl is forgiving about malformed matching constructs, as in the expression
            <codeph>*a</codeph>, as well as dangling brackets, as in the expression
            <codeph>abc]</codeph>, and treats them as literals. This class also accepts dangling
          brackets but is strict about dangling meta-characters such as <codeph>+</codeph>,
            <codeph>?</codeph> and <codeph>*</codeph>.</li>
      </ul></p>
  </body>
  <related-links>
    <linklist>
      <title>Related Information:</title>
      <link format="html"
        href="http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html#jcc"
        scope="external">
        <linktext>Comparison between the Java and Perl 5 regular expression syntax</linktext>
      </link>
    </linklist>
  </related-links>
</topic>
