<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="urn:oasis:names:tc:dita:rng:topic.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<topic id="oxy-browser-form-control">
  <title>Browser Form Control</title>
  <shortdesc>The <codeph>oxy_browser</codeph> built-in form control is used for providing a
    mechanism to integrate HTML frames or interact with SVG documents directly in the
      <uicontrol>Author</uicontrol> mode editor. It can also be used to load HTML that executes
    JavaScript and from that JavaScript you can access the <ph keyref="product"/>
    workspace.</shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>CSS extensions<indexterm>Form
          Controls<indexterm>Browser</indexterm></indexterm></indexterm>
        <indexterm>Form Controls<indexterm>Browser</indexterm></indexterm>
        <indexterm>Form Controls <indexterm>Render HTML frames</indexterm></indexterm>
        <indexterm>Form Controls <indexterm>Render SVG</indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>The <codeph>oxy_browser</codeph> form control supports the following properties:</p>
    <ul irina="irina">
      <li><ph conkeyref="reusables-author-mode-customization/href-property"/> This property is
        mandatory. Relative values are resolved relative to the CSS. If you have media resources
        relative to the XML document, you can specify their paths like
        this:<codeblock outputclass="language-css">oxy_browser(href, oxy_url(oxy_base-uri(), 'ex.svg')), width, 50%, height, 50%)</codeblock></li>
      <li><ph conkeyref="reusables-author-mode-customization/width-property-simple"/></li>
      <li><ph conkeyref="reusables-author-mode-customization/height-property"/></li>
    </ul>
    <p><b><u>Example: <i>oxy_browser</i> Form
      Control</u></b><codeblock outputclass="language-css">object {
  content:
    oxy_browser(
      href, 'http://example.page',
      width, 600px,
      height, 400px),
}</codeblock></p>
    <note type="tip">To insert a sample of the <codeph>oxy_browser</codeph> form control in a CSS
      file <ph product="author developer editor">(or LESS file)</ph>, invoke the <xref
        keyref="glossentry_content-completion-assistant"><term>Content Completion
        Assistant</term></xref> by pressing <uicontrol
        conkeyref="reusable-oxygen-shortcuts-list/ctrl_space"/> and select the <image
        href="../img/CodeTemplates12.gif" id="image_fg1_12h_5r"/>
      <codeph>oxy_browser</codeph> code template.<p><ph
          conkeyref="reusables-author-mode-customization/samples-ph"/></p></note>
    <section id="interacting_with_the_workspace">
      <title>Interacting with the <ph keyref="product"/> Workspace</title>
      <p>The <codeph>oxy_browser</codeph> form control also provides the possibility of creating
        custom form control without having to use the Java-based API. You can use the
          <codeph>oxy_browser</codeph> form control to load HTML that executes JavaScript. In the
        JavaScript, you can use some predefined global variables that provide a gateway between the
        JavaScript and the <ph keyref="product"/> Java API. This allows you to perform changes in
        the document, open resources, and more, solely from the JavaScript.<note type="important"
          >This will only work if the loaded HTML is located inside a <xref
            href="framework-location.dita#framework-location">framework or plugin directory</xref>,
          such as: <filepath><term conkeyref="reusables-user-guide/oxy-install-dir"
            />/frameworks/</filepath> or <filepath><term
              conkeyref="reusables-user-guide/oxy-install-dir"/>/plugins/</filepath>.</note></p>
      <p>The following global variables can be used:<ul irina="irina">
          <li><b>authorAccess</b> - This object is an instance of <xref
              href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorAccess.html"
              format="html" scope="external"
            ><i>ro.sync.ecss.extensions.api.AuthorAccess</i></xref>.</li>
          <li><b>contextElement</b> - An instance of <xref
              href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/node/AuthorNode.html"
              format="html" scope="external">ro.sync.ecss.extensions.api.node.AuthorNode</xref>. The
            form control is added over this node.</li>
          <li><b>pluginWorkspace</b> - An instance of <xref
              href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/exml/workspace/api/standalone/StandalonePluginWorkspace.html"
              format="html" scope="external"
              >ro.sync.exml.workspace.api.standalone.StandalonePluginWorkspace</xref>.</li>
          <li><b>fcArguments</b> - A <codeph>java.util.Map</codeph> implementation with the
            properties (name and value pairs) passed on the form control function.</li>
          <li>
            <p><b>apiHelper</b> - A helper object for creating Java objects. It allows you to create
              Java objects from within the JavaScript code. These objects can then be passed to the
              Java methods as in the following
              example:<codeblock outputclass="language-javascript">var newAttrValue = apiHelper.newInstance(
           "ro.sync.ecss.extensions.api.node.AttrValue",
           ["normalizedValue", "rawValue", true]);
authorAccess.getDocumentController().setAttribute(
        "counter", newAttrValue, contextElement);
...</codeblock></p>
            <p>You can also specify the constructor
              signature:<codeblock outputclass="language-javascript">var newAttrValue = apiHelper.newInstance(
        "ro.sync.ecss.extensions.api.node.AttrValue
        (java.lang.String, java.lang.String, boolean)",
        ["normalizedValue", "rawValue", true]);
authorAccess.getDocumentController().setAttribute(
        "counter", newAttrValue, contextElement);
...</codeblock></p>
          </li>
        </ul></p>
      <p>For more information, open the <filepath>form-controls.xml</filepath> file in the
              <b><filepath><term conkeyref="reusables-user-guide/oxy-install-dir"
            />/samples/form-controls</filepath></b> directory and go to section <b>11.1 -
          Interacting with the Oxygen Workspace</b>.</p>
      <p>
        <note type="warning">On Mac OS X, you need to use asynchronous calls to the API, due to the
          following JDK bug: <xref href="https://bugs.openjdk.java.net/browse/JDK-8087465"
            format="html" scope="external"/>. By default, the API is called synchronously, but you
          can change this behavior for each API object by calling two methods:
              <b><codeph>sync()</codeph></b> and
          <b><codeph>async()</codeph></b>.<codeblock outputclass="language-javascript">// By default, the methods are invoke synchronously. 
var ctrl = authorAccess.getDocumentController();
try {
  // On Mac, methods that change the document must be executed asynchronously.
  ctrl.async();
  ctrl.setAttribute("counter", newAttrValue, contextElement);        	
} finally {
  ctrl.sync();
}</codeblock></note>
      </p>
    </section>
    <section id="listening_for_changes_in_the_document">
      <title>Listening for Changes in the Document</title>
      <p>If the form control presents some information from the document (for example, the value of
        an attribute), then it needs to be notified on changes in the document so that it can update
        that information. To do this, follow these steps:<ol>
          <li>In the JavaScript, the <b><codeph>bridgeReady()</codeph></b> method is invoked as soon
            as the form control is loaded and the API bridge is installed. This is where you can add
            a
            listener:<codeblock outputclass="language-javascript">function bridgeReady () {
  // We declare a member function for each method of the 
  // ro.sync.ecss.extensions.api.AuthorListener interface (same function signature)
  var handler = {
    attributeChanged : function(event) {
      var node = event.getOwnerAuthorNode();
      var attrName = event.getAttributeName();
            
      if (node.equals(contextElement) &amp;&amp; attrName === "counter") {
        init();
      }
    },
    contentDeleted : function(event) {},
    contentInserted : function(event) {}
  };
     
  // We create a proxy over an ro.sync.ecss.extensions.api.AuthorListener that will 
  // delegate its methods to the JS object's functions.
  // We assign the listener to a global variable so that we can remove it later on, 
  // on the dispose() method.
  authorDocumentListener = apiHelper.createProxyListener(
      "ro.sync.ecss.extensions.api.AuthorListener", handler);
     
  var ctrl = authorAccess.getDocumentController();

  // Add the proxy listener.
  ctrl.addAuthorListener(authorDocumentListener);
}</codeblock></li>
          <li>Since a listener was added on the document, it is important to remove it once the form
            control is not used anymore. When a form control is discarded, the
                <b><codeph>dispose()</codeph></b> JavaScript function is invoked, so if you have any
            cleanup to do, make sure you define a function with this name and remove any previously
            created listeners in
            it.<codeblock outputclass="language-javascript">/**
 * The form control will not be used anymore. Clean up.
 */
function dispose() {
  // Dispose all added listeners.
  var ctrl = authorAccess.getDocumentController();
  ctrl.removeAuthorListener(authorDocumentListener);
}</codeblock></li>
        </ol></p>
    </section>
    <section id="debugging_javascript_used_for_custom_form_control">
      <title>Debugging JavaScript Used for Custom Form Controls</title>
      <p>If you encounter unexpected results when using the <xref
          href="#oxy-browser-form-control/interacting_with_the_workspace" format="dita">method
          described above</xref>, you can debug the script by using the following guidelines:<ul irina="irina">
          <li>Calls to <codeph>alert("message.to.present")</codeph> or
              <codeph>console.log("message.to.present")</codeph> will be presented in the <xref
              href="results-view.dita#results-view">Results panel</xref>.</li>
          <li>You can install the <xref href="http://getfirebug.com/" format="html" scope="external"
                ><b>Firebug</b> extension</xref> by executing the following
            script:<codeblock outputclass="language-javascript">{code:javascript}
function installFB() {
  if (!document.getElementById('FirebugLite')) {
    E = document['createElement' + 'NS'] &amp;&amp; document.documentElement.namespaceURI;
    E = E ? document['createElement' + 'NS'](E, 'script') 
          : document['createElement']('script');
    E['setAttribute']('id', 'FirebugLite');
    E['setAttribute']('src', 
                      'https://getfirebug.com/' + 'firebug-lite.js' + '#startOpened');
    E['setAttribute']('FirebugLite', '4');
    (document['getElementsByTagName']('head')[0] 
          || document['getElementsByTagName']('body')[0]).appendChild(E);
    E = new Image;
    E['setAttribute']('src', 'https://getfirebug.com/' + '#startOpened');
  }
}
{code}</codeblock></li>
        </ul></p>
      <note>To force the <i>Browser Form Control</i> to reload after making changes to the
        JavaScript file, you need to use the <uicontrol>Reload page</uicontrol> action from the form
        control's contextual menu.</note>
    </section>
    <p>For more information about form controls, watch our video demonstration:</p>
    <p><object width="450" height="250" data="https://www.youtube.com/embed/-WY3wzkMSLM"
        outputclass="iframe">
        <param name="allowfullscreen" value="true"/>
      </object></p>
  </body>
  <related-links>
    <linklist>
      <title>Related Information:</title>
      <link href="dg-oxygen-css-functions.dita"/>
      <link href="dg-url-function.dita"/>
    </linklist>
  </related-links>
</topic>
