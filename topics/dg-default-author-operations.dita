<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd">
<topic id="dg-default-author-operations">
  <title>Author Mode Operations</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Author mode default operations</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>This topic lists the default operations for the <uicontrol>Author</uicontrol> mode.</p>
    <section id="changeattributeoperation">
      <title>ChangeAttributeOperation</title>
      <p>This operation allows you to add/modify/remove an attribute. You can use this operation in
        your own custom <uicontrol>Author</uicontrol> mode action to modify the value for a certain
        attribute on a specific XML element. The arguments of the operation are:</p>
      <p>
        <dl>
          <dlentry>
            <dt>name</dt>
            <dd>The attribute local name.</dd>
          </dlentry>
          <dlentry>
            <dt>namespace</dt>
            <dd>The attribute namespace.</dd>
          </dlentry>
          <dlentry>
            <dt>elementLocation</dt>
            <dd>The XPath location that identifies the element.</dd>
          </dlentry>
          <dlentry>
            <dt>value</dt>
            <dd>The new value for the attribute. If empty or null the attribute will be
              removed.</dd>
          </dlentry>
          <dlentry>
            <dt>editAttribute</dt>
            <dd>If an in-place editor exists for this attribute, it will automatically activate the
              in-place editor and start editing.</dd>
          </dlentry>
          <dlentry>
            <dt>removeIfEmpty</dt>
            <dd>The possible values are <codeph>true</codeph> and <codeph>false</codeph>. True means
              that the attribute should be removed if an empty value is provided. The default
              behavior is to remove it.</dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <section id="changeattributesoperation">
      <title>ChangeAttributesOperation</title>
      <p>This operation allows you to add/modify/remove multiple attributes. You can use this
        operation in your own custom <uicontrol>Author</uicontrol> mode action to modify the value
        for one or more attributes for one or more XML elements. The arguments of the operation
        are:</p>
      <p>
        <dl>
          <dlentry>
            <dt>elementLocations</dt>
            <dd>The XPath location that identifies the elements whose attributes will be affected.
              If not defined, the element at the cursor location will be used.</dd>
          </dlentry>
          <dlentry>
            <dt>attributeNames</dt>
            <dd>The names of the attributes to add, modify, or remove, separated by the new-line
              character (<codeph>\n</codeph>). The values can be local names or Clark
              notations.</dd>
          </dlentry>
          <dlentry>
            <dt>values</dt>
            <dd>The new attributes values, each on a new line, separated by the new-line character
                (<codeph>\n</codeph>). An empty value will remove the attribute if
                <codeph>removeIfEmpty</codeph> is set to <codeph>true</codeph>.</dd>
          </dlentry>
          <dlentry>
            <dt>removeIfEmpty</dt>
            <dd>The possible values are <codeph>true</codeph> (default) and <codeph>false</codeph>.
                <b>True</b> means that the attribute will be removed if an empty value is
              provided.</dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <section id="changepseudoclassesoperation">
      <title>ChangePseudoClassesOperation</title>
      <p>Operation that sets a list of pseudo-class values to nodes identified by an XPath
        expression. It can also remove a list of values from nodes identified by an XPath
        expression. The operation accepts the following parameters:</p>
      <p>
        <dl>
          <dlentry>
            <dt>setLocations</dt>
            <dd>An XPath expression indicating a list of nodes that will have the specified list of
              pseudo-classes set. If it is not defined, then the element at the cursor
              position will be used.</dd>
          </dlentry>
          <dlentry>
            <dt>setPseudoClassNames</dt>
            <dd>A space-separated list of pseudo-class names that will be set on the matched
              nodes.</dd>
          </dlentry>
          <dlentry>
            <dt>removeLocations</dt>
            <dd>An XPath expression indicating a list of nodes that will have the specified list of
              pseudo-classes removed. If it is not defined, then the element at the cursor
              position will be used.</dd>
          </dlentry>
          <dlentry>
            <dt>removePseudoClassNames</dt>
            <dd>A space-separated list of pseudo-class names that will be removed from the matched
              nodes.</dd>
          </dlentry>
          <dlentry>
            <dt>includeAllNodes</dt>
            <dd>The possible values are <codeph>yes</codeph> and <codeph>no</codeph>. If set to
                <codeph>yes</codeph>, comments, CDATA, and text nodes are included when evaluating
              XPath expressions. If set to <codeph>no</codeph>, they are ignored.</dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <section id="deleteelementoperation">
      <title>DeleteElementOperation</title>
      <p>Deletes the node indicated by the <codeph>elementLocation</codeph> parameter XPath
        expression. If missing, the operation will delete the node at the cursor location.</p>
    </section>
    <section id="deleteelementsoperation">
      <title>DeleteElementsOperation</title>
      <p>Deletes the nodes indicated by the <codeph>elementLocations</codeph> parameter XPath
        expression. If missing, the operation will delete the node at the cursor location.</p>
    </section>
    <section id="executecommandlineoperation">
      <title>ExecuteCommandLineOperation</title>
      <p>This operation allows you to start a process executing a given command line. It has the
        following arguments:</p>
      <p>
        <dl>
          <dlentry>
            <dt>name</dt>
            <dd>The name of the operation (or name of the console panel that corresponds to the
              process run by an action built over this operation).</dd>
          </dlentry>
          <dlentry>
            <dt>workingDirectory</dt>
            <dd>The path to the directory where the command line is executed. The default value is
                <codeph>"."</codeph> (current directory).</dd>
          </dlentry>
          <dlentry>
            <dt>cmdLine</dt>
            <dd>The command line to be executed (accepts <xref
                href="#dg-default-author-operations/editor_variables_in_author_mode_operations"
                format="dita">editor variables</xref>).</dd>
          </dlentry>
          <dlentry>
            <dt>showConsole</dt>
            <dd>If set to <codeph>true</codeph>, the console panel will be displayed in <ph
                keyref="product"/>. The default value is <codeph>false</codeph>.</dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <section id="executemultipleactionsoperation">
      <title>ExecuteMultipleActionsOperation</title>
      <p>This operation allows the execution of a sequence of actions, defined as a list of action
        IDs. The actions must be defined by the corresponding <term>framework</term>, or one of the
        common actions for all <term>frameworks</term> supplied by <ph keyref="product"/>.</p>
      <p>
        <dl>
          <dlentry>
            <dt>actionIDs</dt>
            <dd>The action IDs list that will be executed in sequence, the list must be a string
              sequence containing the IDs separated by commas or new lines.</dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <section id="executemultiplewebappcompatibleactionsoperation">
      <title>ExecuteMultipleWebappCompatibleActionsOperation</title>
      <p>An implementation of an operation that runs a sequence of <ph keyref="webappProduct"
        />-compatible actions, defined as a list of IDs.</p>
    </section>
    <section id="executetransformationscenariosoperation">
      <title>ExecuteTransformationScenariosOperation</title>
      <p>This operation allows running one or more transformation scenarios defined in the current
          <xref keyref="glossentry_document_type_association"><term>document type
          association</term></xref>, in the project options, or in the global options. A use case
        would be to add a toolbar button that triggers publishing to various output formats. The
        argument of the operation is:</p>
      <p>
        <dl>
          <dlentry>
            <dt>scenarioNames</dt>
            <dd>The list of scenario names that will be executed, separated by new lines.</dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <section id="section_drt_5ml_plb">
      <title>ExecuteValidationScenariosOperation</title>
      <p>This operation allows running one or more validation scenarios defined in the current <xref
          keyref="glossentry_document_type_association"><term>document type
          association</term></xref>, in the project options, or in the global options. The single
        argument for the operation is:</p>
      <p>
        <dl>
          <dlentry>
            <dt>scenarioNames</dt>
            <dd>The list of scenario names that will be executed, separated by new lines.</dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <section id="insertequationoperation">
      <title>InsertEquationOperation</title>
      <p>Inserts a fragment containing a MathML equation at the cursor offset. The argument of this
        operation is:</p>
      <p>
        <dl>
          <dlentry>
            <dt>fragment</dt>
            <dd>The XML fragment containing the MathML content that should be inserted.</dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <section id="insertfragmentoperation">
      <title>InsertFragmentOperation</title>
      <p>Inserts an XML fragment at the current cursor position. The selection, if there is one,
        remains unchanged. The fragment will be inserted in the current context of the cursor
        position meaning that if the current XML document uses some namespace declarations then the
        inserted fragment must use the same declarations. The namespace declarations of the inserted
        fragment will be adapted to the existing namespace declarations of the XML document. For
        more details about its list of parameters, see <xref
          href="dg-author-op-InsertFragmentOperation-arguments.dita"/>.</p>
    </section>
    <section id="insertorreplacefragmentoperation">
      <title>InsertOrReplaceFragmentOperation</title>
      <p>Similar to <xref href="#dg-default-author-operations/insertfragmentoperation" format="dita"
            ><b>InsertFragmentOperation</b></xref>, except it removes the selected content before
        inserting the fragment. Also, the <b>insertPosition</b> parameter has another possible
        value: <b>Replace</b>. If this value is used, the operation deletes the node selected by the
        XPath expression denoted by the <b>insertLocation</b> parameter. For more details about its
        list of parameters, see <xref href="dg-author-op-InsertFragmentOperation-arguments.dita"
        />.</p>
    </section>
    <section id="insertorreplacetextoperation">
      <title>InsertOrReplaceTextOperation</title>
      <p>Inserts a text at current position removing the selected content, if any. The argument of
        this operation is:</p>
      <p>
        <dl>
          <dlentry>
            <dt>text</dt>
            <dd>The text section to insert.</dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <section id="insertxincludeoperation">
      <title>InsertXIncludeOperation</title>
      <p>Insert an <codeph>XInclude</codeph> element at the cursor offset. Opens a dialog box that
        allows you to browse and select content to be included in your document and automatically
        generates the corresponding XInclude instruction.</p>
    </section>
    <section id="jsoperation">
      <title>JSOperation</title>
      <p>Allows you to call the Java API from custom JavaScript content. For some sample
          <b>JSOperation</b> implementations, see <xref
          href="https://github.com/oxygenxml/javascript-sample-operations" format="html"
          scope="external"/>.<note type="notice">For the <ph keyref="webappProduct"/>, this
          operation cannot be invoked using the JavaScript API.</note></p>
      <p>This operation accepts the following parameter:</p>
      <p>
        <dl>
          <dlentry>
            <dt>script</dt>
            <dd>
              <p>The JavaScript content to execute. It must have a function called
                  <codeph>doOperation()</codeph>, which can use the predefined
                  <codeph>authorAccess</codeph> variable. The <codeph>authorAccess</codeph> variable
                has access to the entire <xref
                  href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorAccess.html"
                  format="html" scope="external"
                  ><i>ro.sync.ecss.extensions.api.AuthorAccess</i></xref> Java API.</p>
              <p>The following example is a script that retrieves the current value of the
                  <b>type</b> attribute on the current element, allows the end-user to edit its new
                value and sets the new value in the
                  document:<codeblock outputclass="language-javascript">function doOperation(){ 
 //The current node is either entirely selected...
 currentNode = authorAccess.getEditorAccess().getFullySelectedNode();
 if(currentNode == null){
 //or the cursor is placed in it
 caretOffset = authorAccess.getEditorAccess().getCaretOffset(); 
 currentNode = authorAccess.getDocumentController().getNodeAtOffset
                          (caretOffset);
 }
 //Get current value of the @type attribute
  currentTypeValue = "";
  currentTypeValueAttr = currentNode.getAttribute("type");
  if(currentTypeValueAttr != null){
    currentTypeValue = currentTypeValueAttr.getValue();
  }
 //Ask user for new value for attribute.
 newTypeValue = javax.swing.JOptionPane.showInputDialog
                         ("Input @type value", currentTypeValue);
 if(newTypeValue != null){
   //Create and set the new attribute value for the @type attribute.
   attrValue = new Packages.ro.sync.ecss.extensions.api.node.AttrValue
                         (newTypeValue);
   authorAccess.getDocumentController().setAttribute
                         ("type", attrValue, currentNode);
 }
} </codeblock><note
                  type="tip">You can call functions defined inside a script called
                    <filepath>commons.js</filepath> from your custom script content so that you can
                  use that external script file as a library of functions. Note that this
                    <filepath>commons.js</filepath> file must be placed in the root of the
                    <term>framework</term> directory (for example, <filepath><term
                      conkeyref="reusables-user-guide/oxy-install-dir"
                    />/frameworks/dita/commons.js</filepath>) because that is the only location
                  where <ph keyref="product"/> will look for it.</note></p>
            </dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <section id="movecaretoperation">
      <title>MoveCaretOperation</title>
      <p>Flexible operation for moving the cursor within a document and it is also capable of
        performing a selection. The operation accepts the following arguments:</p>
      <p>
        <dl>
          <dlentry>
            <dt>xpathLocation</dt>
            <dd>An XPath expression that identifies the node relative to where the cursor will be
              moved. If the expression identifies more than one node, only the first one will be
              taken into account.</dd>
          </dlentry>
          <dlentry>
            <dt>position</dt>
            <dd>The position relative to the node obtained from the XPath expression where the
              cursor will be moved. When also choosing to perform a selection, you can use the
              following possible values:<ul>
                <li><b>Before</b> - Places the cursor at the beginning of the
                  selection.</li>
                <li><b>Inside, at the beginning</b> - Places the cursor at the beginning
                  of the selection.</li>
                <li><b>After</b> - Places the cursor at the end of the selection.</li>
                <li><b>Inside, at the end</b> - Places the cursor at the end of the
                  selection.</li>
              </ul></dd>
          </dlentry>
          <dlentry>
            <dt>selection</dt>
            <dd>Specifies if the operation should select the element obtained from the XPath
              expression, its content, or nothing at all. The possible values of the argument are:
                <codeph>None</codeph>, <codeph>Element</codeph>, and <codeph>Content</codeph>.</dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <section id="moveelementoperation">
      <title>MoveElementOperation</title>
      <p>Flexible operation for moving an XML element to another location from the same document.
        XPath expressions are used to identify the source element and the target location. The
        operation takes the following parameters:</p>
      <p>
        <dl>
          <dlentry>
            <dt>sourceLocation</dt>
            <dd>XPath expression that identifies the content to be moved.</dd>
          </dlentry>
          <dlentry>
            <dt>deleteLocation</dt>
            <dd>XPath expression that identifies the node to be removed. This parameter is optional.
              If missing, the <b>sourceLocation</b> parameter will also identify the node to be
              deleted.</dd>
          </dlentry>
          <dlentry>
            <dt>surroundFragment</dt>
            <dd>A string representation of an XML fragment. The moved node will be wrapped in this
              string before moving it in the destination.</dd>
          </dlentry>
          <dlentry>
            <dt>targetLocation</dt>
            <dd>XPath expression that identifies the location where the node must be moved to.</dd>
          </dlentry>
          <dlentry>
            <dt>insertPosition</dt>
            <dd>Argument that indicates the insert position.</dd>
          </dlentry>
          <dlentry>
            <dt>moveOnlySourceContentNodes</dt>
            <dd>When <codeph>true</codeph>, only the content of the source element is moved.</dd>
          </dlentry>
          <dlentry>
            <dt>processTrackedChangesForXpathLocations</dt>
            <dd>When nodes are located via an XPath expression and the nodes are deleted with <xref
                keyref="glossentry_track-changes"><term>Change Tracking</term></xref> enabled, they
              are considered as being present by default (thus, the <term>change tracking</term> is
              ignored). If you set this argument to <codeph>true</codeph> and <term>change
                tracking</term> is enabled, deleted nodes will be ignored when the XPath locations
              are computed (thus, the <term>change tracking</term> is NOT ignored).</dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <section id="openinsystemappoperation">
      <title>OpenInSystemAppOperation</title>
      <p>Opens a resource in the system application that is associated with the resource in the
        operating system. The arguments of this operation are:</p>
      <p>
        <dl>
          <dlentry>
            <dt>resourcePath</dt>
            <dd>An XPath expression that, when executed, returns the path of the resource to be
              opened. <xref href="editor-variables.dita#editor-variables">Editor variables</xref>
              are expanded in the value of this parameter, before the expression is executed.</dd>
          </dlentry>
          <dlentry>
            <dt>isUnparsedEntity</dt>
            <dd>Possible values are <codeph>true</codeph> or <codeph>false</codeph>. If the value is
                <codeph>true</codeph>, the value of the <b>resourcePath</b> argument is treated as
              the name of an unparsed entity.</dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <section id="reloadcontentoperation">
      <title>ReloadContentOperation</title>
      <p>Reloads the content of the editor by re-reading the information from the URL used to open
        it. It accepts the following argument:</p>
      <p>
        <dl>
          <dlentry>
            <dt>markAsNotModified</dt>
            <dd>The possible values are <codeph>true</codeph> and <codeph>false</codeph>. After
              reloading the editor, the content may appear as modified and in some cases where the
              content is already present on the file server, you would not want the user to save it
              again. You can set this flag to <codeph>true</codeph> to prevent the editor from
              showing the content as modified.</dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <section id="removepseudoclassoperation">
      <title>RemovePseudoClassOperation</title>
      <p>An operation that removes a pseudo-class from an element. Accepts the following
        parameters:</p>
      <p>
        <dl>
          <dlentry>
            <dt>name</dt>
            <dd>Name of the pseudo-class to be removed.</dd>
          </dlentry>
          <dlentry>
            <dt>includeAllNodes</dt>
            <dd>The possible values are <codeph>yes</codeph> and <codeph>no</codeph>. If set to
                <codeph>yes</codeph>, comments, CDATA, and text nodes are included when evaluating
              XPath expressions. If set to <codeph>no</codeph>, they are ignored.</dd>
          </dlentry>
          <dlentry>
            <dt>elementLocation</dt>
            <dd>
              <p>The XPath location that identifies the element. If it is not defined, then the
                element at the cursor position is used. It can also identify multiple elements, in
                which case the pseudo class will be removed from all of them.</p>
              <p><b>Example:</b></p>
              <p>Suppose that there is a pseudo-class called <codeph>myClass</codeph> on the element
                  <codeph>paragraph</codeph> and there are CSS styles matching the pseudo-class.
                <codeblock outputclass="language-css">paragraph:myClass{
  font-size:2em;
  color:red;
}
paragraph{
  color:blue;
}</codeblock></p>
              <p>In the previous example, by removing the pseudo-class, the layout of the
                  <codeph>paragraph</codeph> is rebuilt by matching the other rules (in this case,
                the foreground color of the <codeph>paragraph</codeph> element will become blue.</p>
            </dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <section id="renameelementoperation">
      <title>RenameElementOperation</title>
      <p>This operation allows you to rename all occurrences of the elements identified by an XPath
        expression. The operation requires two parameters:</p>
      <p>
        <dl>
          <dlentry>
            <dt>elementName</dt>
            <dd>The new element name.</dd>
          </dlentry>
          <dlentry>
            <dt>elementLocation</dt>
            <dd>The XPath expression that identifies the element occurrences to be renamed. If this
              parameter is missing, the operation renames the element at current cursor
              position.</dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <section id="section_opp_zss_3jb">
      <title>ReplaceElementContentOperation</title>
      <p>An operation that replaces the content of the element at the cursor location (or fully
        selected element). The operation accepts the following parameters:</p>
      <p>
        <dl>
          <dlentry>
            <dt>fragment</dt>
            <dd>Specifies the fragment that will be inserted as the element content.</dd>
          </dlentry>
          <dlentry>
            <dt>elementLocation</dt>
            <dd>An XPath expression that identifies the element. If it is not defined, then the
              element at the cursor position is used.</dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <section id="setpseudoclassoperation">
      <title>SetPseudoClassOperation</title>
      <p>An operation that sets a pseudo-class to an element. The operation accepts the following
        parameters:</p>
      <p>
        <dl>
          <dlentry>
            <dt>elementLocation</dt>
            <dd>An XPath expression that identifies the element that will have the pseudo-class set.
              If it is not defined, then the element at the cursor position is used.</dd>
          </dlentry>
          <dlentry>
            <dt>name</dt>
            <dd>The pseudo-class local name.</dd>
          </dlentry>
          <dlentry>
            <dt>includeAllNodes</dt>
            <dd>The possible values are <codeph>yes</codeph> and <codeph>no</codeph>. If set to
                <codeph>yes</codeph>, comments, CDATA, and text nodes are included when evaluating
              XPath expressions. If set to <codeph>no</codeph>, they are ignored.</dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <section id="showelementdocumentationoperation">
      <title>ShowElementDocumentationOperation</title>
      <p>Opens the associated specification HTML page for the current element. The operation accepts
        as parameter a URL pattern that points to the HTML page containing the documentation.</p>
    </section>
    <section id="surroundwithfragmentoperation">
      <title>SurroundWithFragmentOperation</title>
      <p>Surrounds the selected content with a text fragment. Since the fragment can have multiple
        nodes, the surrounded content will be always placed in the first leaf element. If there is
        no selection, the operation will simply insert the fragment at the cursor position. For more
        details about the list of parameters go to: <xref
          href="dg-author-op-SurroundWithFragmentOperation-arguments.dita"/>.</p>
    </section>
    <section id="surroundwithtextoperation">
      <title>SurroundWithTextOperation</title>
      <p>This operation has two arguments (two text values) that will be inserted before and after
        the selected content. If there is no selected content, the two sections will be inserted at
        the cursor position. The arguments of the operation are:</p>
      <p>
        <dl>
          <dlentry>
            <dt>header</dt>
            <dd>The text that is placed before the selection.</dd>
          </dlentry>
          <dlentry>
            <dt>footer</dt>
            <dd>The text that is placed after the selection.</dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <section id="togglepseudoclassoperation">
      <title>TogglePseudoClassOperation</title>
      <p>An implementation of an operation to toggle on/off the pseudo-class of an element. Accepts
        the following parameters:</p>
      <p>
        <dl>
          <dlentry>
            <dt>name</dt>
            <dd>Name of the pseudo-class to be toggled on/off.</dd>
          </dlentry>
          <dlentry>
            <dt>includeAllNodes</dt>
            <dd>The possible values are <codeph>yes</codeph> and <codeph>no</codeph>. If set to
                <codeph>yes</codeph>, comments, CDATA, and text nodes are included when evaluating
              XPath expressions. If set to <codeph>no</codeph>, they are ignored.</dd>
          </dlentry>
          <dlentry>
            <dt>elementLocation</dt>
            <dd>
              <p>The XPath location that identifies one or more elements that will have the pseudo
                class toggled. If it is not defined, then the element at the cursor position is
                used.</p>
              <p><b>Example:</b><codeblock outputclass="language-css">paragraph:myClass{
  color:red;
}
paragraph{
  color:blue;
}</codeblock></p>
              <p>By default, the paragraph content is rendered in blue. Suppose that you have a
                  <codeph>TogglePseudoClassOperation</codeph> configured for the
                  <codeph>myClass</codeph> pseudo-class. Invoking it the first time will set the
                  <codeph>myClass</codeph> pseudo-class and the paragraph will be rendered in red.
                Invoking the operation again, will remove the pseudo-class and the visible result
                will be a blue rendered <codeph>paragraph</codeph> element.</p>
            </dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <section id="togglesurroundwithelementoperation">
      <title>ToggleSurroundWithElementOperation</title>
      <p>This operation allows wrapping and unwrapping content in a specific wrapper element that
        can have certain attributes specified on it. It is useful to implement toggle actions such
        as highlighting text as bold, italic, or underline. The operation supports processing
        multiple selection intervals, such as multiple cells within a table column selection. The
        arguments of the operation are:</p>
      <p>
        <dl>
          <dlentry>
            <dt>element</dt>
            <dd>The element to wrap or unwrap content.</dd>
          </dlentry>
          <dlentry>
            <dt>schemaAware</dt>
            <dd><ph conkeyref="reusables-author-mode-customization/schema_aware_argument"/></dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <section id="unwraptagsoperation">
      <title>UnwrapTagsOperation</title>
      <p>This operation allows removing the element tags either from the current element or for an
        element identified with an XPath location. The argument of the operation is:</p>
      <p>
        <dl>
          <dlentry>
            <dt>unwrapElementLocation</dt>
            <dd>An XPath expression that identifies the element to unwrap. If it is not defined, the
              element at the cursor position is unwrapped.</dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <section id="xqueryupdateoperation">
      <title>XQueryUpdateOperation</title>
      <p>Allows you to execute an XQuery Update script directly over content in
          <uicontrol>Author</uicontrol> mode.<note type="notice">This operation is not applicable to
          the <ph keyref="authorComponent"/> or the <ph keyref="webappProduct"/>.</note></p>
      <p>It supports the following arguments:</p>
      <p>
        <dl>
          <dlentry>
            <dt>script</dt>
            <dd>
              <p>The XQuery Update script to be executed. The value can either be an XQuery script
                or a URL that points to the XQuery Update script. You can use the <xref
                  href="editor-variables.dita#editor-variables/edvar-framework"
                  ><i>${framework}</i></xref> or <xref
                  href="editor-variables.dita#editor-variables/edVar-frameworkDir"
                    ><i>${frameworkDir}</i></xref> editor variables to refer the scripts from the
                  <term>framework</term> directory.</p>
              <p>The script will be executed in the context of the node at the cursor position. If
                the script declares the following variable, it will also receive the selected nodes
                (assuming that entire nodes are
                selected):<codeblock outputclass="language-ini">declare variable $oxyxq:selection external;</codeblock></p>
              <p>In the <xref href="#dg-default-author-operations/example1" format="dita">example
                  below</xref>, you can see how this argument is used.</p>
            </dd>
          </dlentry>
          <dlentry>
            <dt>externalParams</dt>
            <dd>
              <p>A string that can assign multiple key-value pairs separated by a comma or a new
                line character.</p>
              <p>For example, if an XQuery script declares two external parameters like
                this:<codeblock outputclass="language-xml">declare variable $param1 external;
declare variable $param2 external;</codeblock></p>
              <p>You can pass custom values for each parameter by setting the <b>externalParams</b>
                to <codeph>param1=value1,param2=value2</codeph>.</p>
            </dd>
          </dlentry>
          <dlentry>
            <dt>expandXincludeReferences</dt>
            <dd>Makes all <i>Xinclude</i> elements transparent to the XQuery transformer. When the
                <i>Xinclude</i> references are transparent, the <b>XQueryUpdateOperation</b> can use
              the referenced elements for further processing in the current document, but it cannot
              change their values in the original document. The default value is
                <codeph>false</codeph>, which means the <i>Xinclude</i> elements are not
              transparent.</dd>
          </dlentry>
        </dl>
      </p>
      <p id="example1">An example of an <term>XQuery Update Script</term> that converts paragraphs
        to list
        items:<codeblock outputclass="language-ini">declare namespace oxyxq = "http://www.oxygenxml.com/ns/xqu";
(: This variable will be linked to the selected nodes assuming that there are 
actually fully selected nodes. For example this selection will return null: 
&lt;p>{SEL_START}text{SEL_END} in para&lt;/p>
but this will give two "p" elements:
{SEL_END}&lt;p>text&lt;/p>&lt;p>text2&lt;/p>{SEL_END}

If a multiple selection exists it will also be processed and forwarded.
 Again, only fully selected nodes will be passed.
:)
declare variable $oxyxq:selection external;

(: We will process either the selection or the context node :)
let $toProcess := if (empty($oxyxq:selection)) then
    (.)
else
    ($oxyxq:selection)

return if (not(empty($toProcess))) then
        (
        (: Create the list :)
        let $ul :=
        &lt;ul>
            {
                for $sel in $toProcess
                return
                    &lt;li>{$sel}&lt;/li>
            }
        &lt;/ul>
        
        return
            (
            (: Delete the processed nodes :)
            for $sel in $toProcess
            return
                delete node $sel,
            (: Inserts the constructed list :)
            insert node $ul
                before $toProcess[1]
            )
        )
    else
        ()</codeblock></p>
    </section>
    <section id="xsltoperation_and_xqueryoperation">
      <title>XSLTOperation and XQueryOperation</title>
      <p>Applies an XSLT or XQuery script on a source element and then replaces or inserts the
        result in a specified target element.<note type="notice">For <ph keyref="webappProduct"/>,
          these operations cannot be invoked using the <xref keyref="jscript_api">JavaScript
            API</xref>.</note></p>
      <p>These operations accept the following parameters:</p>
      <p>
        <dl>
          <dlentry>
            <dt>sourceLocation</dt>
            <dd>
              <p>An XPath expression indicating the element that the script will be applied on. If
                it is not defined, then the element at the cursor position will be used.</p>
              <p>There may be situations where you want to look at an ancestor of the current
                element and take decisions in the script based on this. To do this, you can set the
                  <b>sourceLocation</b> to point to an ancestor node then use the
                  <codeph>oxy:current-element()</codeph> function to access the current element, as
                in the following
                example:<codeblock outputclass="language-xml">&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0" 
  xpath-default-namespace="http://docbook.org/ns/docbook" 
  xmlns:oxy="http://www.oxygenxml.com/ns/author/xpath-extension-functions" 
                           exclude-result-prefixes="oxy">     
    &lt;xsl:template match="/">
        &lt;xsl:apply-templates select="oxy:current-element()"/>
    &lt;/xsl:template>
    
    &lt;xsl:template match="para">
        &lt;!-- And the context is again inside the current element, 
        but we can use information from the entire XML -->
        &lt;xsl:variable 
            name="keyImage" select="//imagedata[@fileref='images/lake.jpeg']
              /ancestor::inlinemediaobject/@xml:id/string()"/>
                &lt;xref linkend="{$keyImage}" role="key_include" 
                  xmlns="http://docbook.org/ns/docbook">
                    &lt;xsl:value-of 
                          select="$currentElementLocation">&lt;/xsl:value-of>
        &lt;/xref>
    &lt;/xsl:template>    
&lt;/xsl:stylesheet></codeblock></p>
            </dd>
          </dlentry>
          <dlentry>
            <dt>targetLocation</dt>
            <dd>An XPath expression indicating the insert location for the result of the
              transformation. If it is not defined then the insert location will be at the cursor
              location.</dd>
          </dlentry>
          <dlentry>
            <dt>script</dt>
            <dd>
              <p>The script content (XSLT or XQuery). The base system ID for this will be the
                  <term>framework</term> file, so any include/import reference will be resolved
                relative to the <filepath>.framework</filepath> file that contains this action
                definition.</p>
              <p>For example, for the following script, the imported
                  <filepath>xslt_operation.xsl</filepath> needs to be located in the current
                  <term>framework</term>
                directory.<codeblock outputclass="language-xml">&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
             version="1.0">
    &lt;xsl:import href="xslt_operation.xsl"/>
&lt;/xsl:stylesheet></codeblock></p>
              <p>You can also use a path for an included or imported reference. When using a path,
                the following apply:<ul>
                  <li>A relative path is resolved to the <term>framework</term> directory.</li>
                  <li>The <xref href="editor-variables.dita#editor-variables/edvar-framework"
                        ><i>${framework}</i> editor variable</xref> can also be used to reference
                    resources from the <term>framework</term> directory.</li>
                  <li>The path is passed through the catalog mappings. It helps to use an absolute
                    URL (for instance, <filepath>http://www.oxygenxml.com/fr/testy.xsl</filepath>)
                    and map it in the <filepath>catalog.xml</filepath> file from the
                      <term>framework</term> directory to a resource from the
                    <term>framework</term>.</li>
                </ul></p>
            </dd>
          </dlentry>
          <dlentry>
            <dt>action</dt>
            <dd>The insert action relative to the node determined by the target XPath expression. It
              can be: Replace, At cursor position, Before, After, Inside as first child or Inside as
              last child.</dd>
          </dlentry>
          <dlentry>
            <dt>caretPosition</dt>
            <dd>The position of the cursor after the action is executed. It can be:
                <codeph>Preserve</codeph>, <codeph>Before</codeph>, <codeph>Start</codeph>,
                <codeph>First editable position</codeph>, <codeph>End</codeph>, or
                <codeph>After</codeph>. If this parameter is not set, you can still indicate the
              position of the cursor by using the <xref
                href="editor-variables.dita#editor-variables/edvar-caret"><i>${caret}</i> editor
                variable</xref> in the inserted content.</dd>
          </dlentry>
          <dlentry>
            <dt>expandEditorVariables</dt>
            <dd>Parameter controlling the expansion of <xref
                href="editor-variables.dita#editor-variables">editor variables</xref> returned by
              the script processing. Expansion is enabled by default.</dd>
          </dlentry>
          <dlentry>
            <dt>suspendTrackChanges</dt>
            <dd>It has 2 possible values (<codeph>true</codeph> and <codeph>false</codeph>). The
              default value is <codeph>false</codeph>. When set to <codeph>true</codeph>, the <xref
                keyref="glossentry_track-changes"><i>Track Changes</i></xref> feature is
              deactivated. When using this argument, after the action is finished, the state of the
                <term>Track Changes</term> feature is restored to its initial value.</dd>
          </dlentry>
          <dlentry>
            <dt>externalParams</dt>
            <dd>
              <p>A string that can assign multiple key-value pairs separated by a comma or a new
                line character.</p>
              <p>For example, if an XQuery script declares two external parameters like
                this:<codeblock outputclass="language-xml">declare variable $param1 external;
declare variable $param2 external;</codeblock></p>
              <p>You can pass custom values for each parameter by setting the <b>externalParams</b>
                to <codeph>param1=value1,param2=value2</codeph>.</p>
            </dd>
          </dlentry>
        </dl>
      </p>
      <p><b>XSLTOperation Example: Sort a list with respect to the language declared on the root
          element:</b></p>
      <p>Suppose you want an action that will sort a list with respect to the language declared on
        the root element and you have an XML file like
        this:<codeblock outputclass="language-xml">&lt;article xml:lang="en">
  &lt;ul>
     &lt;li>B&lt;/li>
     &lt;li>C&lt;/li>
     &lt;li>A&lt;/li>
  &lt;/ul>
&lt;/article></codeblock></p>
      <p>The <b>XSLTOperation</b> needs to be configured as follows:</p>
      <ul>
        <li><b>sourceLocation</b> is set to /* so that the script has access to the root element and
          its children.</li>
        <li><b>targetLocation</b> is left untouched (assuming that the action is active only when
          the cursor is inside the list).</li>
      </ul>
      <p>The XSLT script would look like
        this:<codeblock outputclass="language-xml">&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
  xmlns:oxy="http://www.oxygenxml.com/ns/author/xpath-extension-functions" 
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  exclude-result-prefixes="xs oxy" version="2.0">

  &lt;xsl:template match="/">
      &lt;!-- 
          sourceLocation parameter was set to /* to have a larger context.
          We can pinpoint the element that contained the caret 
          using the oxy:current-element() function.
      -->
      &lt;xsl:apply-templates select="oxy:current-element()"/>
  &lt;/xsl:template>

  &lt;xsl:template match="ul">
        
    &lt;!-- Because the sourceLocation parameter was set to /* we now have access to 
         the root element and its attributes. -->
    &lt;xsl:variable name="lang" select="/*/@xml:lang"/>
    &lt;xsl:variable name="collationURI">
      &lt;xsl:value-of select="concat('http://www.w3.org/2013/collation/UCA?lang=', $lang)"/>
    &lt;/xsl:variable>
        
      &lt;xsl:copy>
          &lt;xsl:copy-of select="@*"/>
            
          &lt;!-- Copy the list items, but sorted. -->
          &lt;xsl:apply-templates select="li">
              &lt;xsl:sort collation="{$collationURI}" select="text()"/>
          &lt;/xsl:apply-templates>
      &lt;/xsl:copy>
  &lt;/xsl:template>
    
  &lt;!-- This copy template will handle the contents of the list items. -->
  &lt;xsl:template match="@* | node()">
      &lt;xsl:copy>
          &lt;xsl:apply-templates select="@* | node()"/>
      &lt;/xsl:copy>
  &lt;/xsl:template>
&lt;/xsl:stylesheet></codeblock></p>
      <sectiondiv><b>Using Entities and Xincludes with the XSLTOperation</b></sectiondiv>
      <p>
        <ul>
          <li><b>Entities</b> will be resolved in the result.</li>
          <li><b>Xincludes</b> are also resolved in the result, and you can alter the XML obtained
            after the resolving using the XSLT/XQuery script of the operation, but you cannot alter
            the included document itself.</li>
        </ul>
      </p>
    </section>
    <section id="editor_variables_in_author_mode_operations">
      <title>Editor Variables in Author Mode Operations</title>
      <p id="editor-variables"><uicontrol>Author</uicontrol> mode operations can include parameters
        that contain the following <xref href="editor-variables.dita#editor-variables">editor
          variables</xref>:<ul>
          <li conkeyref="reusables-editor-variables/edVar-caret"/>
          <li conkeyref="reusables-editor-variables/edvar-selection"/>
          <li conkeyref="reusables-editor-variables/edVar-ask"/>
          <li conkeyref="reusables-editor-variables/edvar-timestamp"/>
          <li conkeyref="reusables-editor-variables/edvar-uuid"/>
          <li conkeyref="reusables-editor-variables/edVar-id"/>
          <li conkeyref="reusables-editor-variables/edVar-cfn"/>
          <li conkeyref="reusables-editor-variables/edVar-cfne"/>
          <li conkeyref="reusables-editor-variables/edvar-cf"/>
          <li conkeyref="reusables-editor-variables/edVar-cfd"/>
          <li conkeyref="reusables-editor-variables/edVar-frameworksDir"/>
          <li conkeyref="reusables-editor-variables/edVar-pd"/>
          <li conkeyref="reusables-editor-variables/edVar-oxygenInstallDir"/>
          <li conkeyref="reusables-editor-variables/edVar-homeDir"/>
          <li conkeyref="reusables-editor-variables/edVar-pn"/>
          <li conkeyref="reusables-editor-variables/edvar-env"/>
          <li conkeyref="reusables-editor-variables/edVar-system"/>
          <li conkeyref="reusables-editor-variables/edVar-date"/>
        </ul></p>
    </section>
  </body>
  <topic id="info-arguments">
    <title>How to Find More Information About the Arguments of an Operation</title>
    <body>
      <p>If you need to find more information about the arguments of an operation, there are several
        places where this information is available:<ul>
          <li>In the <xref
              href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorOperation.html"
              format="html" scope="external">API documentation</xref> for the particular
            operation.</li>
          <li>By invoking the <codeph>getArguments()</codeph> method on the operation.</li>
          <li>In the source code of the operation.</li>
          <li>In <ph keyref="product"/>:<ol>
              <li>Go to <menucascade>
                  <uicontrol>Options</uicontrol>
                  <uicontrol>Preferences</uicontrol>
                  <uicontrol>Document Type Association</uicontrol>
                </menucascade>, select a document type and click the <xref
                  href="preferences-document-type-association.dita#preferences-document-type-association"
                    ><uicontrol>New</uicontrol>, <uicontrol>Edit</uicontrol>,
                    <uicontrol>Duplicate</uicontrol>, or <uicontrol>Extend</uicontrol>
                button</xref>.</li>
              <li>Go to the <uicontrol>Author</uicontrol> tab and then the
                  <uicontrol>Actions</uicontrol> subtab. At the bottom of this subtab, click
                    <uicontrol><image href="../img/Add16.png"/>New</uicontrol> to open the <xref
                  href="the-action-dialog.dita"><uicontrol>Action</uicontrol> dialog
                box</xref>.</li>
              <li>Locate the <uicontrol>Operation</uicontrol> field and click the
                  <uicontrol>Choose</uicontrol> button on the right side. This will open a dialog
                box that displays the default operations.</li>
              <li>
                <p>Double-click the operation (or select it and click
                  <uicontrol>OK</uicontrol>).</p>
                <p>The arguments for the operation will now be displayed in the <xref
                    href="the-action-dialog.dita"><uicontrol>Action</uicontrol> dialog
                  box</xref>.</p>
              </li>
            </ol></li>
        </ul></p>
    </body>
  </topic>
</topic>
