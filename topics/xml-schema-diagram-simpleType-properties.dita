<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd">
<topic id="xml-schema-diagram-simpleType-properties">
  <title>xs:simpleType</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Design editing
            mode<indexterm>Components<indexterm>xs:simpleType</indexterm></indexterm></indexterm>
        <indexterm>XML Schemas<indexterm>Design mode
                editing<indexterm>Components<indexterm>xs:simpleType</indexterm></indexterm></indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>
      <fig>
        <title>The <i>xs:simpleType</i> Component</title>
        <image href="../img/schema_diagram_simpleType.png"/>
      </fig>
    </p>
    <p>Defines a simple type. A simple type definition is a set of constraints on strings and
      information about the values they encode, applicable to the normalized value of an attribute
      information item or of an element information item with no element children. Informally, it
      applies to the values of attributes and the text-only content of elements. See more info at
        <xref href="http://www.w3.org/TR/xmlschema11-1/#element-simpleType" scope="external"
        format="html"/>.</p>
    <note type="tip">A simple type that is a base type to another type will be rendered with yellow
      background.</note>
    <table colsep="1" rowsep="1" frame="all">
      <title><i>xs:simpleType</i> Properties</title>
      <tgroup cols="4">
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Description</entry>
            <entry>Possible Values</entry>
            <entry>Scope</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <b>Name</b>
            </entry>
            <entry>Simple type name. Always required.</entry>
            <entry>Any NCName</entry>
            <entry>Only for global simple types. If missing, will be displayed as '[simpleType]' in
              diagram.</entry>
          </row>
          <row>
            <entry>
              <b>Derivation</b>
            </entry>
            <entry>A simple type category</entry>
            <entry>restriction, list, or union</entry>
            <entry>For all simple types</entry>
          </row>
          <row>
            <entry>
              <b>Base Type</b>
            </entry>
            <entry>A simple type definition component. Required if derivation method is set to
              restriction.</entry>
            <entry>All global simple types and built-in simple types. In addition another 3
              proposals are present: [anonymous restriction], [anonymous list], [anonymous union]
              for easily create anonymous simple types. </entry>
            <entry>For global and anonymous simple types with the derivation method set to
              restriction</entry>
          </row>
          <row>
            <entry>
              <b>Item Type</b>
            </entry>
            <entry>A simple type definition component. Required if derivation method is set to list. </entry>
            <entry>All global simple types and built-in simple types(from schema for schema). In
              addition another 3 proposals are present: [anonymous restriction], [anonymous list],
              [anonymous union] for easily create anonymous simple types. </entry>
            <entry>For global and anonymous simple types with the derivation method set to list.
              Derivation by list is the process of transforming a simple datatype (named the item
              type) into a whitespace-separated list of values from this datatype. The item type can
              be defined inline by adding a simpleType definition as a child element of the list
              element, or by reference, using the itemType attribute (it is an error to use
              both).</entry>
          </row>
          <row>
            <entry>
              <b>Member Types</b>
            </entry>
            <entry>Category for grouping union members</entry>
            <entry>Not editable property</entry>
            <entry>For global and anonymous simple types with the derivation method set to
              union</entry>
          </row>
          <row>
            <entry>
              <b>Member</b>
            </entry>
            <entry> A simple type definition component. Required if derivation method is set to
              union. </entry>
            <entry>All global simple types and built-in simple types(from schema for schema). In
              addition another 3 proposals are present: [anonymous restriction], [anonymous list],
              [anonymous union] for easily create anonymous simple types. </entry>
            <entry>For global and anonymous simple types with the derivation method set to union.
              Deriving a simple datatype by union merges the lexical spaces of several simple
              datatypes (called member types) to create a new simple datatype. The member types can
              be defined either by reference (through the memberTypes attribute) or embedded as
              simple datatype local definitions in the xs:union element. Both styles can be
              mixed.</entry>
          </row>
          <row>
            <entry>
              <b>Final</b>
            </entry>
            <entry>Blocks any further derivations of this datatype (by list, union, derivation or
              all)</entry>
            <entry>#all, list, restriction, union, list restriction, list union, restriction union.
              In addition, [Empty] proposal is present for set empty string as value.</entry>
            <entry>Only for global simple types</entry>
          </row>
          <row>
            <entry>
              <b>ID</b>
            </entry>
            <entry>The component ID</entry>
            <entry>Any ID</entry>
            <entry>For all simple types</entry>
          </row>
          <row>
            <entry>
              <b>Component</b>
            </entry>
            <entry>The name of the edited component</entry>
            <entry>Not editable property</entry>
            <entry>Only for global and local simple types</entry>
          </row>
          <row>
            <entry>
              <b>Namespace</b>
            </entry>
            <entry>The component namespace</entry>
            <entry>Not editable property</entry>
            <entry>For global simple types</entry>
          </row>
          <row>
            <entry>
              <b>System ID</b>
            </entry>
            <entry>The component system ID</entry>
            <entry>Not editable property</entry>
            <entry>Not present for built-in simple types</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </body>
</topic>
