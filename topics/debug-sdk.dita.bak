<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="debug-sdk">
  <title>Debugging an Oxygen SDK Extension Using the Eclipse Workbench</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Oxygen SDK<indexterm>Debugging an SDK extension</indexterm></indexterm>
        <indexterm>Plugins<indexterm>Debugging an SDK extension</indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>To use the Eclipse workbench to debug problems in the code of an <xref
        keyref="glossentry_plugin"><term>extension</term></xref> without having to bundle its Java
      classes in a <xref keyref="glossentry_jar"><term>JAR</term></xref> library, perform the
      following steps:<ol id="ol_ops_m3p_hj">
        <li><xref href="https://www.oxygenxml.com/xml_editor/download_oxygenxml_editor.html"
            format="html" scope="external">Download</xref> and install <ph keyref="product"/>.</li>
        <li>Create an Eclipse Java Project (for example, <filepath>MySDKProject</filepath>) with the
          corresponding Java sources (for example, a custom implementation of the
            <i>ro.sync.ecss.extensions.api.StylesFilter</i> interface). </li>
        <li>In the Project build path, add external <term>JAR</term> references to all the
            <term>JAR</term> libraries in the <filepath><term
              conkeyref="reusables-user-guide/oxy-install-dir"/>/lib</filepath> folder. In the build
          path <uicontrol>Order and Export</uicontrol> panel, make sure that the
            <filepath>oxygen.jar</filepath> entry is before all other libraries. Now your Project
          should compile successfully.</li>
        <li>Start the standalone version of <ph keyref="product"/> from the <filepath><term
              conkeyref="reusables-user-guide/oxy-install-dir"/></filepath> and in the <ph
            conkeyref="reusables-preferences-pages/preferences-document-type-association"/>, edit
          the document type (for example, <b>DITA</b>) to open the <xref
            href="the-document-type-dialog.dita#the-document-type-dialog"><uicontrol>Document
              Type</uicontrol> configuration dialog box</xref>. In the <b>Classpath</b> tab, add a
          reference to your Project's <filepath>classes</filepath> directory and in the
            <b>Extensions</b> tab, select your custom <i>StylesFilter</i> extension as a value for
          the <b>CSS styles filter</b> property. Close the application to save your changes.</li>
        <li>
          <p>Create a new Java Application configuration for debugging. The Main Class should be
              <codeph>ro.sync.exml.Oxygen</codeph>. The given VM Arguments should be:</p>
          <p><codeph>-Dcom.oxygenxml.app.descriptor=ro.sync.exml.EditorFrameDescriptor
              -Xmx1024m</codeph></p>
        </li>
        <li product="developer editor"><xref
            href="using-breakpoints.dita#using-breakpoints/inserting_breakpoints">Add a
              <term>breakpoint</term></xref> in one of the source Java classes.</li>
        <li product="developer editor">Debug the created configuration. When the code reaches your
            <xref href="using-breakpoints.dita#using-breakpoints"><term>breakpoint</term></xref>,
          the Eclipse IDE debugging perspective should take over.</li>
      </ol></p>
  </body>
</topic>
