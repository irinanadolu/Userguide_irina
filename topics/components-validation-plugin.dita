<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="components-validation-plugin">
  <title>Components Validation Plugin Extension</title>
  <shortdesc>This type of <xref keyref="glossentry_plugin"><term>plugin</term></xref> allows you to
    customize the menus, toolbars, and other components by enabling or filtering them from the user
    interface.</shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Plugin extensions<indexterm>Components Validation</indexterm></indexterm>
        <indexterm>Components Validation plugin extension</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <conbody>
    <p>This <term>plugin</term> provides the following API:</p>
    <p>
      <dl>
        <dlentry>
          <dt><b><i>ComponentsValidatorPluginExtension</i> interface</b></dt>
          <dd>
            <p>There is one method that must be implemented:</p>
            <p>
              <dl>
                <dlentry>
                  <dt><i>getComponentsValidator()</i></dt>
                  <dd>Returns a <xref
                      href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/exml/ComponentsValidator.html"
                      format="html" scope="external"><i>ro.sync.exml.ComponentsValidator</i></xref>
                    implementation class used for validating the menus, toolbars, and their
                    actions.</dd>
                </dlentry>
              </dl>
            </p>
          </dd>
        </dlentry>
        <dlentry>
          <dt><b><i>ComponentsValidator</i> interface</b></dt>
          <dd>
            <p>Provides methods to filter various features from being added to the GUI of <ph
                keyref="product"/>:</p>
            <p>
              <dl>
                <dlentry>
                  <dt><i>validateMenuOrTaggedAction(String[] menuOrActionPath)</i></dt>
                  <dd> Checks if a menu or a tag action from a menu is allowed and returns a
                      <codeph>boolean</codeph> value. A tag is used to uniquely identifying an
                    action. The <i>String[]</i> argument is the tag of the menu / action and the
                    tags of its parent menus if any. </dd>
                </dlentry>
                <dlentry>
                  <dt><i>validateToolbarTaggedAction(String[] toolbarOrAction)</i></dt>
                  <dd> Checks if an action from a toolbar is allowed and returns a <i>boolean</i>
                    value. The <i>String[]</i> argument is the tag of the action from a toolbar and
                    the tag of its parent toolbar if any.</dd>
                </dlentry>
                <dlentry>
                  <dt><i>validateComponent(String key)</i></dt>
                  <dd> Checks if the given component is allowed and returns a
                      <codeph>boolean</codeph> value. The <i>String</i> argument is the tag
                    identifying the component. You can remove toolbars entirely using this
                    callback.</dd>
                </dlentry>
                <dlentry>
                  <dt><i>validateAccelAction(String category, String tag)</i></dt>
                  <dd>Checks if the given accelerator action is allowed to appear in the GUI and
                    returns a <codeph>boolean</codeph> value. An accelerator action can be uniquely
                    identified so it will be removed both from toolbars or menus. The first argument
                    represents the action category, the second is the tag of the action.</dd>
                </dlentry>
                <dlentry>
                  <dt><i>validateContentType(String contentType)</i></dt>
                  <dd>Checks if the given content type is allowed and returns a
                      <codeph>boolean</codeph> value. The <i>String</i> argument represents the
                    content type. You can instruct <ph keyref="product"/> to ignore content types
                    such as <codeph>text / xsl</codeph> or <codeph>text / xquery</codeph>.</dd>
                </dlentry>
                <dlentry>
                  <dt><i>validateOptionPane(String optionPaneKey)</i></dt>
                  <dd>Checks if the given options page can be added in the preferences option tree
                    and returns a <codeph>boolean</codeph> value. The <i>String</i> argument is the
                    option pane key.</dd>
                </dlentry>
                <dlentry>
                  <dt><i>validateOption(String optionKey)</i></dt>
                  <dd>Checks if the given option can be added in the option page and returns a
                      <codeph>boolean</codeph> value. The <i>String</i> argument is the option key.
                    This method is mostly used for internal use and it is not called for each option
                    in a preferences page.</dd>
                </dlentry>
                <dlentry>
                  <dt><i>validateLibrary(String library)</i></dt>
                  <dd>Checks if the given library is allowed to appear listed in the
                      <uicontrol>About</uicontrol> dialog box and returns a <codeph>boolean</codeph>
                    value. The <i>String</i> argument is the library. This method is mostly for
                    internal use.</dd>
                </dlentry>
                <dlentry>
                  <dt><i>validateNewEditorTemplate(EditorTemplate editorTemplate)</i></dt>
                  <dd>Checks if the given template for a new editor is allowed and returns a
                      <codeph>boolean</codeph> value. The <i>EditorTemplate</i> argument is the
                    editor template. An <i>EditorTemplate</i> is used to create an editor for a
                    given extension. You can thus filter what appears in the list of the
                      <uicontrol>New</uicontrol> dialog box.</dd>
                </dlentry>
                <dlentry>
                  <dt><i>isDebuggerperspectiveAllowed()</i></dt>
                  <dd>Checks if the debugger <xref keyref="glossentry_perspective"
                        ><term>perspective</term></xref> is allowed and returns a
                      <codeph>boolean</codeph> value.</dd>
                </dlentry>
                <dlentry>
                  <dt><i>validateSHMarker(String marker)</i></dt>
                  <dd>Checks if the given marker is allowed and returns a <codeph>boolean</codeph>
                    value. The <i>String</i> argument represents the syntax highlight marker to be
                    checked. If you decide to filter certain content types, you can also filter the
                    syntax highlight options so that the content type is no longer present in the
                    Preferences options tree.</dd>
                </dlentry>
                <dlentry>
                  <dt><i>validateToolbarComposite(String toolbarCompositeTag)</i></dt>
                  <dd>Checks if the toolbar composite is available. A toolbar composite is a toolbar
                    component such as a drop-down menu.</dd>
                </dlentry>
              </dl>
            </p>
          </dd>
        </dlentry>
      </dl>
    </p>
    <note type="tip">The best way to decide what to filter is to observe the values that <ph
        keyref="product"/> passes when these callbacks are called. You have to create an
      implementation for this interface that lists in the console all values received by each
      function. Then you can decide on the values to filter and act accordingly.</note>
  </conbody>
</concept>
