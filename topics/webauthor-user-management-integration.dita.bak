<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="webauthor-user-management-integration">
  <title>Integrating Web Author with a User Management System</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Integration with a file storage service</indexterm>
        <indexterm>File storage service integration</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p><ph keyref="webappProduct"/> does not manage the users itself, but it can work with an
      external user management service. This allows you to manage permissions and authentication,
      display the name of the user in comments and tracked changes, or customize the interface
      according to a user profile.</p>
    <section id="section_lhv_jfq_1z">
      <title>User Authentication</title>
      <p>Users do not have to log in to the Web Author server itself. However, they need to give Web
        Author permissions to access files on their behalf. This is usually handled through the use
        of a <xref
          href="webauthor-integrating-file-storage.dita#webauthor-integrating-file-storage/integration-custom-plugin"
          >file storage connector plugin</xref> and by <xref
          href="how_to_cms_auth.dita#how_to_cms_auth">implementing an authentication
          mechanism</xref>.</p>
    </section>
    <section id="section_nyt_xfq_1z">
      <title>User Name</title>
      <p>The name of the user is used by Web Author for comments and tracked changes. To configure
        the editor to display the correct name, you simply need to <xref
          href="webauthor-integrate-embedded-launch.dita#webauthor-integrate-embedded-launch/url_parameters"
          >construct a target URL and use the <b>author</b> parameter</xref> to specify the user's
        name.</p>
    </section>
    <section id="section_ox4_lgq_1z">
      <title>Customizing the UI According to User Profile</title>
      <p>In most cases, <ph keyref="webappProduct"/> is used by diverse groups of people composed of
        subject matter experts, support teams, technical writers, and other content contributors and
        reviewers. In many cases, it makes sense to customize the complexity of the user interface
        according to the user profile. This allows you to simplify the user interface for particular
        types of users so that they only have access to features that are relevant for their
        particular usage.</p>
      <p>Some of the things that you can customize for particular users include:<ul
          id="ul_o3w_bhq_1z">
        <li>You can <xref keyref="jscript_api_removeaction">remove actions</xref> from the toolbars and contextual
            menus.</li>
          <li>You can <xref keyref="jscript_api_customaction">add custom actions</xref> to the
            toolbars, contextual menus, or form controls.</li>
          <li>You can <xref keyref="jscript_api_customview">add or remove side-views</xref> from the
            interface.</li>
          <li>You can control whether or not the <term>Change Tracking</term> feature is enabled by
            setting the <b>trackChanges</b> property in a plugin (using the <xref
              keyref="jscript_api_workspace_LoadingOptions"><i>LoadingOptions</i> type definition
              from the <i>Workspace</i> API</xref>).</li>
          <li>You can control the behavior of the <uicontrol><shortcut>Enter</shortcut></uicontrol>
            key for particular users by setting the <b>ccOnEnter</b> property in a plugin (using the
              <xref keyref="jscript_api_workspace_LoadingOptions"><i>LoadingOptions</i> type
              definition from the <i>Workspace</i> API</xref>).</li>
          <li>You can hide the <i>breadcrumb</i> that shows the document's XML structure and
            normally appears at the bottom of the interface. You can do this by setting the
              <b>hideBreadcrumb</b> property in a plugin (using the <xref
              keyref="jscript_api_workspace_LoadingOptions"><i>LoadingOptions</i> type definition
              from the <i>Workspace</i> API</xref>).</li>
        </ul></p>
    </section>
    <section id="section_r3h_xtc_fmb">
      <title>Loading the Framework According to User Profile</title>
      <p>You can create multiple frameworks tuned for different user profiles and load them
        depending on the current user. You can share configurations between these frameworks by
        using the <xref href="customizing_frameworks.dita#customizing_frameworks/section_zzf_pns_vz"
          >framework extension</xref> mechanism.</p>
      <p>To configure a framework to be loaded for a particular user profile:<ol id="ol_z4m_r5c_fmb">
          <li>Set a <xref keyref="jscript_api_workspace_LoadingOptions">loading option</xref> that
            specifies the role of the user using <xref href="customizing_js.dita">JavaScript
              code</xref>. The profile should be one of: <codeph>author</codeph>,
              <codeph>reviewer</codeph>, or <codeph>sme</codeph>.</li>
          <li>Install this plugin: <xref
              href="https://github.com/oxygenxml/web-author-user-role-plugin/" format="html"
              scope="external"/>. It will contribute some framework matching rules that takes the
            profile of the user into account.</li>
          <li>Configure each of the <uicontrol>Association rules</uicontrol> for your framework to
            use the Java class that corresponds to the desired profile:
              <codeph>AuthorUserFrameworkMatcher</codeph>,
              <codeph>ReviewerUserFrameworkMatcher</codeph>, or
              <codeph>SmeUserFrameworkMatcher</codeph>.</li>
        </ol></p>
    </section>
  </body>
</topic>
