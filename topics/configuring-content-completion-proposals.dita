<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="urn:oasis:names:tc:dita:rng:topic.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<topic id="configuring-content-completion-proposals">
  <title>Configuring the Proposals for Attribute and Element Values </title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Framework customization<indexterm>Configuring content completion
            proposals</indexterm></indexterm>
        <indexterm>Configuring content completion proposals</indexterm>
        <indexterm>Content completion configuration file (cc_config.xml)</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p><ph keyref="product"/> includes support for configuring the proposed values that appear in
      the <xref keyref="glossentry_content-completion-assistant"><term>Content Completion
          Assistant</term></xref>. To do so, a configuration file is used, along with the associated
      schema, to add or replace possible values for attributes or elements that are proposed in the
        <term>Content Completion Assistant</term>.</p>
    <p>For an example of a specific use-case, suppose that you want the <term>Content Completion
        Assistant</term> to propose several possible values for the language code when you use an
        <xmlatt>xml:lang</xmlatt> attribute.</p>
    <section conkeyref="reusables-editing-documents/how_to_configure_the_proposed_values_in_cc"
      id="d2e47"/>
    <section id="configuration_file">
      <title>Configuring Proposed Values</title>
      <p>For the purposes of adding or replacing the values that are proposed, the configuration
        file (<filepath>cc_config.xml</filepath>) includes a series of <codeph>match</codeph>
        instructions that will match an element or attribute name. You also have the possibility of
        using an <xmlatt>editable</xmlatt> attribute on the <xmlelement>match</xmlelement> element
        to specify the editable state of the attribute values, as reflected in the <xref
          href="author-attributes-view.dita#author-attributes-view"
            ><uicontrol>Attributes</uicontrol> view</xref> and the <xref
          href="author-attributes-view.dita#author-attributes-view/in-place-attr-editor"
            ><uicontrol>In-place Attributes Editor</uicontrol></xref>. The possible values for the
          <xmlatt>editable</xmlatt> attribute are:<ul irina="irina">
          <li><b>true</b> - The attribute values can be edited by choosing from a combo box or
            manually providing a value.</li>
          <li><b>false</b> - The attribute values cannot be edited.</li>
          <li><b>onlyAllowedItems</b> - The attribute values can be edited, but only by choosing
            from a list of proposed values, in a non-editable combo box.</li>
        </ul></p>
      <p>A new value is specified inside one or more <xmlelement>item</xmlelement> elements, which
        are grouped inside an <xmlelement>items</xmlelement> element. The behavior of the
          <xmlelement>items</xmlelement> element is specified with the help of the
          <xmlatt>action</xmlatt> attribute, which can have any of the following values:<ul
          id="ul_ghd_c55_kr" irina="irina">
          <li><b>append</b> - Adds new values to appear in the proposals list (default value).</li>
          <li><b>addIfEmpty</b> - Adds new values to the proposals list only if no other values are
            contributed by the schema.</li>
          <li><b>replace</b> - Replaces the values contributed by the schema with new values to
            appear in the proposals list.</li>
        </ul></p>
      <p>The values in the configuration file can be specified either directly or by calling an
        external XSLT file that will extract data from an external source.</p>
    </section>
    <section id="other_important_notes">
      <title>Other Important Notes About the Configuration File</title>
      <note type="important">
        <ul irina="irina">
          <li>This configuration file only affects the content completion assistance, not
            validation.</li>
          <li>To test the effects of your changes, you should restart the application.</li>
        </ul>
      </note>
    </section>
    <section id="example_specifying_values_directly">
      <title>Example: Specifying Values Directly</title>
      <p>If you want to specify the values directly, the configuration file should look like
        this:</p>
      <p>
        <codeblock outputclass="language-xml">&lt;!-- Replaces the values for an element with the local name "lg",
      from the given namespace -->
&lt;match elementName="lg" elementNS="http://www.oxygenxml.com/ns/samples">
    &lt;items action="replace">
        &lt;item value="stanza"/>
        &lt;item value="refrain"/>
    &lt;/items>
&lt;/match>

&lt;!-- Adds two values for an attribute with the local name "type",
      from any namespace -->
&lt;match attributeName="type" editable="onlyAllowedItems">
    &lt;items>
        &lt;item value="stanza"/>
        &lt;item value="refrain"/>
    &lt;/items>
&lt;/match></codeblock>
      </p>
    </section>
    <section id="example_calling_an_external_xslt_script">
      <title>Example: Calling an External XSLT Script</title>
      <p>If you want to collect values from an external XSLT script, the configuration file should
        include something like this:</p>
      <p>
        <codeblock outputclass="language-xml">&lt;xslt href="../xsl/get_values_from_db.xsl" useCache="false" action="replace"/></codeblock>
      </p>
      <p>In this example, the <codeph>get_values_from_db.xsl</codeph> is executed to extract values
        from a database.<note type="tip">You can use <codeph>xsl:message</codeph> as a debugging
          mechanism. These messages are presented in the results area at the bottom of the
          application whenever the <term>Content Completion Assistant</term> is
          invoked.</note><note>A comprehensive XSLT sample is included in the <uicontrol>Content
            Completion Configuration</uicontrol> document template (in the <menucascade>
            <uicontrol>Framework Templates</uicontrol>
            <uicontrol>Oxygen Extensions</uicontrol>
          </menucascade> section of the <xref href="new-dialog-sa.dita#new-dialog-sa"
            product="author developer editor"><uicontrol>New</uicontrol> document wizard</xref><xref
            href="creating-from-templates.dita#creating-from-templates"
            product="authorEclipse developerEclipse editorEclipse"><uicontrol>New from
              templates</uicontrol> wizard</xref>).</note></p>
    </section>
    <section id="configuring_proposed_values_in_context">
      <title>Configuring Proposed Values in the Context Where the Content Completion was
        Invoked</title>
      <note type="other" othertype="Web Author Customization Note">This particular scenario is not
        supported for an <ph keyref="webappProduct"/> customization.</note>
      <p>A more complex scenario is if you want to choose the possible values to propose, depending
        on the context of the element where the content completion was invoked.</p>
      <p>Suppose that you want to propose certain possible values for one property (for example,
          <i>color</i>) and other values for another property (for example, <i>shape</i>). If the
        property represents a color, then the values should represent applicable colors, while if
        the property represents a shape, then the values should represent applicable shapes. See the
        following code snippets:</p>
      <p>Your main
        document:<codeblock outputclass="language-xml">&lt;sampleArticle>
  &lt;!-- The possible values for @value should be "red" and "blue" -->
  &lt;property name="color" value=""/>
  &lt;!-- The possible values for @value should be "square" and "rectangle" -->
  &lt;property name="shape" value=""/>
&lt;/sampleArticle></codeblock>The
        content completion configuration
        file:<codeblock outputclass="language-xml">&lt;config xmlns="http://www.oxygenxml.com/ns/ccfilter/config">
    &lt;match elementName="property" attributeName="value">
      &lt;xslt href="get_values.xsl" useCache="false" action="replace"/>
    &lt;/match>
&lt;/config></codeblock>The
        stylesheet that defines the possible values based on the context of the property on which
        the content completion was
        invoked:<codeblock outputclass="language-xml">&lt;xsl:stylesheet 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:saxon="http://saxon.sf.net/"
  exclude-result-prefixes="xs"
  version="2.0">
  
  &lt;xsl:param name="documentSystemID" as="xs:string">&lt;/xsl:param>
  &lt;xsl:param name="contextElementXPathExpression" as="xs:string">&lt;/xsl:param>
  
  &lt;xsl:template name="start">
    &lt;xsl:apply-templates select="doc($documentSystemID)"/>
  &lt;/xsl:template>
  
  &lt;xsl:template match="/">
   &lt;xsl:variable name="propertyElement" 
    select="saxon:eval(saxon:expression($contextElementXPathExpression, ./*))"/>
    
   &lt;items>
     &lt;xsl:if test="$propertyElement/@name = 'color'">
       &lt;item value='red'/>
       &lt;item value='blue'/>  
     &lt;/xsl:if>
     &lt;xsl:if test="$propertyElement/@name = 'shape'">
       &lt;item value='rectangle'/>
       &lt;item value='square'/>  
     &lt;/xsl:if>
   &lt;/items>
  &lt;/xsl:template>
&lt;/xsl:stylesheet></codeblock></p>
      <p>The <codeph>contextElementXPathExpression</codeph> parameter will be bound to an XPath
        expression that identifies the element in the context where the content completion was
        invoked.</p>
    </section>
  </body>
  <related-links>
    <linklist>
      <title>Related Information:</title>
      <link
        href="configure-elements-attr-cc-individually.dita#configure-elements-attr-cc-individually"/>
      <link href="rendering-elements-cc-author.dita#rendering-elements-cc-author"
        product="author editor authorEclipse editorEclipse"/>
    </linklist>
  </related-links>
</topic>
