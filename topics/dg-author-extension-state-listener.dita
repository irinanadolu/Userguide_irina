<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd">
<topic id="dg-author-extension-state-listener">
  <title>Configuring a State Listener for Author Mode</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Framework customization<indexterm>Extensions<indexterm>Author Extension State
              Listener</indexterm></indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>The <xref
        href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorExtensionStateListener.html"
        format="html" scope="external"
          ><i>ro.sync.ecss.extensions.api.AuthorExtensionStateListener</i></xref> implementation is
      notified when the <uicontrol>Author</uicontrol> mode extension (where the listener is defined)
      is activated or deactivated in the document type detection process.</p>
    <codeblock outputclass="language-java">import ro.sync.ecss.extensions.api.AuthorAccess;
import ro.sync.ecss.extensions.api.AuthorExtensionStateListener;

public class SDFAuthorExtensionStateListener implements
		AuthorExtensionStateListener {
  private AuthorListener sdfAuthorDocumentListener;
  private AuthorMouseListener sdfMouseListener;
  private AuthorCaretListener sdfCaretListener;
  private OptionListener sdfOptionListener;</codeblock>
    <p>When the association rules of the <xref keyref="glossentry_framework"
        ><term>framework</term></xref> (document type) configuration match that of a document open
      in the <uicontrol>Author</uicontrol> editing mode, the <i>activation</i> event received by
      this listener should be used to perform custom initializations and to register listeners such
      as <xref
        href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorListener.html"
        format="html" scope="external"><i>ro.sync.ecss.extensions.api.AuthorListener</i></xref>,
        <xref
        href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorMouseListener.html"
        format="html" scope="external"
      ><i>ro.sync.ecss.extensions.api.AuthorMouseListener</i></xref>, or <xref
        href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorCaretListener.html"
        format="html" scope="external"
      ><i>ro.sync.ecss.extensions.api.AuthorCaretListener</i></xref>. </p>
    <codeblock outputclass="language-java">	public void activated(AuthorAccess authorAccess) {
	  // Get the value of the option.
	  String option = authorAccess.getOptionsStorage().getOption(
               "sdf.custom.option.key", "");
	  // Use the option for some initializations...
	  
	  // Add an OptionListener.
	  authorAccess.getOptionsStorage().addOptionListener(sdfOptionListener);
	  
	  // Add author DocumentListeners.
	  sdfAuthorDocumentListener = new SDFAuthorListener();
	  authorAccess.getDocumentController().addAuthorListener(
               sdfAuthorDocumentListener);
	
	  // Add MouseListener.
	  sdfMouseListener = new SDFAuthorMouseListener();
	  authorAccess.getEditorAccess().addAuthorMouseListener(sdfMouseListener);
	
	  // Add CaretListener.
	  sdfCaretListener = new SDFAuthorCaretListener();
	  authorAccess.getEditorAccess().addAuthorCaretListener(sdfCaretListener);
	
	  // Other custom initializations...
	
	}</codeblock>
    <p>The <b>authorAccess</b> parameter received by the <i>activated</i> method can be used to gain
      access to specific <uicontrol>Author</uicontrol> mode actions and informations related to
      components such as the editor, document, workspace, tables, or the <term>change
        tracking</term> manager.</p>
    <p>If options specific to the custom developed <i>Author Extension</i> need to be stored or
      retrieved, a reference to the <xref
        href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/OptionsStorage.html"
        format="html" scope="external"><i>ro.sync.ecss.extensions.api.OptionsStorage</i></xref> can
      be obtained by calling the <i>getOptionsStorage</i> method from the <b>authorAccess</b>. The
      same object can be used to register <xref
        href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/OptionListener.html"
        format="html" scope="external"><i>ro.sync.ecss.extensions.api.OptionListener</i></xref>
      listeners. An option listener is registered in relation with an option <b>key</b> and will be
      notified about the value changes of that option.</p>
    <p>An <i>AuthorListener</i> can be used if events related to the <uicontrol>Author</uicontrol>
      mode document modifications are of interest. The listener can be added to the <xref
        href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorDocumentController.html"
        format="html" scope="external"
        ><i>ro.sync.ecss.extensions.api.AuthorDocumentController</i></xref>. A reference to the
      document controller is returned by the <i>getDocumentController</i> method from the
        <b>authorAccess</b>. The document controller can also be used to perform operations
      involving document modifications.</p>
    <p>To provide access to the <uicontrol>Author</uicontrol> mode component-related functionality
      and information, the <b>authorAccess</b> has a reference to the <xref
        href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/access/AuthorEditorAccess.html"
        format="html" scope="external"
        ><i>ro.sync.ecss.extensions.api.access.AuthorEditorAccess</i></xref> that can be obtained
      when calling the <i>getEditorAccess</i> method. At this level, <i>AuthorMouseListener</i> and
        <i>AuthorCaretListener</i> can be added to provide notification of mouse and cursor events
      that occur in the <uicontrol>Author</uicontrol> editor mode.</p>
    <p>The <i>deactivation</i> event is received when another <term>framework</term> is activated
      for the same document, the user switches to another editor mode or the editor is closed. The
        <i>deactivate</i> method is typically used to unregister the listeners previously added on
      the <i>activate</i> method and to perform other actions. For example, options related to the
      deactivated <i>Author Extension</i> can be saved at this point.</p>
    <codeblock outputclass="language-java">	public void deactivated(AuthorAccess authorAccess) {
	  // Store the option.
	  authorAccess.getOptionsStorage().setOption(
               "sdf.custom.option.key", optionValue);
	  
	  // Remove the OptionListener.
	  authorAccess.getOptionsStorage().removeOptionListener(sdfOptionListener);
    
	  // Remove DocumentListeners.
	  authorAccess.getDocumentController().removeAuthorListener(
               sdfAuthorDocumentListener);
    
	  // Remove MouseListener.
	  authorAccess.getEditorAccess().removeAuthorMouseListener(sdfMouseListener);

	  // Remove CaretListener.
	  authorAccess.getEditorAccess().removeAuthorCaretListener(sdfCaretListener);
    
	  // Other actions...
    
	}</codeblock>
    <note conkeyref="reusable_notes_java-files/sdf_project"/>
  </body>
</topic>
