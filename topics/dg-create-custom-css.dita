<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd">
<topic id="dg-create-custom-css">
  <title>Step 5: Create a Custom CSS</title>
  <body>
    <p>If you read the <xref href="dg-customization-tutorial-overview.dita">Framework Customization
        Overview</xref> then you already have some basic knowledge about creating simple styles. The
      example document contains elements from various namespaces, so you need to use CSS Level 3
      extensions (supported by the <uicontrol>Author</uicontrol> mode layout engine) to associate
      specific properties with that element.</p>
    <section id="defining_the_general_layout">
      <title>Defining the General Layout</title>
      <p>Now the basic layout of the rendered documents is created.</p>
      <p>Elements that are stacked one on top of the other are: <codeph>book</codeph>,
          <codeph>article</codeph>, <codeph>section</codeph>, <codeph>title</codeph>,
          <codeph>figure</codeph>, <codeph>table</codeph>, <codeph>image</codeph>. These elements
        are marked as having <codeph>block</codeph> style for display. Elements that are placed one
        after the other in a flowing sequence are: <codeph>b</codeph>, <codeph>i</codeph>. These
        will have <codeph>inline</codeph> display.</p>
      <p>
        <codeblock outputclass="language-css">/* Vertical flow */
book,
section,
para,
title,
image,
ref {
    display:block;
}

/* Horizontal flow */
b,i {
    display:inline;
}</codeblock>
      </p>
      <note type="important">Having <codeph>block</codeph> display children in an
          <codeph>inline</codeph> display parent results in <ph keyref="product"/> changing the
        style of the parent to <codeph>block</codeph> display.</note>
    </section>
    <section id="styling_an_element">
      <title>Styling an Element</title>
      <p>The title of any section must be bold and smaller than the title of the parent section. To
        create this effect, a sequence of CSS rules must be created. The <codeph>*</codeph> operator
        matches any element, it can be used to match titles having progressive depths in the
        document.</p>
      <p>
        <codeblock outputclass="language-css">title{
    font-size: 2.4em;
    font-weight:bold;    
}
* * title{
    font-size: 2.0em;
}
* * * title{
    font-size: 1.6em;
}
* * * * title{
    font-size: 1.2em;
}</codeblock>
      </p>
      <p>It is useful to have before the title a constant text, indicating that it refers to a
        section. This text can include also the current section number. The <codeph>:before</codeph>
        and <codeph>:after</codeph> pseudo-elements will be used, plus the CSS counters.</p>
      <p>First declare a counter named <codeph>sect</codeph> for each <codeph>book</codeph> or
          <codeph>article</codeph>. The counter is set to zero at the beginning of each such
        element:</p>
      <p>
        <codeblock outputclass="language-css">book, 
article{
    counter-reset:sect;
}
                        </codeblock>
      </p>
      <p>The <codeph>sect</codeph> counter is incremented with each <codeph>section</codeph>, that
        is a direct child of a <codeph>book</codeph> or an <codeph>article</codeph> element.</p>
      <p>
        <codeblock outputclass="language-css">book &gt; section,
article &gt; section{
    counter-increment:sect;
}   </codeblock>
      </p>
      <p>The "static" text that will prefix the section title is composed of the constant "Section
        ", followed by the decimal value of the <codeph>sect</codeph> counter and a dot.</p>
      <p>
        <codeblock outputclass="language-css">book &gt; section &gt; title:before,
article &gt; section &gt; title:before{
    content: "Section " counter(sect) ". ";
}</codeblock>
      </p>
      <p>To make the documents easy to read, you add a margin to the sections. In this way the
        higher nesting level, the larger the left side indent. The margin is expressed relatively to
        the parent bounds:</p>
      <p>
        <codeblock outputclass="language-css">section{
    margin-left:1em;
    margin-top:1em;
}</codeblock>
      </p>
      <p>
        <fig>
          <title>A sample of nested sections and their titles.</title>
          <image href="../img/dg_sections.png"/>
        </fig>
      </p>
      <p>In the above screenshot you can see a sample XML document rendered by the CSS stylesheet.
        The selection "avoids" the text that is generated by the CSS "content" property. This
        happens because the CSS generated text is not present in the XML document and is just a
        visual aid.</p>
    </section>
    <section id="styling_inline_elements">
      <title>Styling Inline Elements</title>
      <p>The "bold" style is obtained by using the <codeph>font-weight</codeph> CSS property with
        the value <codeph>bold</codeph>, while the "italic" style is specified by the
          <codeph>font-style</codeph> property:</p>
      <p>
        <codeblock outputclass="language-css">b {
    font-weight:bold;
}

i {
    font-style:italic;
}</codeblock>
      </p>
    </section>
    <section id="styling_images">
      <title>Styling Images</title>
      <p>The CSS 2.1 does not specify how an element can be rendered as an image. To overpass this
        limitation, <ph keyref="product"/> supports a CSS Level 3 extension allowing to load image
        data from a URL. The URL of the image must be specified by one of the element attributes and
        it is resolved through the catalogs specified in <ph keyref="product"/>.</p>
      <codeblock outputclass="language-css">
image{
    display:block;
    content: attr(href, url);
    margin-left:2em;
}</codeblock>
      <p>The <codeph>image</codeph> element has the required <xmlatt>href</xmlatt> attribute of type
          <codeph>xs:anyURI</codeph>. The <xmlatt>href</xmlatt> attribute contains an image location
        so the rendered content is obtained by using the
        function:<codeblock outputclass="language-css">attr(href, url)</codeblock> The first
        argument is the name of the attribute pointing to the image file. The second argument of the
          <codeph>attr</codeph> function specifies the type of the content. If the type has the
          <codeph>url</codeph> value, then <ph keyref="product"/> identifies the content as being an
        image. If the type is missing, then the content will be the text representing the attribute
        value.</p>
      <p><ph keyref="product"/> handles both absolute and relative specified URLs. If the image has
        an <i>absolute</i> URL location (for example:
        "http://www.oasis-open.org/images/standards/oasis_standard.jpg") then it is loaded directly
        from this location. If the image URL is <i>relative</i> specified to the XML document (for
        example: "images/my_screenshot.jpg") then the location is obtained by adding this value to
        the location of the edited XML document.</p>
      <p>An image can also be referenced by the name of a DTD entity that specifies the location of
        the image file. For example, if the document declares an entity <b>graphic</b> that points
        to a JPEG image file:</p>
      <codeblock outputclass="language-xml">&lt;!ENTITY graphic SYSTEM "depo/keyboard_shortcut.jpg" NDATA JPEG&gt;</codeblock>
      <p>and the image is referenced in the XML document by specifying the name of the entity as the
        value of an attribute:</p>
      <codeblock outputclass="language-xml">&lt;mediaobject&gt;
    &lt;imageobject&gt;
        &lt;imagedata entityref="graphic" scale="50"/&gt;
    &lt;/imageobject&gt;
&lt;/mediaobject&gt;</codeblock>
      <p>The CSS should use the functions <codeph>url</codeph>, <codeph>attr</codeph> and
          <codeph>unparsed-entity-uri</codeph> for displaying the image in the
          <uicontrol>Author</uicontrol> mode:</p>
      <codeblock outputclass="language-css">imagedata[entityref]{
    content: url(unparsed-entity-uri(attr(entityref))); 
}
</codeblock>
      <p>To take into account the value of the <xmlatt>width</xmlatt> attribute of the
          <codeph>imagedata</codeph> and use it for resizing the image, the CSS can define the
        following rule:</p>
      <codeblock outputclass="language-css">imagedata[width]{
  width:attr(width, length);
}</codeblock>
      <p>
        <fig>
          <title>Samples of images in Author</title>
          <image href="../img/dg_images_in_author.png"/>
        </fig>
      </p>
    </section>
  </body>
</topic>
