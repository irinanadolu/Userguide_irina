<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="urn:oasis:names:tc:dita:rng:topic.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<topic id="ch_creating_a_toc">
  <title>Creating a Table of Contents (TOC)</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Table of contents creation</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>A TOC (table of contents) is a special page that contains links to the chapters and sections
      of your book. Each line contains: <ul id="ol_hpt_pdn_vz">
        <li>The title of the chapter or section.</li>
        <li>A line of dots or other decoration, called a <term>leader</term>.</li>
        <li>The page number of the target chapter/section.</li>
      </ul></p>
    <p>It may look like this:</p>
    <codeblock outputclass="language-css">Installing the Software ..........................10
   On Windows ....................................12
   On Mac.........................................17</codeblock>
    <p>There should be some structure in your document that reflects the tree of the TOC, with ID
      links.</p>
    <codeblock outputclass="language-xml"> &lt;ul class="toc">
    &lt;li>&lt;a href="#introduction">Introduction&lt;/a>&lt;/li>
    &lt;li>&lt;a href="#installing">Installing the Software&lt;/a>&lt;/li>
    &lt;li>&lt;ul>
          &lt;li>&lt;a href="#installing_win">On Windows&lt;/a>&lt;/li>
    &lt;/ul>&lt;/li>
    &lt;li>&lt;ul>
          &lt;li>&lt;a href="#installing_mac">On Mac&lt;/a>&lt;/li>
    &lt;/ul>&lt;/li>
 &lt;/ul></codeblock>
    <p>You can use the same <codeph>target-counter</codeph> function as for <xref
        href="ch_cross-references.dita"/>, but suppose that you want to create a special page for
      the TOC:</p>
    <codeblock outputclass="language-css">@page toc {
  @top-center {
    content: "Table of Contents";
  }
  @bottom-center {
    content: counter(page, lower-roman);
  }
}</codeblock>
    <p>This page places the "Table of Contents" text in the header of the page hosting the TOC and
      puts the number of the TOC page in the footer, with lower roman digits. </p>
    <p>The following example associates the defined page to the <xmlelement>ul</xmlelement> element
      that gives the structure:</p>
    <codeblock outputclass="language-css">ul.toc {
  page: toc;
}</codeblock>
    <p>To style the TOC entries, this next snippet removes the bullet decoration from the
        <xmlelement>li</xmlelement> elements, then marks the <xmlelement>a</xmlelement> element as
      being a link (the name for each TOC entry is defined inside an <xmlelement>a</xmlelement>
      element). </p>
    <codeblock outputclass="language-css">ul.toc li {
    list-style-type:none;    
}
ul.toc a {
    display: block; /* Only necessary when using a leader */
    link: attr(href);
    text-decoration:none;
}</codeblock>
    <note>When using a <i>leader</i>, the alignment for each TOC entry is normally <i>justified</i>.
      The <codeph>display: block</codeph> property is used to treat the contents of the &lt;a>
      element as a separate block with a different alignment (i.e. <i>Align Left</i>).</note>
    <p>After the name for each TOC entry (the content defined inside the <xmlelement>a</xmlelement>
      elements), a <term>leader</term> is used to expand to the available width. You can specify a
      character pattern for the leader:<ul id="ul_uwc_sgn_vz">
        <li><b>dotted</b> - Creates an area filled with dots.</li>
        <li><b>solid</b> - Creates an area filled with a dash.</li>
        <li><b>space</b> - Creates an area filled with spaces.</li>
      </ul></p>
    <p>Also, it uses the page number of the target element (after the <term>leader</term>):</p>
    <codeblock outputclass="language-css">ul.toc a:after{
    color:blue;
    content: leader(".") target-counter(attr(href), page);
    link: attr(href);
}</codeblock>
  </body>
</topic>
