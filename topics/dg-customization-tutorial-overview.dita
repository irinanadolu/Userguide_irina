<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd">
<topic id="dg-customization-tutorial-overview">
  <title>Framework Customization Overview</title>
  <body>
    <p>The most important elements of a document type customization are represented by an XML Schema
      to define the XML structure, the CSS to render the information and the XML instance template
      that links the first two together.</p>
    <section id="xml_schema">
      <title>XML Grammar</title>
      <p>To provide as-you-type validation and to compute valid insertion proposals, <ph
          keyref="product"/> needs an XML grammar (XML Schema, DTD, or Relax NG) associated to the
        XML. The grammar specifies how the internal structure of the XML is defined. For information
        about associating a schema and how <ph keyref="product"/> detects the schema, see <xref
          href="associate-schema-to-document.dita#associate-schema-to-document"/>.</p>
      <p>Consider a use-case where several users are testing a system and must send report
        results to a content management system. The customization should provide a visual editor for
        this type of document. The following XML Schema, <filepath>test_report.xsd</filepath>
        defines a report with results of a testing session. The report consists of a title, few
        lines describing the test suite that was run, and a list of test results (each with a name
        and a boolean value indicating if the test passed or failed).
        <codeblock outputclass="language-xml">    
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xs:element name="report"&gt;
        &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
                &lt;xs:element ref="title"/&gt;
                &lt;xs:element ref="description"/&gt;
                &lt;xs:element ref="results"/&gt;
            &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
    &lt;/xs:element&gt;
    &lt;xs:element name="title" type="xs:string"/&gt;
    &lt;xs:element name="description"&gt;
        &lt;xs:complexType&gt;
            &lt;xs:sequence maxOccurs="unbounded"&gt;
                &lt;xs:element name="line"&gt;
                    &lt;xs:complexType mixed="true"&gt;
                        &lt;xs:sequence minOccurs="0" 
                            maxOccurs="unbounded"&gt;
                            &lt;xs:element name="important" 
                              type="xs:string"/&gt;
                        &lt;/xs:sequence&gt;
                    &lt;/xs:complexType&gt;
                &lt;/xs:element&gt;                
            &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
    &lt;/xs:element&gt;
    
    &lt;xs:element name="results"&gt;
        &lt;xs:complexType&gt;
            &lt;xs:sequence maxOccurs="unbounded"&gt;
                &lt;xs:element name="entry"&gt;
                    &lt;xs:complexType&gt;
                        &lt;xs:sequence&gt;
                            &lt;xs:element name="test_name" 
                              type="xs:string"/&gt;
                            &lt;xs:element name="passed" 
                               type="xs:boolean"/&gt;
                        &lt;/xs:sequence&gt;
                    &lt;/xs:complexType&gt;
                &lt;/xs:element&gt;
            &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
    &lt;/xs:element&gt;
&lt;/xs:schema&gt;</codeblock></p>
    </section>
    <section id="css_stylesheet">
      <title>CSS Stylesheet</title>
      <p>A set of rules must be defined for describing how the XML document is to be rendered in
          <uicontrol>Author</uicontrol> mode. This is done using Cascading Style Sheets (CSS). CSS
        is a language used to describe how an HTML or XML document should be formatted by a browser.
        CSS is widely used in the majority of websites.</p>
      <p>The elements from an XML document are displayed in the layout as a series of boxes. Some of
        the boxes contain text and may flow one after the other, from left to right. These are
        called inline boxes. There are also other types of boxes that flow one below the other (such
        as paragraphs). These are called block boxes.</p>
      <p>For example, consider the way a traditional text editor arranges the text. A paragraph is a
        block, because it contains a vertical list of lines. The lines are also blocks. However,
        blocks that contain inline boxes arrange its children in a horizontal flow. That is why the
        paragraph lines are also blocks, while the traditional "bold" and "italic" sections are
        represented as inline boxes.</p>
      <p>The CSS allows us to specify that some elements are displayed as tables. In CSS, a table is
        a complex structure and consists of rows and cells. The <codeph>table</codeph> element must
        have children that have a <i>table-row</i> style. Similarly, the <codeph>row</codeph>
        elements must contain elements with a <i>table-cell</i> style.</p>
      <p>To make it easy to understand, the following section describes how each element from a
        schema is formatted using a CSS file. Note that this is just one of infinite possibilities
        for formatting the content.</p>
      <p>
        <dl>
          <dlentry>
            <dt>report</dt>
            <dd>The root of a report document. It should be rendered as a box that contains all
              other elements. To achieve this, the display type is set to <b>block</b>.
              Additionally, some margins are set for it. The CSS rule that matches this element
              is:<codeblock outputclass="language-css">report{
    display:block;
    margin:1em;
}</codeblock></dd>
          </dlentry>
          <dlentry>
            <dt>title</dt>
            <dd>The title of the report. Usually titles have a large font. The <b>block</b> display
              is used so that the subsequent elements will be placed below it, and its font is
              changed to double the size of the normal text.
              <codeblock outputclass="language-css">title {
    display:block;
    font-size:2em;    
}</codeblock></dd>
          </dlentry>
          <dlentry>
            <dt>description</dt>
            <dd>Contains several lines of text describing the report. The lines of text are
              displayed one below the other, so the description has the <b>block</b> display. Also,
              the background color is changed to make it standout.
              <codeblock outputclass="language-css">description {
    display:block;
    background-color:#EEEEFF;
    color:black;
}</codeblock></dd>
          </dlentry>
          <dlentry>
            <dt>line</dt>
            <dd>A line of text in the description. A specific aspect is not defined and it just
              indicates that the display should be <b>block</b> style.
              <codeblock outputclass="language-css">line {
    display:block;
}</codeblock></dd>
          </dlentry>
          <dlentry>
            <dt>important</dt>
            <dd>Defines important text from the description. Since it can be mixed with text, its
              display property must be set to <b>inline</b>. Also, the text is emphasized with
                <b>bold</b>to make it easier to spot.
              <codeblock outputclass="language-css">important {
    display:inline;
    font-weight:bold;
}</codeblock></dd>
          </dlentry>
          <dlentry>
            <dt>results</dt>
            <dd>Displays the list of <term>test_names</term> and the results for each one. To make
              it easier to read, it is displayed as a <b>table</b>, with a green border and margins.
              <codeblock outputclass="language-css">results{
    display:table;
    margin:2em;
    border:1px solid green;
}</codeblock></dd>
          </dlentry>
          <dlentry>
            <dt>entry</dt>
            <dd> The results are displayed as a table so the entry is a row in the table. Thus, the
              display is <b>table-row</b>.
              <codeblock outputclass="language-css">entry {
    display:table-row;
}</codeblock></dd>
          </dlentry>
          <dlentry>
            <dt>test_name, passed</dt>
            <dd>The name of the individual test, and its result. They are cells in the results table
              with the display set to <b>table-cell</b>. Padding and a border are added to emphasize
              the table grid.
              <codeblock outputclass="language-css">
test_name, passed{
    display:table-cell;
    border:1px solid green;
    padding:20px;
}

passed{
    font-weight:bold;
}</codeblock></dd>
          </dlentry>
        </dl>
      </p>
      <p>The full content of the CSS file <filepath>test_report.css</filepath> is:
        <codeblock outputclass="language-css">
report {
    display:block;
    margin:1em;
}

description {
    display:block;
    background-color:#EEEEFF;
    color:black;
}

line {
    display:block;
}

important {
    display:inline;
    font-weight:bold;
}

title {
    display:block;
    font-size:2em;    
}

results{
    display:table;
    margin:2em;       
    border:1px solid green;
}

entry {
    display:table-row;
}

test_name, passed{
    display:table-cell;
    border:1px solid green;
    padding:20px;
}

passed{
    font-weight:bold;
}                        </codeblock></p>
      <p>
        <fig>
          <title>Report Rendered in <uicontrol>Author</uicontrol> Mode</title>
          <image href="../img/dg_sample_reports.png"/>
        </fig>
      </p>
      <p>
        <note>You can edit attributes in-place in the <uicontrol>Author</uicontrol> mode using <xref
            href="editing-attributes-author-mode.dita">form-based controls</xref>.</note>
      </p>
    </section>
    <section id="xml_instance_template">
      <title>XML Instance Template</title>
      <p>Based on the XML Schema and CSS file <ph keyref="product"/> can help the content author in
        loading, editing, and validating the test reports. An XML document template must be created
        as a kind of skeleton that the users can use as a starting point for creating new test
        reports. The template must be generic enough and reference the XML Schema file and the CSS
        stylesheet.</p>
      <p>This is an
        example:<codeblock outputclass="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-stylesheet type="text/css" href="test_report.css"?&gt;
&lt;report xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:noNamespaceSchemaLocation="test_report.xsd"&gt;
  &lt;title&gt;Automated test report&lt;/title&gt;
  &lt;description&gt;
    &lt;line&gt;This is the report of the test automatically ran.
      Each test suite is ran at 20:00h each day.
      Please &lt;important&gt;check&lt;/important&gt; the failed ones!&lt;/line&gt;
  &lt;/description&gt;
  &lt;results&gt;
    &lt;entry&gt;
      &lt;test_name&gt;Database connection test&lt;/test_name&gt;
      &lt;passed&gt;true&lt;/passed&gt;
    &lt;/entry&gt;
    &lt;entry&gt;
      &lt;test_name&gt;XSLT Transformation test&lt;/test_name&gt;
      &lt;passed&gt;true&lt;/passed&gt;
    &lt;/entry&gt;
    &lt;entry&gt;
      &lt;test_name&gt;DTD validation test&lt;/test_name&gt;
      &lt;passed&gt;false&lt;/passed&gt;
    &lt;/entry&gt;
  &lt;/results&gt;
&lt;/report&gt;
</codeblock></p>
      <p>The processing instruction <codeph>xml-stylesheet</codeph> associates the CSS stylesheet to
        the XML file. The <codeph>href</codeph> pseudo attribute contains the URI reference to the
        stylesheet file. In the example, the CSS is in the same directory as the XML file.</p>
      <p>The next step is to place the XSD file and the CSS file on a web server and modify the
        template to use the HTTP URLs, like
        this:<codeblock outputclass="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-stylesheet type="text/css" 
        href="http://www.mysite.com/reports/test_report.css"?&gt;
&lt;report xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:noNamespaceSchemaLocation=
        "http://www.mysite.com/reports/test_report.xsd"&gt;
    &lt;title&gt;Test report title&lt;/title&gt;
    &lt;description&gt;
.......</codeblock></p>
      <p>If you want to share the files with other team members, you could create an archive
        containing the <i><filepath>test_report.xml</filepath></i>,
            <i><filepath>test_report.css</filepath></i>, and
          <i><filepath>test_report.xsd</filepath></i> and send it to the other users.</p>
    </section>
  </body>
</topic>
