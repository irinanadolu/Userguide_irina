<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task
  PUBLIC "-//OASIS//DTD DITA Task//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/task.dtd">
<task id="import-https-server-certificate">
  <title>Troubleshooting HTTPS</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>HTTPS troubleshooting</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <taskbody>
    <context>
      <p>When <ph keyref="product"/> cannot connect to an HTTPS-capable server, most likely there is
        no certificate set in the <i>Java Runtime Environment (JRE)</i> that <ph keyref="product"/>
        runs into. The following procedure describes how to:<ul id="ul_4r3_mhr_kf">
          <li>Export a certificate to a local file using any HTTPS-capable Web browser (for example,
            Internet Explorer).</li>
          <li>Import the certificate file into the JRE using the <term>keytool</term> that comes
            bundled with <ph keyref="product"/>.</li>
        </ul><note type="tip">To make <ph keyref="product"/> accept a certificate even if it is
          invalid, <ph conkeyref="reusables-preferences-pages/open-the-preferences-page"/>, go to
            <menucascade product="author developer editor">
            <uicontrol>Connection settings</uicontrol>
            <uicontrol>HTTP(S)/WebDAV</uicontrol>
          </menucascade><menucascade product="authorEclipse developerEclipse editorEclipse">
            <uicontrol>Network Connection settings</uicontrol>
            <uicontrol>HTTP(S)/WebDAV</uicontrol>
          </menucascade>, and select the <uicontrol>Automatically accept a security certificate,
            even if invalid</uicontrol> option.</note><note type="notice"
          product="authorEclipse developerEclipse editorEclipse">This <uicontrol>Automatically
            accept a security certificate, even if invalid</uicontrol> option does not influence the
          entire Eclipse workspace. It is limited to URLs that are opened directly by <ph
            keyref="product"/>.</note></p>
    </context>
    <steps>
      <step>
        <cmd>Export the certificate into a local file</cmd>
        <substeps>
          <substep>
            <cmd>Point your HTTPS-aware Web browser to the repository URL. </cmd>
            <stepresult>
              <p>If this is your first visit to the repository, it will display a security alert
                stating that the security certificate presented by the server is not trusted.</p>
              <p>
                <fig>
                  <title>Security alert - untrusted certificate</title>
                  <image href="../img/sa_security_alert.png"/>
                </fig>
              </p>
            </stepresult>
          </substep>
          <substep>
            <cmd>Go to <menucascade>
                <uicontrol>Tools</uicontrol>
                <uicontrol>Internet Options</uicontrol>
              </menucascade>.</cmd>
            <stepresult>The <uicontrol>Internet Options</uicontrol> dialog box is
              opened.</stepresult>
          </substep>
          <substep>
            <cmd>Select the <uicontrol>Security</uicontrol> tab.</cmd>
          </substep>
          <substep>
            <cmd>Select the <uicontrol>Trusted sites</uicontrol> icon.</cmd>
          </substep>
          <substep>
            <cmd>Click the <uicontrol>Sites</uicontrol> button.</cmd>
            <stepresult>This will open the <uicontrol>Trusted sites</uicontrol> dialog
              box.</stepresult>
          </substep>
          <substep>
            <cmd>Add the repository URL to the <uicontrol>Websites</uicontrol> list.</cmd>
          </substep>
          <substep>
            <cmd>Close the <uicontrol>Trusted sites</uicontrol> and <uicontrol>Internet
                Options</uicontrol> dialog boxes.</cmd>
          </substep>
          <substep>
            <cmd>Try again to connect to the same repository URL in Internet Explorer.</cmd>
            <stepresult>The same error page as above will be displayed.</stepresult>
          </substep>
          <substep>
            <cmd>Select the <uicontrol>Continue to this website</uicontrol> option.</cmd>
            <stepresult>A clickable area with a red icon and the text <uicontrol>Certificate
                Error</uicontrol> is added to the Internet Explorer address bar.</stepresult>
          </substep>
          <substep>
            <cmd>Click the <uicontrol>Certificate Error</uicontrol> area.</cmd>
            <stepresult>A dialog box that contains a <uicontrol>View certificates</uicontrol> link
              is displayed.</stepresult>
          </substep>
          <substep>
            <cmd>Click the <uicontrol>View certificates</uicontrol> link.</cmd>
            <stepresult><uicontrol>Certificate</uicontrol> dialog box is displayed.</stepresult>
          </substep>
          <substep>
            <cmd>Select the <uicontrol>Details</uicontrol> tab of the
                <uicontrol>Certificate</uicontrol> dialog box.</cmd>
          </substep>
          <substep>
            <cmd>Click the <uicontrol>Copy to File</uicontrol> button.</cmd>
            <stepresult>The <uicontrol>Certificate Export Wizard</uicontrol> is
              started.</stepresult>
          </substep>
          <substep>
            <cmd>Follow indications of the wizard for the DER encoded binary X.509 certificate. Save
              the certificate to the local file <filepath>server.cer</filepath>.</cmd>
          </substep>
        </substeps>
      </step>
      <step>
        <cmd>Import the local file into the JRE running <ph keyref="product"/>.</cmd>
        <substeps>
          <substep>
            <cmd>Open a text-mode console with administrative rights.</cmd>
            <info>If <ph keyref="product"/> has been installed in a user's home directory and
              includes a bundled JRE, administrative rights are not required. In all other cases,
              administrative rights will be required.</info>
          </substep>
          <substep>
            <cmd>Go to the <filepath>lib/security</filepath> directory of the JRE running <ph
                keyref="product"/>. You can find the home directory of the JRE in the
                <i>java.home</i> property that is displayed in the <uicontrol>About</uicontrol>
              dialog box (<ph product="author developer editor"><uicontrol>System
                  properties</uicontrol> tab</ph><menucascade
                product="authorEclipse developerEclipse editorEclipse">
                <uicontrol>Installation Details</uicontrol>
                <uicontrol>Configuration</uicontrol>
              </menucascade>).</cmd>
            <info>On OS X, for the distribution of <ph keyref="product"/> that bundles the JRE from
              Oracle, the JRE uses the
                <filepath>.install4j/jre.bundle/Contents/Home/jre/lib/security/cacerts</filepath>
              path within its installation directory.</info>
          </substep>
          <substep>
            <cmd>Run the following command:</cmd>
            <info><codeblock outputclass="language-ini">..\..\bin\keytool -import -trustcacerts -file server.cer -keystore cacerts</codeblock>The
                <filepath>server.cer</filepath> file contains the server certificate, created during
              the previous step. The <term>keytool</term> requires a password before adding the
              certificate to the JRE <xref keyref="glossentry_keystore"
              ><term>keystore</term></xref>. The default password is
              <userinput>changeit</userinput>. If someone changed the default password, then that
              person is the only one who can perform the import.<note type="tip">If you need to
                import multiple certificates, you need to specify a different alias for each
                additional imported certificate with the <codeph>-alias</codeph> command-line
                argument, as in the following example:<p>
                  <codeblock outputclass="language-ini">..\..\bin\keytool -import -alias myalias1 -trustcacerts -file 
server1.cer -keystore cacerts
 
..\..\bin\keytool -import -alias myalias2 -trustcacerts -file 
server2.cer -keystore cacerts </codeblock>
                </p></note></info>
          </substep>
        </substeps>
      </step>
      <step>
        <cmd>Restart <ph keyref="product"/>. </cmd>
      </step>
    </steps>
  </taskbody>
  <related-links>
    <linklist><title>Related Information:</title><link href="https-webdav-preferences.dita#https-webdav-preferences"/></linklist>
  </related-links>
</task>
