<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="dcpp_parametrized_styling_how_to_change_the_headings_using_a_parameter">
  <title>How to Change the Headings Using a Parameter</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm product="author developer editor authorEclipse developerEclipse editorEclipse"
            ><ph keyref="pdf-html5-transformation"/>
          <indexterm>Header<indexterm>Changing the heading</indexterm></indexterm></indexterm>
        <indexterm product="pdf-css ope">Header<indexterm>Changing the
          heading</indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>Suppose you need to change the headings of your publication by specifying a static text in a
      parameter.</p>
    <p>First, establish a name for your parameter (it must start with the
        <codeph>args.css.param.</codeph> prefix). For example, you could name it
        <codeph>args.css.param.heading.text</codeph>. It will have the text value that you will pass
      when starting the transformation. This parameter does not have to be registered anywhere as it
      will be automatically recognized and passed as an XML attribute on the root of the merged
      file, as specified in <xref href="dcpp_parametrized_styling.dita"/>.</p>
    <p>Next, alter your customization CSS to make use of the parameter value. In the example below,
      the text is placed in the central part of the header:</p>
    <codeblock outputclass="language-css">@page front-page, table-of-contents, chapter {
    @top-center{
        content: oxy_xpath("/*/@heading.text");
    }    
}</codeblock>
    <note>You can use any XPath 2.0 here. It will be executed in the context of the merged map
      document, so you can collect data from it. You can use <i>if/then/else</i> expressions if your
      parameter is a switch.</note>
    <p>The text does not affect the first pages from the page sequences because <xref
        href="dcpp_default_page_definitions_css.dita">the built-in CSS page rules </xref> clear the
      content from the headers. If you need the text content on all pages, you might consider adding
      an <codeph>!important</codeph> keyword after the <codeph>content</codeph> property value, or
      increase the specificity of the page selectors, like this:</p>
    <codeblock outputclass="language-css">@page front-page, 
      table-of-contents, 
      table-of-contents:first:left, 
      table-of-contents:first:right, 
      chapter:first:left, 
      chapter:first:right{
    @top-center{
        ...
    }    
}</codeblock>
    <p>Another use case is to alter the string-sets that are used in the headers (not the headers
      directly), as it is explained here: <xref
        href="dcpp_how_to_use_in_headers_text_extracted_from_the_document__xpath.dita"/>. You can
      use this technique to alter the chapter titles as in the following example:</p>
    <codeblock outputclass="language-css">*[class ~= "map/map"][numbering^='deep'] 
   *[class ~= "topic/topic"][is-chapter]:not([is-part]) > 
        *[class ~= "topic/title"] {
    string-set: 
            chaptertitle " | " counters(chapter-and-sections, "." ) " - " oxy_xpath("/*/@heading.text") content(), 
            sectiontitle "";
}</codeblock>
    <note>This is a rule copied from <filepath>p-numbering-deep.css</filepath> and it may change if
      future versions.</note>
  </body>
</topic>
