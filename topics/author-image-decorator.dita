<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="urn:oasis:names:tc:dita:rng:topic.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<topic id="author-image-decorator">
  <title>Adding a Custom Image Decorator for Author Mode</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Framework customization<indexterm>Extensions<indexterm>Author Image
              Decorator</indexterm></indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>The <i>AuthorImageDecorator</i> extension point allows you to add a custom decorator over
      images in <uicontrol>Author</uicontrol> mode. For example, you could use it to add a message
      over an image informing the user that they can double-click the image to edit it.</p>
    <section id="implement_an_editpropertieshandler">
      <title>How to Implement an <i>AuthorImageDecorator</i></title>
      <p>To implement your own <i>AuthorImageDecorator</i>, follow this procedure:<ol>
          <li>Implement the <xref
              href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorImageDecorator.html"
              format="html" scope="external"
              ><i>ro.sync.ecss.extensions.api.AuthorImageDecorator</i></xref> interface.</li>
          <li>To instruct <ph keyref="product"/> to use this newly created implementation, use
            either of the following methods:<ol>
              <li>If you have <xref href="dg-extensions-bundle.dita#dg-extensions-bundle">configured
                  an extensions bundle</xref>, you can return the <i>AuthorImageDecorator</i>
                implementation using the
                  <i>ro.sync.ecss.extensions.api.ExtensionsBundle.getAuthorImageDecorator()</i>
                method.</li>
              <li>Specify the <i>AuthorImageDecorator</i> in the <uicontrol>Author image
                  decorator</uicontrol> individual extension in the <xref
                  href="document-type-extensions-tab.dita#document-type-extensions-tab"
                    ><uicontrol>Extensions</uicontrol> tab</xref> of the <xref
                  href="the-document-type-dialog.dita#the-document-type-dialog"><uicontrol>Document
                    Type</uicontrol> configuration dialog box</xref> for your particular document
                type.</li>
            </ol></li>
        </ol></p>
    </section>
    <section id="example">
      <title>Example</title>
      <p>The following example illustrates an implementation for presenting a simple message over an
        image that informs the user that they can double-click the image to edit it:</p>
      <codeblock outputclass="language-java">/**
 * Custom Author image decorator for drawing string over images.
 */
public class CustomAuthorImageDecorator extends AuthorImageDecorator {

  /**
   * @see ro.sync.ecss.extensions.api.AuthorImageDecorator#paint
(ro.sync.exml.view.graphics.Graphics, int, int, int, int,
 ro.sync.exml.view.graphics.Rectangle,
 ro.sync.ecss.extensions.api.node.AuthorNode,
 ro.sync.ecss.extensions.api.AuthorAccess, boolean)
   */
  @Override
  public void paint(Graphics g, int x, int y, int imageWidth, int imageHeight,
      Rectangle originalSize, AuthorNode element,
 AuthorAccess authorAccess, boolean wasAnnotated) {
    if ("image".equals(CommonsOperationsUtil.getLocalName(element.getName()))) {
      g.drawString(
          "[Double-click to edit image]",
          // Draw near the top-left corner
          x + 15,
          y + 15);
    }
  }</codeblock>
      <p><b>Example result:</b> In the top-left corner of the image, the following message will be
        displayed: <codeph>[Double-click to edit image]</codeph>.</p>
    </section>
  </body>
</topic>
