<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="scripting_oxygen_dita_translation_package_builder">
  <title>DITA Translation Package Builder</title>
  <body>
    <note conkeyref="reusables-scripting/note-scripting-license"/>
    <p>The <uicontrol>DITA Translation Package Builder</uicontrol> script helps you to build a
      translation package for DITA files that can be sent to translators. You can also extract the
      changed files back into your project once you receive the package back from the
      translators.</p>
    <p>This script requires the <uicontrol>DITA Translation Package Builder</uicontrol> add-on to be
      installed in the <xref
        href="https://www.oxygenxml.com/xml_editor/download_oxygenxml_editor.html?os=Other"
        format="html" scope="external">all platforms distribution</xref> of <ph keyref="product"/>.
      To install it the add-on, follow these instructions:<ol id="ol_nn2_2vb_vmb">
        <li>Go on the <uicontrol>DITA Translation Package Builder</uicontrol> plugin
            <uicontrol>Releases</uicontrol> page and download the latest <xref
            href="https://github.com/oxygenxml/oxygen-dita-translation-package-builder/releases/latest"
            format="html" scope="external">translation-package-builder-{version}-plugin.jar</xref>
          package.</li>
        <li>Unzip it inside <filepath>{oxygenInstallDir}/plugins</filepath>.<note>Do not create any
            intermediate folders. Afterwards, the file system should look like this:
              <filepath>{oxygenInstallDir}/plugins/translation-package-builder-{version}/plugin.xml</filepath></note></li>
      </ol></p>
    <section id="section_gbd_tzb_vmb">
      <title>Examples for the DITA Translation Package Builder Script</title>
      <p><b><u>Example: Generating a Milestone
        File</u></b><codeblock outputclass="language-bourne">sh scripts/translationPackageBuilder.sh -gm -i ditamapFile [-m milestoneFile] [-verbose]</codeblock></p>
      <p>This action is the first one to use. It will generate an unique hash for each documentation
        resource. This information will be used by the second action to detect which files have been
        modified. A milestone file should be generated the first time you install this plugin and
        henceforth, after each package is sent to translators.</p>
      <p>
        <dl>
          <dlentry>
            <dt>-gm</dt>
            <dd>Requests the generation of a milestone file.</dd>
          </dlentry>
          <dlentry>
            <dt>-i ditamapFile</dt>
            <dd>The main DITA map file.</dd>
          </dlentry>
          <dlentry>
            <dt>-m milestoneFile</dt>
            <dd>The path to the milestone file. If missing, it is assumed that the milestone will be
              saved in the DITA map parent folder with the following name:
                <filepath>{ditamapName}_translation_milestone.xml</filepath>.</dd>
          </dlentry>
          <dlentry>
            <dt>-verbose</dt>
            <dd>Generates a console log about the performed steps. It is useful for debugging.</dd>
          </dlentry>
        </dl>
      </p>
      <p><b><u>Example: Creating a Package with the Modified Files to Send to
        Translation</u></b><codeblock outputclass="language-bourne">sh scripts/translationPackageBuilder.sh  -gp -i ditamapFile [-m milestoneFile] -p package.zip [-verbose]</codeblock></p>
      <p>This action detects which files have been changed since the last generated milestone. These
        files are packed inside a ZIP file that can be sent to translators. After doing this, you
        can also generate a new milestone so that the next package will only contain new
        changes.</p>
      <p>
        <dl>
          <dlentry>
            <dt>-gp</dt>
            <dd>Requests the generation of a package with the modified files.</dd>
          </dlentry>
          <dlentry>
            <dt>-i ditamapFile</dt>
            <dd>The main DITA map file.</dd>
          </dlentry>
          <dlentry>
            <dt>-m milestoneFile</dt>
            <dd>The path to the milestone file. If missing, it is assumed that the milestone will be
              located in the DITA map parent folder with the following name:
                <filepath>{ditamapName}_translation_milestone.xml</filepath>.</dd>
          </dlentry>
          <dlentry>
            <dt>-p package.zip</dt>
            <dd>The path to the zip archive where all the modified files are collected.</dd>
          </dlentry>
          <dlentry>
            <dt>-verbose</dt>
            <dd>Generates a console log about the performed steps. It is useful for debugging.</dd>
          </dlentry>
        </dl>
      </p>
      <p><b><u>Example: Applying a Translation Package Over a DITA
        Map</u></b><codeblock outputclass="language-bourne">sh scripts/translationPackageBuilder.sh -ap -i ditamapFile -p package.zip [-verbose]</codeblock></p>
      <p>When the translated files arrive from the translator, you should open the DITA map that
        corresponds to the received language (e.g. open
          <uicontrol>dita-map-french.ditamap</uicontrol> if the package contains the french
        translation). Invoking this action will extract the changed files inside the map's
        directory.</p>
      <p>
        <dl>
          <dlentry>
            <dt>-ap</dt>
            <dd>Requests the application of a translation package over a DITA map.</dd>
          </dlentry>
          <dlentry>
            <dt>-i ditamapFile</dt>
            <dd>The main DITA map file that matches the received package language. For example, if
              the package contains topics translated into French, then this map is the French
              version of your DITA map.</dd>
          </dlentry>
          <dlentry>
            <dt>-p package.zip</dt>
            <dd>The path to the archive with all the translated files.</dd>
          </dlentry>
          <dlentry>
            <dt>-verbose</dt>
            <dd>Generates a console log about the performed steps. It is useful for debugging.</dd>
          </dlentry>
        </dl>
      </p>
    </section>
  </body>
</topic>
