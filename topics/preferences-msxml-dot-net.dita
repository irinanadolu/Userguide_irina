<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd">
<topic id="preferences-msxml-dot-net">
  <title>MSXML.NET Preferences (Deprecated)</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Preferences<indexterm>MSXML.NET XSLT</indexterm></indexterm>
        <indexterm>MSXML.NET preferences</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>To configure the <uicontrol>MSXML.NET</uicontrol> options, <ph
        conkeyref="reusables-preferences-pages/open-the-preferences-page"/> and go to <menucascade>
        <uicontrol>XML</uicontrol>
        <uicontrol>XSLT-XQuery</uicontrol>
        <uicontrol>XSLT</uicontrol>
        <uicontrol>MSXML.NET (Deprecated)</uicontrol>
      </menucascade>.</p>
    <p>The options in this preferences page for the MSXML.NET processor are as follows:<dl>
        <dlentry>
          <dt><uicontrol>Enable XInclude processing</uicontrol></dt>
          <dd>If selected, XInclude references will be resolved when MSXML.NET is used as the
            transformer in the <xref href="transformation-scenario.dita">XSLT transformation
              scenario</xref>.</dd>
        </dlentry>
        <dlentry conkeyref="reusables-preferences-pages/validate-during-parse">
          <dt/>
          <dd/>
        </dlentry>
        <dlentry conkeyref="reusables-preferences-pages/do-not-resolve-ext-defs">
          <dt/>
          <dd/>
        </dlentry>
        <dlentry conkeyref="reusables-preferences-pages/strip-whitespace">
          <dt/>
          <dd/>
        </dlentry>
        <dlentry conkeyref="reusables-preferences-pages/show-time-information">
          <dt/>
          <dd/>
        </dlentry>
        <dlentry>
          <dt><uicontrol>Forces ASCII output encoding</uicontrol></dt>
          <dd>There is a known problem with the .NET 1.X XSLT processor
              (<i>System.Xml.Xsl.XslTransform</i> class). It does not support escaping of characters
            as XML character references when they cannot be represented in the output encoding. This
            means that it will be outputted as <codeph>'?'</codeph>. Usually this happens when
            output encoding is set to ASCII. If this option is selected, the output is forced to be
            ASCII encoded and all non-ASCII characters get escaped as XML character references
              (<codeph>&amp;#nnnn;</codeph> form).</dd>
        </dlentry>
        <dlentry>
          <dt><uicontrol>Allow multiple output documents</uicontrol></dt>
          <dd>This option allows you to create multiple result documents using the <xref
              href="http://exslt.org/exsl/elements/document/index.html" scope="external"
              format="html"><i>exsl:document</i> extension element</xref>.</dd>
        </dlentry>
        <dlentry id="use-named-uri">
          <dt><uicontrol>Use named URI resolver class</uicontrol></dt>
          <dd>This option allows you to specify a custom URI resolver class to resolve URI
            references in <xmlelement>xsl:import</xmlelement> and <xmlelement>xsl:include</xmlelement> instructions
            (during XSLT stylesheet loading phase) and in <codeph>document()</codeph> functions
            (during XSL transformation phase).</dd>
        </dlentry>
        <dlentry>
          <dt><uicontrol>Assembly file name for URI resolver class</uicontrol></dt>
          <dd>This option specifies a file name of the assembly where the specified resolver class
            can be found. The <xref href="#preferences-msxml-dot-net/use-named-uri" format="dita"
                ><uicontrol>Use named URI resolver class</uicontrol> option</xref> specifies a
            partially or fully qualified URI resolver class name (for example,
              <i>Acme.Resolvers.CacheResolver</i>). Such a name requires additional assembly
            specification using this option or the <xref
              href="#preferences-msxml-dot-net/assembly-gac-name" format="dita"><uicontrol>Assembly
                GAC name for URI resolver class</uicontrol> option</xref>, but fully qualified class
            name (which always includes an assembly specifier) is <i>all-sufficient</i>. See MSDN
            for more info about <xref
              href="http://msdn.microsoft.com/en-us/library/dfb3cx8s%28v=vs.71%29.aspx"
              scope="external" format="html"> fully qualified class names</xref>.</dd>
        </dlentry>
        <dlentry id="assembly-gac-name">
          <dt><uicontrol>Assembly GAC name for URI resolver class</uicontrol></dt>
          <dd>This option specifies partially or fully qualified name of the assembly in the <xref
              href="http://msdn.microsoft.com/en-us/library/yf1d93sz.aspx" scope="external"
              format="html">global assembly cache</xref> (GAC) where the specified resolver class
            can be found. See MSDN for more info about <xref
              href="http://msdn.microsoft.com/en-us/library/0a7zy9z5%28v=vs.71%29.aspx"
              scope="external" format="html">partial assembly names</xref>.</dd>
        </dlentry>
        <dlentry>
          <dt><uicontrol>List of extension object class names</uicontrol></dt>
          <dd>This option allows to specify extension object classes, whose public methods
            then can be used as extension functions in an XSLT stylesheet. It is a comma-separated
            list of namespace-qualified extension object class names. Each class name must be bound
            to a namespace URI using prefixes, similar to providing XSLT parameters.</dd>
        </dlentry>
        <dlentry>
          <dt><uicontrol>Use specified EXSLT assembly</uicontrol></dt>
          <dd>MSXML.NET supports a rich library of the <xref href="http://www.exslt.org/"
              scope="external" format="html">EXSLT</xref> and <xref
              href="http://www.exslt.org/func/elements/function/" format="html" scope="external"
              >EXSLT.NET extension functions</xref> embedded or in a <term>plugin</term> EXSLT.NET
            library. EXSLT support is enabled by default and cannot be disabled in this version. Use
            this option if you want to use an external EXSLT.NET implementation instead of a
            built-in one.</dd>
        </dlentry>
        <dlentry>
          <dt><uicontrol>Credential loading source xml</uicontrol></dt>
          <dd>This option allows you to specify user credentials to be used when loading XML source
            documents. The credentials should be provided in the <i>username:password@domain</i>
            format (all parts are optional).</dd>
        </dlentry>
        <dlentry>
          <dt><uicontrol>Credential loading stylesheet</uicontrol></dt>
          <dd>This option allows you to specify user credentials to be used when loading XSLT
            stylesheet documents. The credentials should be provided in the
              <i>username:password@domain</i> format (all parts are optional).</dd>
        </dlentry>
      </dl></p>
  </body>
</topic>
