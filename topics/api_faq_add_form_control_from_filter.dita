<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="urn:oasis:names:tc:dita:rng:topic.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<topic id="api_faq_add_form_control_from_filter">
  <title>Dynamically Add Form Controls Using a Styles Filter</title>
  <body>
    <section id="question">
      <title>Question</title>
      <p>How do I add form controls using an API?</p>
    </section>
    <section id="answer">
      <title>Answer</title>
      <p>Usually, a form control is added from the CSS using one of the <xref
          href="form-controls.dita#form-controls">built-in form controls</xref>. However, in some
        cases you do not have all the information you need to properly initialize the form control
        at CSS level. In these cases you can add the form controls by using the API, more
        specifically <xref
          href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/StylesFilter.html"
          format="html" scope="external"><i> ro.sync.ecss.extensions.api.StylesFilter</i></xref>. </p>
      <p>For instance, if you want a combo box form control and the values to populate the combo are
        specified inside a file (or they come from a database). Here is how to add the form control
        from the API:</p>
      <codeblock outputclass="language-java">public class SDFStylesFilter implements StylesFilter {

 public Styles filter(Styles styles, AuthorNode authorNode) {
  if(authorNode.getType() == AuthorNode.NODE_TYPE_PSEUDO_ELEMENT 
      &amp;&amp; "before".equals(authorNode.getName())) {
    authorNode = authorNode.getParent();
   if ("country".equals(authorNode.getName())) {
    // This is the BEFORE pseudo element of the "country" element.
    // Read the supported countries from the configuration file.
    Map&lt;String, Object> formControlArgs = new HashMap&lt;String, Object>();
    formControlArgs.put(InplaceEditorArgumentKeys.PROPERTY_EDIT, "#text");
    formControlArgs.put(InplaceEditorArgumentKeys.PROPERTY_TYPE, 
          InplaceEditorArgumentKeys.TYPE_COMBOBOX);
    // This will be a comma separated enumeration: France, Spain, Great Britain
    String countries = readCountriesFromFile();
    formControlArgs.put(InplaceEditorArgumentKeys.PROPERTY_VALUES, countries);
    formControlArgs.put(InplaceEditorArgumentKeys.PROPERTY_EDITABLE, "false");

    // We also add a label in form of the form control.
    Map&lt;String, Object> labelProps = new HashMap&lt;String, Object>();
    labelProps.put("text", "Country: ");
    labelProps.put("styles", "* {width: 100px; color: gray;}");
    StaticContent[] mixedContent = new StaticContent[] 
           {new LabelContent(labelProps),new EditorContent(formControlArgs)};
    styles.setProperty(Styles.KEY_MIXED_CONTENT, mixedContent);
      }
    }
    
    // The added form control is the only way the element can be edited.
    if ("country".equals(authorNode.getName())) {
      styles.setProperty(Styles.KEY_VISIBITY, "-oxy-collapse-text");
    }

    return styles;
  }
}</codeblock>
      <p>If the execution of the
          <codeph>formControlArgs.put(InplaceEditorArgumentKeys.PROPERTY_VALUES,
          countries);</codeph> line consumes too much execution time (for example, if it connects to
        a database or if it needs to extract data from a very large file), you can choose to delay
        it until the values are actually needed by the form control. This approach is called
          <i>lazy evaluation</i> and can be implemented as
        follows:<codeblock outputclass="language-java">formControlArgs.put(InplaceEditorArgumentKeys.PROPERTY_VALUES, 
           new LazyValue&lt;List&lt;CIValue>>() {
  public java.util.List&lt;CIValue> get() {
    // We avoid reading the possible values until they are actually requested.
    // This will be a List with CIValues created over countries:
           France, Spain, Great Britain
    return readCountriesFromFile();
  }
});</codeblock></p>
      <p>The lazy evaluation approach can be used for the following form controls properties:<ul>
          <li><b>InplaceEditorArgumentKeys.PROPERTY_VALUES</b></li>
          <li><b>InplaceEditorArgumentKeys.PROPERTY_LABELS</b></li>
          <li><b>InplaceEditorArgumentKeys.PROPERTY_TOOLTIPS</b></li>
        </ul></p>
      <p>The full source code for this example is available inside the <xref
          href="https://www.oxygenxml.com/oxygen_sdk.html#XML_Editor_Authoring_SDK" format="html"
          scope="external">Oxygen SDK</xref>.</p>
    </section>
  </body>
</topic>
