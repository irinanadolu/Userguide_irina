<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="ch_layout_tables">
	<title>Tables</title>
	<prolog>
		<metadata>
			<keywords>
				<indexterm>Tables</indexterm>
			</keywords>
		</metadata>
	</prolog>
	<body>
		<p>This section is of special interest if you are creating a CSS stylesheet for a custom XML
			document. For HTML, <ph keyref="product"/> already defines the needed selectors for the
				<xmlelement>table</xmlelement> element.</p>
		<p>This is an example of a very simple table in an XML document:</p>
		<codeblock outputclass="language-xml">&lt;tbl&gt;
    &lt;caption&gt;A table.&lt;/caption&gt;
    &lt;rw&gt;
        &lt;c rspan="2"&gt; Spans vertically &lt;/c&gt;
        &lt;c&gt; Other cell &lt;/c&gt;
        &lt;c&gt; Other cell &lt;/c&gt;
    &lt;/rw&gt;
    &lt;rw&gt;
        &lt;c cspan="2"&gt; Other cell, spanning to the right &lt;/c&gt;
    &lt;/rw&gt;
&lt;/tbl&gt; </codeblock>
		<section id="section_lqt_v51_yz">
			<title>Defining Rows and Cells</title>
			<p>First, mark the <xmlelement>tbl</xmlelement> element as being a table:</p>
			<codeblock outputclass="language-css">tbl {
    display: table;
}</codeblock>
			<p>Next, the rows and cells:</p>
			<codeblock outputclass="language-css">rw {
    display: table-row;
}
c {
    display: table-cell;
}</codeblock>
		</section>
		<section id="section_hfr_pw1_yz">
			<title>Defining the Column and Row Span</title>
			<p>The processor needs to know how the cells span multiple rows or columns. For this, there are
        two properties available: <codeph>table-column-span</codeph> and
          <codeph>table-row-span</codeph>.</p>
			<codeblock outputclass="language-css">c[cspan] {
    table-column-span: attr(cspan, integer);
}
c[rspan] {
    table-row-span: attr(rspan, integer);
}</codeblock>
		</section>
		<section id="section_vjt_b3t_cbb">
			<title>Defining the Table Caption</title>
			<p>You can define table captions by using the <codeph>display:table-caption</codeph>. To change
        the position of the caption relative to the table grid, you need to use the
          <codeph>caption-side</codeph> property:</p>
			<codeblock outputclass="language-css">caption {
    display:table-caption;
    caption-side:bottom;
}</codeblock>
		</section>
		<section id="section_fpf_jx1_yz">
			<title>Repeating Headers and Footers</title>
			<p>Any element marked with either the <codeph>table-header-group</codeph> or
          <codeph>table-footer-group</codeph> property is automatically repeated when a table is
        split over a sequence of pages. It is required that they contain only elements with the
          <codeph>display</codeph> property set to <codeph>table-row</codeph>.</p>
			<codeblock outputclass="language-xml">&lt;tbl&gt;
    &lt;head&gt;
        &lt;rw&gt;
            &lt;c&gt; Name&lt;/c&gt;
            &lt;c&gt; Value &lt;/c&gt;
        &lt;/rw&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;rw&gt; ... &lt;/rw&gt;
        &lt;rw&gt; ... &lt;/rw&gt;
    &lt;/body&gt;
&lt;/tbl&gt; </codeblock>
			<p>The CSS:</p>
			<codeblock outputclass="language-css">head {
    display: table-header-group;
}
rw {
    display: table-row;
}</codeblock>
		</section>
        <section id="section_ggx_thv_2lb">
      <title>Repeating Captions</title>
      <p>By default, the captions are not repeated on all pages a table spans. To enable this, you
        should mark the elements with a table <codeph>caption</codeph> display as with the
          <codeph>-oxy-caption-repeat-on-next-pages</codeph> property:</p>
      <codeblock outputclass="language-css">caption {
    -oxy-caption-repeat-on-next-pages: yes;
}</codeblock>
      <p>The allowed values are <b>yes</b> or <b>no</b> and it is inheritable.</p>
      <p>If you want to indicate that the page is a continuation, you can associate a static text to
        the caption that appears only on subsequent pages. For example, you can use an
          <codeph>:after</codeph> element as in the following example:</p>
      <codeblock outputclass="language-css">caption:after(2) {
    display:inline;
    content: "(continued)";
    -oxy-show-only-when-caption-repeated-on-next-pages: yes;
}</codeblock>
      <p>This example uses an <codeph>:after</codeph> element with the value of <b>2</b> to avoid
        conflicts with normal <codeph>:after</codeph> static elements that you may already use in
        your CSS.</p>
    </section>
		<section id="section_sk5_1dl_zz">
			<title>Column Width and Styles</title>
			<p>
        <ph keyref="product"/> supports an automatic layout for tables. This means the allocation of
        column width is done automatically based on the content size. In the following example, the
        HTML table has an automatic layout (this is also the default):</p>
			<codeblock outputclass="language-css">table {
    table-layout:auto;
}</codeblock>
			<note type="tip">For large tables with long words that bleed out of the page, you can choose to
        hyphenate the words from the cells. If the table uses an automatic layout, you should
        specify a width (such as 100%). Otherwise, the table columns will just be wide enough to
        accommodate the smaller hyphenated
        words:<codeblock outputclass="language-css">table {
  table-layout:auto;
  width: 100%;
  hyphens:auto;
}</codeblock></note>
			<p>To switch to a fixed layout:</p>
			<codeblock outputclass="language-css">table {
    table-layout:fixed;
}</codeblock>
			<p>If you use the fixed layout and you are not satisfied with equal column widths, for HTML, you
        should use the <xmlatt>style</xmlatt> attribute on the <xmlelement>col</xmlelement>
        element:</p>
			<codeblock outputclass="language-xml"> &lt;table style="width:2in;"&gt;
        &lt;colgroup&gt;
              &lt;col style="width: 40%; background-color:cyan"/&gt;
              &lt;col style="width: 60%"/&gt;
        &lt;/colgroup&gt;
...</codeblock>
			<p>For arbitrary XML, you should use the <codeph>table-column</codeph> value in a
          <codeph>display</codeph> property for the element that represents the column. Suppose you
        have the following XML:</p>
			<codeblock outputclass="language-xml"> &lt;tbl&gt;
        &lt;colgr&gt;
              &lt;column wd="30%"/&gt;
              &lt;column wd="70%"/&gt;
        &lt;/colgr&gt;
...</codeblock>
			<p>The following CSS links the <xmlatt>wd</xmlatt> attribute to the width property and defines
				a different background for the first column.</p>
			<codeblock outputclass="language-css">tbl { 
    disply:table; 
}
colgr { 
    display: table-column-group; 
}
column { 
    display: table-column; 
    width: attr(wd); 
}
column:first-of-type {
    background-color: yellow;
}</codeblock>
			<p>Proportional column widths (such as the ones used in the CALS tables from DITA or DocBook) are
        supported, but only when they are set in a <xmlatt>width</xmlatt> attribute on the
          <xmlelement>column</xmlelement> element (the one with the <codeph>display</codeph>
        property set to <codeph>table-column</codeph>):</p>
			<codeblock outputclass="language-css">...
&lt;column width="3*"/&gt;
&lt;column width="7*"/&gt;
...</codeblock>
		</section>
		<section id="section_vlp_jjt_cbb">
			<title>Rotating Tables</title>
			<p>There are cases where you have large tables and you need to rotate them to make them fit on
        your page. For instance, the default page orientation is <i>portrait</i>, but if you have a
        wide table with lots of columns, it might bleed to the right of the page.</p>
			<p>There are two ways of solving this:<ul id="ol_gqs_tjt_cbb">
          <li>Associate a wider page (i.e. landscape) to the table that needs more space. The
            disadvantage is that the table will force a page break before and after
            it.<codeblock outputclass="language-css">@page landscape-page-for-large-tables {
    size: A4 landscape;
}

tbl {
  display: table;
  page: landscape-page-for-large-tables;
}</codeblock></li>
          <li>Rotate the table using the <codeph>transform</codeph> CSS property. The table will not
            create page breaks, but is susceptible to bleeding if its height exceeds the page
              width.<codeblock outputclass="language-css">tbl {
  display: table;
  width: 200pt;
  transform: rotate(90deg);
}</codeblock><note>The
              table needs to have <codeph>table-layout: fixed</codeph> and a
              <codeph>width</codeph>.</note></li>
        </ul></p>
			<p>The page is now landscape and you probably also need to change the headers and footers to
        match this new orientation. One way of doing this is to move the header content from the
          <codeph>@top-left</codeph>, <codeph>@top-center</codeph>, and <codeph>@top-right</codeph>
        rules into page margin boxes from the right, and apply a <codeph>transform</codeph> property
        on them.</p>
			<p>In the following example, there is static text in the top (header) for the normal pages that
        is either placed in the left or right side of the page, depending on the page
        position:<codeblock outputclass="language-css">@page :left {
  @top-left {
     content: string(maptitle) string(parttitle) string(chaptertitle) " | " counter(page);
     font-size:8pt;
  }
  @bottom-left {
      /**/
  }
  @bottom-right {
      /**/
  }
}

@page :right{
  @top-right {
     content: string(maptitle) string(parttitle) string(chaptertitle) " | " counter(page);
     font-size:8pt;
  }
  @bottom-right {
      /**/
  }
  @bottom-left {
      /**/
  }
}</codeblock></p>
			<p>For the landscape page, you can move content to either the <codeph>right-bottom</codeph> or
          <codeph>right-top</codeph>, depending on the page
        position:<codeblock outputclass="language-css"> /*
  * Table orientation.
  */
 @page table-landscape:right {
	size:landscape;

	@top-left{
		content:none;
	}
	@top-center{
		content:none;
	}
	@top-right{
		content:none;
	}
		
       @right-bottom{
    content: string(chaptertitle) " | " counter(page);
    font-size:8pt;
		transform:rotate(90);
		vertical-align: middle;
		text-align: right;
	}
 }
 @page table-landscape:left {
	size:landscape;
		
	@top-left{
		content:none;
	}
	@top-center{
		content:none;
	}
	@top-right{
		content:none;
	}
		
	@right-top{
    content: string(maptitle) string(parttitle) string(chaptertitle) " | " counter(page);
    font-size:8pt;
  	transform:rotate(90);
  	vertical-align: middle;
  	text-align: left;
       }
 }</codeblock></p>
		</section>
	</body>
</topic>
