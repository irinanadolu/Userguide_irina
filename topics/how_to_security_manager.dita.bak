<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="how_to_security_manager">
  <title>File Security</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>File permissions</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>By default, <ph keyref="webappProduct"/> comes with a file security mode. It is enabled by
      default when using the <b>Windows Installer</b>, <b>Linux Installer</b>, or <b>All Platforms
        Kit</b>. When enabled, it only allows the minimal file access permissions that are required
      for the application to function properly:<ul id="ul_rjs_5hd_cr">
        <li><i>READ</i> access to the directory where the <ph keyref="webappProduct"/> is
          deployed.</li>
        <li><i>READ</i> and <i>WRITE</i> access to the application's working directory.</li>
        <li><i>READ</i> and <i>WRITE</i> access to JVM's temporary directory.</li>
      </ul></p>
    <section id="disabling_security_mode">
      <title>Disabling Security Mode</title>
      <p>To disable the default security mode that only allows minimal file permissions, follow this
        procedure (depending on your installation method):</p>
      <p><u><i><b>Windows Installer</b></i></u><ol>
          <li>Go to the installation directory of <ph keyref="webappProduct"/>.</li>
          <li>Launch <uicontrol>Manage Web Author Service</uicontrol>.</li>
          <li>Go to the <uicontrol>Java</uicontrol> tab.</li>
          <li>In the <uicontrol>Java Options</uicontrol> section, remove the
              <codeph>-Djava.security.manager</codeph> system property.</li>
          <li>Click <uicontrol>Apply</uicontrol>.</li>
          <li><xref href="webauthor-restart.dita#webauthor-restart">Restart the
            application</xref>.</li>
        </ol></p>
      <p><u><i><b>Linux Installer or All Platforms Kit</b></i></u><ol>
          <li>Go to the installation directory of <ph keyref="webappProduct"/>.</li>
          <li>Edit the <filepath>oXygenXmlWebAuthor.vmoptions</filepath> file.</li>
          <li>Remove the <codeph>-Djava.security.manager</codeph> system property.</li>
          <li>Save the file.</li>
          <li><xref href="webauthor-restart.dita#webauthor-restart">Restart the
            application</xref>.</li>
        </ol></p>
    </section>
    <section id="enabling_security_mode">
      <title>Enabling Security Mode</title>
      <p>To enable security mode, use the following procedure (depending on your installation
        method):</p>
      <p><u><i><b>Windows Installer</b></i></u><ol>
          <li>Go to the installation directory of <ph keyref="webappProduct"/>.</li>
          <li>Launch <uicontrol>Manage Web Author Service</uicontrol>.</li>
          <li>Go to the <uicontrol>Java</uicontrol> tab.</li>
          <li>In the <uicontrol>Java Options</uicontrol> section, add the
              <codeph>-Djava.security.manager</codeph> system property.</li>
          <li>Click <uicontrol>Apply</uicontrol>.</li>
          <li><xref href="webauthor-restart.dita#webauthor-restart">Restart the
            application</xref>.</li>
        </ol></p>
      <p><u><i><b>Linux Installer or All Platforms Kit</b></i></u><ol>
          <li>Go to the installation directory of <ph keyref="webappProduct"/>.</li>
          <li>Edit the <filepath>oXygenXmlWebAuthor.vmoptions</filepath> file.</li>
          <li>Add the <codeph>-Djava.security.manager</codeph> property.</li>
          <li>Save the file.</li>
          <li><xref href="webauthor-restart.dita#webauthor-restart">Restart the
            application</xref>.</li>
        </ol></p>
      <p><u><i><b>WAR distribution</b></i></u> (when deployed on an Apache Tomcat server)<ol
          id="ul_ojh_g3d_cr">
          <li>Edit the <filepath>catalina.policy</filepath> file and add the following
              snippet:<codeblock outputclass="language-ini">grant codeBase "file:${catalina.base}/webapps/oxygenxml-web-author/-" {
  // Oxygen uses System properties for various configuration purposes.
  permission java.util.PropertyPermission "*", "read,write";
  // Oxygen custom protocols need access to network.
  permission java.net.NetPermission "*";
  permission java.net.SocketPermission "*", "accept,connect,listen,resolve";
  // The web framework used by Oxygen Webapp uses reflection and classloaders.
  permission java.lang.reflect.ReflectPermission "suppressAccessChecks";
  permission java.security.SecurityPermission "*";
  permission java.util.logging.LoggingPermission "control";
  permission java.lang.RuntimePermission "*";

  // Oxygen requires these permissions to connect to a URL.
  permission java.net.URLPermission "http:*", "*";
  permission java.net.URLPermission "https:*", "*";
  permission java.net.URLPermission "file:*", "*";

  // Oxygen should be allowed to read JVM jars
  permission java.io.FilePermission "${java.home}/-", "read";
	
  // Oxygen uses the JVM's java.io.tempdir for various file handling tasks.
  permission java.io.FilePermission "${java.io.tmpdir}/-", "read,write,delete";
  permission java.io.FilePermission "${java.io.tmpdir}", "read,write,delete";

  // Folder used by Oxygen to deploy the plugins to.
  permission java.io.FilePermission "${oxygen.data.dir}/-", "read,write,delete";
  permission java.io.FilePermission "${oxygen.data.dir}", "read,write,delete";
};
// The jar that contains sandboxing code.
grant codeBase 
  "jar:file:${catalina.base}/webapps/oxygenxml-web-author/WEB-INF/lib/
oxygen-sandbox.jar!/-" {
    permission java.security.AllPermission;
};
// Give all permissions to plugins code unless otherwise instructed by vendor.
grant codeBase "file:${oxygen.data.dir}/plugins/-" {
    permission java.security.AllPermission;
};
// Give all permissions to frameworks code unless otherwise instructed by vendor
grant codeBase "file:${oxygen.data.dir}/frameworks/-" {
    permission java.security.AllPermission;
};
...</codeblock><note>Replace
                <codeph>oxygenxml-web-author</codeph> with the name of your deployment of <ph
                keyref="webappProduct"/>.</note></li>
          <li>Start the Apache Tomcat server using the <codeph>-security</codeph> flag.</li>
        </ol></p>
    </section>
    <section id="configuring_file_permissions_to_custom_locations">
      <title>Configuring File Permissions to Custom Locations</title>
      <p>There are cases when the <ph keyref="webappProduct"/> needs to access files system
        resources, but due to security reasons, you want to prevent your users from opening them
        directly in the <ph keyref="webappProduct"/> editing page using the
          <filepath>file://</filepath> protocol.</p>
      <p>You can do this by following these steps:<ol id="ul_rfq_nvr_qr">
          <li>Edit the <filepath>catalina.policy</filepath> file and add a line such
            as:<codeblock outputclass="language-java">permission java.io.FilePermission "path/to/yourSecretDir/-", "read,write,delete";
permission java.io.FilePermission "path/to/yourSecretDir", "read,write,delete";</codeblock></li>
          <li>Use the following system property when starting the Tomcat
              server:<codeblock outputclass="language-ini">-Dfile.protocol.blacklist=/path/to/yourSecretDir</codeblock><note>Use
              the value of <codeph>path.separator</codeph> system property to separate more
              directories. For example, under Linux, the value of <codeph>path.separator</codeph>
              property is a colon punctuation character <codeph>:</codeph>.</note></li>
        </ol></p>
    </section>
  </body>
</topic>
