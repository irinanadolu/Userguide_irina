<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="create-validation-xslt">
  <title>Creating a Validation Scenario for XSLT Stylesheets</title>
  <taskbody>
    <context>
      <p>You can validate an XSLT document using the engine defined in the transformation scenario,
        or a custom validation scenario. If you choose to validate using the engine from
        transformation scenario, and a transformation scenario is not associated with the current
        document or the engine has no validation support, the default engine is used. To set the
        default engine, <ph conkeyref="reusables-preferences-pages/open-the-preferences-page"/> and
        go to <menucascade>
          <uicontrol>XML</uicontrol>
          <uicontrol>XSLT/FO/XQuery</uicontrol>
          <uicontrol>XSLT</uicontrol>
        </menucascade>.</p>
      <p>You can also create new validation scenarios or edit existing ones, and you can add <xref
          keyref="glossentry_jar"><term>JARS</term></xref> and classes that contain extension
        functions. To create or edit a validation scenario for an XSLT stylesheet, follow these
        steps:</p>
    </context>
    <steps>
      <step>
        <cmd>With the XSLT file open in <ph keyref="product"/>, select the <uicontrol><image
              href="../img/ValidationConfig16.png" id="image_k3g_x5v_sr"/>Configure Validation
            Scenario(s)</uicontrol> from the <menucascade product="editor author developer">
            <uicontrol>Document</uicontrol>
            <uicontrol>Validate</uicontrol>
          </menucascade><uicontrol product="authorEclipse developerEclipse editorEclipse"
            >XML</uicontrol> menu, or the <ph product="author developer editor"><uicontrol><image
                href="../img/ValidateDrop.png" id="image_dyn_x5v_sr"/>Validation</uicontrol> toolbar
            drop-down menu</ph><ph product="authorEclipse developerEclipse editorEclipse"
            >toolbar</ph>, or from the <uicontrol>Validate</uicontrol> submenu when invoking the
          contextual menu on the XSLT file in the <xref
            href="using-the-project-view.dita#using-the-project-view"><ph product="developer editor"
                ><uicontrol>Project</uicontrol> view</ph><ph
              product="developerEclipse editorEclipse"><uicontrol>Project Explorer</uicontrol>
            view</ph></xref>.</cmd>
        <stepresult>The <uicontrol>Configure Validation Scenario(s)</uicontrol> dialog box is
          displayed. It contains the existing scenarios, organized in categories depending on the
          type of file they apply to. You can use the options in the <uicontrol><image
              href="../img/Settings16.png" id="image_mg1_pnz_fs"/>Settings</uicontrol> drop-down
          menu to filter which scenarios are shown.</stepresult>
      </step>
      <step>
        <cmd>To edit an existing scenario, select the scenario and click the
            <uicontrol>Edit</uicontrol> button. If you try to edit one of the <i>read-only</i>
          built-in scenarios, <ph keyref="product"/> creates a customizable duplicate (you can
          also use the <uicontrol>Duplicate</uicontrol> button).</cmd>
      </step>
      <step id="vs_1">
        <cmd>To add a new scenario, click the <uicontrol><image href="../img/Add16.png"
              id="image_b34_k3r_xr"/>New</uicontrol> button.</cmd>
        <stepresult>The <uicontrol>New scenarios</uicontrol> dialog box is displayed. It lists all
          validation units of the scenario.<p>
            <fig id="figure-edit-validation-scenario-oxygen" product="author developer editor">
              <title>Add / Edit a Validation Unit</title>
              <image href="../img/sa_new_xslt_scenario.png" id="image_uss_w3r_xr"/>
            </fig>
          </p><p>
            <fig id="figure-edit-validation-scenario-oxygenEclipse"
              product="editorEclipse authorEclipse developerEclipse">
              <title>Add / Edit a Validation Unit</title>
              <image href="../img/ec_new_xslt_scenario.png" id="image_vss_w3r_xr"/>
            </fig>
          </p></stepresult>
      </step>
      <step>
        <cmd>Configure the following information in this dialog box:</cmd>
        <substeps id="substeps_f1p_bqz_fs">
          <substep>
            <cmd><uicontrol>Name</uicontrol> - The name of the validation scenario.</cmd>
          </substep>
          <substep product="author developer editor">
            <cmd><uicontrol>Storage</uicontrol> - You can choose between storing the scenario in the
                <xref keyref="glossentry_project-options"><uicontrol>Project
                Options</uicontrol></xref> or <xref keyref="glossentry_global-options"
                  ><uicontrol>Global Options</uicontrol></xref>.</cmd>
          </substep>
          <substep>
            <cmd><uicontrol>URL of the file to validate</uicontrol> - In most cases, leave this
              field as the default selection (the URL of the current file). If you want to specify a
              different URL, <ph product="author developer editor">double-</ph>click its cell and
              enter the URL in the text field, select it from the drop-down list, or use the
                  <uicontrol><image href="../img/BrowseDrop.png" id="image_utc_3tz_fs"
                />Browse</uicontrol> drop-down menu or <xref
                href="editor-variables.dita#editor-variables"><uicontrol><image
                    href="../img/InsertEditorVariables16.png" id="image_ukf_ktz_fs"/>Insert Editor
                  Variable</uicontrol></xref> button.</cmd>
          </substep>
          <substep>
            <cmd><uicontrol>File type</uicontrol> - The file type should be <b>XSLT
              Document</b>.</cmd>
          </substep>
          <substep>
            <cmd><uicontrol>Validation engine</uicontrol> - Click the cell to select a validation
              engine. You must select an engine to be able to add or edit extensions.</cmd>
          </substep>
          <substep>
            <cmd><uicontrol>Automatic validation</uicontrol> - If this option is selected, the
              validation operation defined by this row is also used by <xref
                href="automatic-validation.dita"
                product="author editor authorEclipse editorEclipse">the automatic validation
                feature</xref><ph product="developer developerEclipse">the automatic validation
                feature</ph>.</cmd>
          </substep>
        </substeps>
      </step>
      <step id="vd_3">
        <cmd>To add or edit extensions, click the <uicontrol><image href="../img/Options16.png"
            />Edit extensions</uicontrol> button. This button is only available if the
            <uicontrol>File type</uicontrol> is set as <b>XSLT Document</b> and a
            <uicontrol>Validation engine</uicontrol> is chosen.</cmd>
        <stepresult>The <uicontrol>Libraries</uicontrol> dialog box is opened. It is used to specify
          the <term>JARS</term> and classes that contain extension functions called from the XSLT
          file of the current validation scenario. They will be searched, in the specified
          extensions, in the order displayed in this dialog box. To change the order of the items,
          select the item and click the <uicontrol><image href="../img/MoveUp16.gif"
              id="image_e3b_zq1_5r"/>Move up</uicontrol> or <uicontrol><image
              href="../img/MoveDown16.gif" id="image_vv1_1r1_5r"/>Move down</uicontrol>
          buttons.</stepresult>
      </step>
      <step>
        <cmd>Click <uicontrol>OK</uicontrol> to close the <uicontrol>New scenario</uicontrol> dialog
          box.</cmd>
        <stepresult>The newly created validation scenario is now included in the list of scenarios
          in the <uicontrol>Configure Validation Scenario(s)</uicontrol> dialog box. You can select
          the scenario in this dialog box to associate it with the current XSLT document and click
          the <uicontrol>Apply associated</uicontrol> button to run the validation
          scenario.</stepresult>
      </step>
    </steps>
  </taskbody>
</task>
