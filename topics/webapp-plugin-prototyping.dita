<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="webapp-plugin-prototyping">
  <title>Setting Up a Development Environment for Plugins</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Setting up a development environment for plugins</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <taskbody>
    <prereq>
      <p>
        <note type="other" othertype="Prerequisite">You will need a recent version of Eclipse
          EE.</note>
      </p>
    </prereq>
    <context>
      <p>This procedure describes a development environment that can be used to increase your
        productivity in writing <term>plugins</term> for <ph keyref="webappProduct"/>.</p>
      <p>Developing a <term>plugin</term> for <ph keyref="webappProduct"/> might require repetitive
        code-testing cycles. Since the <xref
          href="https://www.oxygenxml.com/oxygen_webapp_running_and_testing.html" format="html"
          scope="external">process of building a WAR file</xref> requires a full Maven build, the
        whole process might prove to be time consuming. The following procedure provides a faster
        alternative for testing the <term>plugin</term>:</p>
    </context>
    <steps>
      <step>
        <cmd>Go to the following repository and follow the instructions: <xref
            href="https://github.com/oxygenxml/web-author-plugin-archetype" format="html"
            scope="external"/>.</cmd>
      </step>
      <step>
        <cmd>Run <ph keyref="webappProduct"/> in a Tomcat server. You can either use one of the
            <xref href="https://oxygenxml.com/xml_web_author/download_oxygenxml_web_author.html"
            format="html" scope="external">installation kits</xref>, the WAR distribution, or build
          it using the <xref href="https://github.com/oxygenxml/web-author-component-integration"
            format="html" scope="external">Web Author Component Integration sample
          project</xref>.</cmd>
        <info>
          <note type="other" othertype="Notes">
            <ul>
              <li>If you are using one of the installation kits, you should <xref
                  href="how_to_security_manager.dita">disable file security</xref> to work with
                plugins in development mode.</li>
              <li>If you are using the WAR distribution or the Web Author Component, you can start
                  <ph keyref="webappProduct"/> in Eclipse in debugging mode. This allows you to
                place breakpoints in your plugin code and make live code changes. The procedure is
                as follows:<ol id="ol_hts_qy1_qgb">
                  <li>Import the <filepath>.war</filepath> application as a project in Eclipse:<ol
                      id="ol_its_qy1_qgb">
                      <li><menucascade>
                          <uicontrol>File</uicontrol>
                          <uicontrol>Import</uicontrol>
                        </menucascade>.</li>
                      <li>Choose <menucascade>
                          <uicontrol>Web</uicontrol>
                          <uicontrol>WAR file</uicontrol>
                        </menucascade>.</li>
                      <li>Choose your <filepath>.war</filepath> file.</li>
                      <li>Click <uicontrol>Finish</uicontrol>.</li>
                    </ol></li>
                  <li>On the new project, choose <uicontrol>Debug On Server</uicontrol> in the
                    contextual menu.</li>
                </ol></li>
            </ul>
          </note>
        </info>
      </step>
      <step>
        <cmd>Look in the Tomcat logs (or in the console) for a line like "<codeph>Loading plugins
            from: ${path}</codeph>" and note the path of the <filepath>plugins</filepath>
          folder.</cmd>
      </step>
      <step>
        <cmd>In the <filepath>plugins</filepath> folder, create a sub-folder with a name of your
          choice (for example, <filepath>myplugin</filepath>).</cmd>
      </step>
      <step>
        <cmd>In that folder (<filepath>myplugin</filepath>), create a
            <filepath>plugin.redirect</filepath> file that contains the path to your
            <term>plugin</term> project (created in steps 1 and 2) on a single line.</cmd>
      </step>
      <step>
        <cmd>Import your <term>plugin</term> project in Eclipse.</cmd>
        <substeps id="substeps_vy1_gpb_2s">
          <substep>
            <cmd>Click <menucascade>
                <uicontrol>File</uicontrol>
                <uicontrol>Import</uicontrol>
              </menucascade>.</cmd>
          </substep>
          <substep>
            <cmd>Choose <uicontrol>Existing Maven Project</uicontrol>.</cmd>
          </substep>
          <substep>
            <cmd>Browse for the location of your <term>plugin</term>.</cmd>
          </substep>
        </substeps>
      </step>
      <step>
        <cmd>Modify the <filepath>plugin.xml</filepath> file to add a library reference to the
          directory where Eclipse places the compiled output.</cmd>
        <info>With the default setup of a Maven project, this step requires that you add the
          following element inside a <xmlelement>runtime</xmlelement>
          element:<codeblock outputclass="language-xml">&lt;library name="target/classes/"/></codeblock></info>
      </step>
      <step>
        <cmd>You can now open a document in the <ph keyref="webappProduct"/> and it will
          automatically load your <term>plugin</term>.</cmd>
        <info>Every time you make changes to the <term>plugin</term> sources, you will need to <xref
            href="webauthor-restart.dita">restart <ph keyref="webappProduct"/></xref>.</info>
      </step>
    </steps>
    <postreq>
      <p>If you are happy with the result, you can proceed with integrating the <term>plugin</term>
        into your SDK project and follow <xref
          href="https://www.oxygenxml.com/oxygen_webapp_running_and_testing.html" format="html"
          scope="external">these instructions</xref> to perform a final testing of the project.</p>
    </postreq>
  </taskbody>
  <related-links>
    <linklist>
      <title>Related Information:</title>
      <link href="webapp-configure-plugins.dita#webapp-configure-plugins"/>
    </linklist>
  </related-links>
</task>
