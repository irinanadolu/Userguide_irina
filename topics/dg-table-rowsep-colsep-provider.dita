<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="dg-table-rowsep-colsep-provider">
  <title>Configuring a Table Cell Row and Column Separator Provider</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Framework customization<indexterm>Extensions<indexterm>Author Table Cell
              Separator Provider</indexterm></indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <taskbody>
    <context>
      <p>In a custom <xref keyref="glossentry_framework"><term>framework</term></xref>, the
        <xmlelement>table</xmlelement> element has separators between rows. As explained in <xref
          href="dg-styling-table-element.dita#dg-styling-table-element"/>, you need to indicate a
        method to determine the way rows and columns are separated. If you use the
          <xmlatt>rowsep</xmlatt> and <xmlatt>colsep</xmlatt> cell element attributes, or your table
        is conforming to the CALS table model, <ph keyref="product"/> can determine the cell
        separators. Even if there are no attributes that define the separators, you can still force
        a separator between rows by implementing a Java extension.</p>
    </context>
    <steps>
      <step>
        <cmd>Create the class <i>simple.documentation.framework.TableCellSepProvider</i>. This class
          must implement the <xref
            href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorTableCellSepProvider.html"
            format="html" scope="external"
              ><i>ro.sync.ecss.extensions.api.AuthorTableCellSepProvider</i></xref> interface.</cmd>
        <info>
          <codeblock outputclass="language-java">import ro.sync.ecss.extensions.api.AuthorTableCellSepProvider;
import ro.sync.ecss.extensions.api.node.AuthorElement;

public class TableCellSepProvider implements AuthorTableCellSepProvider{</codeblock>
        </info>
      </step>
      <step>
        <cmd>The <i>init</i> method takes the <xref
            href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/node/AuthorElement.html"
            format="html" scope="external"
            ><i>ro.sync.ecss.extensions.api.node.AuthorElement</i></xref> interface that represents
          the XML <xmlelement>table</xmlelement> element as its argument. If the separator information is
          implicit, it does not depend on the current table, so you leave this method empty.
          However, there are cases (such as the CALS table model) when the cell separators are
          specified in the <xmlelement>table</xmlelement> element. In such cases, you should initialize your
          provider based on the given argument.</cmd>
        <info>
          <codeblock outputclass="language-java">public void init(AuthorElement table) {
}</codeblock>
        </info>
      </step>
      <step>
        <cmd>The <i>getColSep</i> method takes the table cell as its argument. The table layout
          engine will ask this <i>AuthorTableCellSepProvider</i> implementation if there is a column
          separator for each XML element from the table that was marked as cell in the CSS using the
          property <codeph>display:table-cell</codeph>. The following example returns <b>false</b>,
          meaning there will not be column separators.</cmd>
        <info>
          <codeblock outputclass="language-java">  /**
   * @return false - No column separator at the right of the cell.
   */
  @Override
  public boolean getColSep(AuthorElement cellElement, int columnIndex) {
    return false;
  }</codeblock>
        </info>
      </step>
      <step>
        <cmd>The row separators are determined in a similar manner. This time the example returns
            <b>true</b>, forcing a separator between the rows.</cmd>
        <info>
          <codeblock outputclass="language-java">  /**
   * @return true - A row separator below each cell.
   */
  @Override
  public boolean getRowSep(AuthorElement cellElement, int columnIndex) {
    return true;
  }</codeblock>
        </info>
        <info>
          <note conkeyref="reusable_notes_java-files/sdf_project"/>
        </info>
      </step>
      <step>
        <cmd>In the example below, the XML document contains the table element:</cmd>
        <info>
          <codeblock outputclass="language-xml"> &lt;table>
      &lt;header>
        &lt;td>H1&lt;/td>
        &lt;td>H2&lt;/td>
        &lt;td>H3&lt;/td>
        &lt;td>H4&lt;/td>
      &lt;/header>
      &lt;tr>
        &lt;td>C11&lt;/td>
        &lt;td>C12&lt;/td>
        &lt;td>C13&lt;/td>
        &lt;td>C14&lt;/td>
      &lt;/tr>
      &lt;tr>
        &lt;td>C21&lt;/td>
        &lt;td>C22&lt;/td>
        &lt;td>C23&lt;/td>
        &lt;td>C24&lt;/td>
      &lt;/tr>
      &lt;tr>
        &lt;td>C31&lt;/td>
        &lt;td>C32&lt;/td>
        &lt;td>C33&lt;/td>
        &lt;td>C34&lt;/td>
      &lt;/tr>
    &lt;/table></codeblock>
        </info>
      </step>
    </steps>
    <result>
      <p>When the borders for the <xmlelement>td</xmlelement> element are removed from the CSS, the row
        separators become visible:</p>
      <p>
        <fig>
          <title>Row separators provided by the Java implementation.</title>
          <image href="../img/dg_row_separator.png"/>
        </fig>
      </p>
      <note conkeyref="reusable_notes_java-files/sdf_project"/>
    </result>
  </taskbody>
</task>
