<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd">
<topic id="dg-DefaultElementLocatorProvider-implem">
  <title>Default Link Target Reference Finder</title>
  <body>
    <p>The <i>DefaultElementLocatorProvider</i> implementation is used by default to find link
      target references. It offers support for the most common types of links:</p>
    <ul irina="irina">
      <li><xref href="dg-IDElementLocator-implem.dita">Links based on ID attribute
        values</xref>.</li>
      <li><xref href="dg-XPointerElementLocator-implem.dita">XPointer element() scheme</xref>.</li>
    </ul>
    <p>The method <i>getElementLocator</i> determines what <i>ElementLocator</i> should be used. In
      the default implementation, it checks if the link is an XPointer element() scheme. Otherwise,
      it assumes it is an ID. A non-null <i>IDTypeVerifier</i> will always be provided if a schema
      is associated with the document type.</p>
    <p>The <codeph>link</codeph> string argument is the <xref keyref="glossentry_anchor"
          ><term>anchor</term></xref> part of the of the URL that is composed from the value of the
      link property specified for the link element in the CSS.</p>
    <codeblock outputclass="language-java">public ElementLocator getElementLocator(IDTypeVerifier idVerifier, 
               String link) {
  ElementLocator elementLocator = null;
  try {
    if(link.startsWith("element(")){
      // xpointer element() scheme
      elementLocator = new XPointerElementLocator(idVerifier, link);
    } else {
      // Locate link element by ID
      elementLocator = new IDElementLocator(idVerifier, link);
    }
  } catch (ElementLocatorException e) {
    logger.warn("Exception when create element locator for link: " 
        + link + ". Cause: " + e, e);
  }
  return elementLocator;
}</codeblock>
  </body>
</topic>
