<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="using-open-find-resources">
  <title>Searching in Content</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Searching documents<indexterm>Open/Find Resource<indexterm>In
            content</indexterm></indexterm></indexterm>
        <indexterm>Open/Find Resource<indexterm>In content</indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>To perform a search through the content of your resources, open the <xref
        href="open-find-resource-dialog.dita#open-find-resource-dialog"><uicontrol>Open/Find
          Resource</uicontrol> dialog box</xref> (from the <uicontrol>Find</uicontrol> menu or with
          <uicontrol><shortcut conkeyref="reusable-oxygen-shortcuts-list/ctrl_shift_r_shortcut"
        /></uicontrol>) or the <xref href="open-find-resource-view.dita#open-find-resource-view"
          ><uicontrol>Open/Find Resource</uicontrol> view</xref> (by default, located on the left
      side of the editor), select the <uicontrol>in content</uicontrol> option, and in the search
      field enter the terms that you want to search for. </p>
    <p>The <uicontrol>Open/Find Resource</uicontrol> feature is powered by <xref
        href="http://lucene.apache.org/core/" format="html" scope="external">Apache Lucene</xref>.
      Apache Lucene is a free open source information retrieval software library.</p>
    <p>You can use the <uicontrol>Open/Find Resource</uicontrol> feature to either perform a simple
      text search or a more complex search using the <xref
        href="http://lucene.apache.org/core/old_versioned_docs/versions/2_9_1/queryparsersyntax.html"
        format="html" scope="external">Apache Lucene - Query Parser Syntax</xref>.</p>
    <section id="complex_query_syntax_using_lucene_syntax">
      <title>Complex Query Patterns Using Lucene Syntax</title>
      <p>Using the <xref
          href="http://lucene.apache.org/core/old_versioned_docs/versions/2_9_1/queryparsersyntax.html"
          format="html" scope="external">Apache Lucene - Query Parser Syntax</xref> means you can
        perform any of the following searches:</p>
      <p>
        <ul>
          <li>
            <p><u><b>Term Searches</b></u></p>
            <p>Searching for plain
              text:<codeblock outputclass="language-ini">Garden Preparation</codeblock></p>
          </li>
          <li>
            <p><u><b>Element-Specific Searches</b></u></p>
            <p>Searching for content that belongs to a specific
              element:<codeblock outputclass="language-ini">title:"Garden Preparation"</codeblock></p>
          </li>
          <li>
            <p><u><b>Wildcard Searches</b></u></p>
            <p>Using wildcards to make your search more
              permissive:<codeblock outputclass="language-ini">Garden Prepar?tion</codeblock></p>
          </li>
          <li>
            <p><u><b>Fuzzy Searches</b></u></p>
            <p>If you are not sure of the exact form of a term that you are interested in, use the
              fuzzy search to find the terms that are similar to the search term. To perform a fuzzy
              search, use the <codeph>~</codeph> symbol after the word that you are not sure
              of:<codeblock outputclass="language-ini">Garden Preparing~</codeblock></p>
          </li>
          <li>
            <p><u><b>Proximity Searches</b></u></p>
            <p>Use proximity searches to find words that are within a specific distance away. To
              perform a proximity search, use the <codeph>~</codeph> symbol at the end of your
              search. For example, to search for the word <b>Garden</b> and the word
                <b>Preparation</b> within 6 words of each other
              use:<codeblock outputclass="language-ini">"Garden Preparation"~6</codeblock></p>
          </li>
          <li>
            <p><u><b>Range Searches</b></u></p>
            <p>Use range searches to match documents whose element values are between the lower and
              upper bound specified in the range query. For example, to find all documents whose
              titles are between <b>Iris</b> and <b>Lilac</b>,
              use:<codeblock outputclass="language-ini">title:{Iris TO Lilac}</codeblock></p>
            <p>The curly brackets denote an exclusive query. The results you get when using this
              query are all the documents whose titles are between <b>Iris</b> and <b>Lilac</b>, but
              not including <b>Iris</b> and <b>Lilac</b>. To create an inclusive query use square
              brackets:<codeblock outputclass="language-ini">title:[Iris to Lilac]</codeblock></p>
          </li>
          <li>
            <p><u><b>Term Boosting Searches</b></u></p>
            <p>Use term prioritising searches if the fragment of text that you are searching for
              contains certain words that are more important to your search than the rest of them.
              For example, if you are searching for <b>Autumn Flower</b>, a good idea is to
              prioritize the word <b>Autumn</b> since the word <b>Flower</b> occurs more often. To
              prioritize a word use the <codeph>^</codeph>
              symbol:<codeblock outputclass="language-ini">Autumn^6 Flower</codeblock></p>
          </li>
          <li>
            <p><u><b>Searches Using Boolean Operators</b></u></p>
            <p>You can use the <uicontrol>AND</uicontrol>, <uicontrol>+</uicontrol>,
                <uicontrol>OR</uicontrol>, <uicontrol>-</uicontrol>, and <uicontrol>NOT</uicontrol>
              operators. </p>
            <p>To search for documents that contain both the words <b>Garden</b> and
                <b>Preparation</b>,
              use:<codeblock outputclass="language-ini">Garden AND Preparation</codeblock></p>
            <p>To search for documents that must contain the word <b>Garden</b> and may contain the
              word <b>Preparation</b>,
              use:<codeblock outputclass="language-ini">+Garden Preparation</codeblock></p>
            <p>To search for documents that contain either the word <b>Garden</b> or the word
                <b>Preparation</b>,
              use:<codeblock outputclass="language-ini">Garden OR Preparation</codeblock></p>
            <p>To search for documents that contain <b>Garden Preparation</b> but not <b>Preparation
                of the Flowers</b>,
              use:<codeblock outputclass="language-ini">"Garden Preparation" - "Preparation of the Flowers"</codeblock></p>
          </li>
          <li>
            <p><u><b>Searches Using Grouping</b></u></p>
            <p>To search either for the word <b>Garden</b> or <b>Preparation</b>, and the word
                <b>Flowers</b>,
              use:<codeblock outputclass="language-ini">(Garden OR Preparation) AND Flowers</codeblock></p>
          </li>
          <li>
            <p><u><b>Searches Using Element Grouping</b></u></p>
            <p>To search for a title that contains both the word <b>Flowers</b> and the phrase
                <b>Garden Preparation</b>,
              use:<codeblock outputclass="language-ini">title:(+Flowers +"Garden Preparation")</codeblock></p>
          </li>
          <li>
            <p><u><b>Searching for Special Characters</b></u></p>
            <p>Sometimes you might need to search your content for special character, such
              as:<codeblock outputclass="language-ini">+ - &amp;&amp; || ! ( ) { } [ ] ^ ~ * ? : \</codeblock></p>
            <p>In this case, you should surround your search query with quotes. For example, to
              search for <b>(Hydrogen + Oxygen)=Water</b>,
              use:<codeblock outputclass="language-ini">"(Hydrogen + Oxygen)=Water"</codeblock></p>
          </li>
        </ul>
      </p>
    </section>
  </body>
</topic>
