<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task
  PUBLIC "-//OASIS//DTD DITA Task//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/task.dtd">
<task id="determining-what-template-generated-particular-output">
  <title id="determine-template-for-output-title">Identify the XSLT / XQuery Expression that
    Generated Particular Output</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Debugging XSLT<indexterm>Identify expressions</indexterm></indexterm>
        <indexterm>XSLT Debugger perspective<indexterm>Identify expressions</indexterm></indexterm>
        <indexterm>Debugging XQuery<indexterm>Identify expressions</indexterm></indexterm>
        <indexterm>XQuery Debugger perspective<indexterm>Identify
          expressions</indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <taskbody>
    <context>
      <p>To quickly spot the XSLT templates or XQuery expressions with problems, it is important to
        know what XSLT template in the XSLT stylesheet (or XQuery expression in the XQuery document)
        and what element in the source XML document generated a specified area in the output.</p>
      <p>Some of the debugging capabilities (for example, <b>Step in</b>) can be used for this
        purpose. Using <b>Step in</b>, you can see how output is generated and link it with the
        XSLT/XQuery element being executed in the current source context. However, this can become
        difficult on complex XSLT stylesheets or XQuery documents that generate a large output.</p>
      <p>You can click particular text in the <uicontrol>Output</uicontrol> view <ph
          product="developer editor">or <uicontrol>XHTML</uicontrol> output view </ph>and the editor
        will select the XML source context and the XSLT template/XQuery element that generated that
        text. Also, inspecting the whole stack of XSLT templates/XQuery elements that determined the
        state of the XSLT/XQuery processor at the moment of generating the specified output area
        speeds up the debugging process.</p>
      <p>This is an example of a typical procedure for identifying an expression that generated
        particular output:</p>
    </context>
    <steps id="procedure-determine-template-for-output">
      <step>
        <cmd>Switch to the <uicontrol>XSLT Debugger</uicontrol> or <uicontrol>XQuery
            Debugger</uicontrol>
          <xref keyref="glossentry_perspective"><term>perspective</term></xref> with one of the
          following actions:</cmd>
        <choices>
          <choice>Select <ph product="editor developer"><menucascade>
                <uicontrol>Window</uicontrol>
                <uicontrol>Open perspective</uicontrol>
                <uicontrol>XSLT Debugger/XQuery Debugger</uicontrol>
              </menucascade> or the <uicontrol><image href="../img/Debugger18.png"/>XSLT
                Debugger</uicontrol>/<uicontrol><image href="../img/DebuggerXQuery18.png"/>XQuery
                Debugger</uicontrol> button in the top-right corner of the
              interface</ph><menucascade product="editorEclipse developerEclipse">
              <uicontrol>Window</uicontrol>
              <uicontrol>Open Perspective</uicontrol>
              <uicontrol>Other </uicontrol>
              <uicontrol>Oxygen XSLT Debugger/XQuery Debugger</uicontrol>
            </menucascade>.</choice>
          <choice>Select <ph product="editor developer"><menucascade>
                <uicontrol>Document</uicontrol>
                <uicontrol>XML Document</uicontrol>
                <uicontrol>Debug scenario</uicontrol>
              </menucascade> or use the <uicontrol><image href="../img/DebugScenario16.png"/>Debug
                scenario</uicontrol> action on the toolbar.</ph><ph
              product="editorEclipse developerEclipse">the <uicontrol><image
                  href="../img/DebugScenario16.png" id="image_qk3_f4s_tr"/>Debug
                scenario</uicontrol> action on the toolbar.</ph>. This action initializes the
            Debugger <xref keyref="glossentry_perspective"><term>perspective</term></xref> with the
            parameters of the transformation scenario. Any modification applied to the scenario
            parameters (the transformer engine, XSLT parameters, transformer extensions, etc.) will
            be saved back in the scenario when exiting from the Debugger
            <term>perspective</term>.</choice>
        </choices>
      </step>
      <step>
        <cmd>Select the source XML document in the <xref
            href="debug-control-toolbar.dita#debug-control-toolbar/debug-xml-selector">XML source
            selector of the Control toolbar</xref>. In the case of XQuery debugging, if your XQuery
          document has no implicit source, set the source selector value to
            <uicontrol>NONE</uicontrol>.</cmd>
      </step>
      <step>
        <cmd>Select the XSLT/XQuery document in the <xref
            href="debug-control-toolbar.dita#debug-control-toolbar/debug-xsl-selector">XSL/XQuery
            selector of the Control toolbar</xref>.</cmd>
      </step>
      <step>
        <cmd>Select the appropriate engine in the <xref
            href="debug-control-toolbar.dita#debug-control-toolbar/debug-engine-selector"
            >XSLT/XQuery engine selector of the Control toolbar</xref>.</cmd>
      </step>
      <step>
        <cmd>Set XSLT/XQuery parameters using the <xref
            href="debug-control-toolbar.dita#debug-control-toolbar/debug-parameters"
              ><uicontrol>Configure parameters</uicontrol> button on the Control
          toolbar</xref>.</cmd>
      </step>
      <step>
        <cmd>Apply the XSLT stylesheet or XQuery transformation using the <xref
            href="debug-control-toolbar.dita#debug-control-toolbar/debug-run-to-end"
                ><uicontrol><image href="../img/RunToEnd16.gif" id="image_ljy_qsf_wr"/>Run to
              end</uicontrol> button that is available on the Control toolbar</xref>.</cmd>
      </step>
      <step>
        <cmd>Inspect the mapping by clicking a section of the output <ph product="editor developer"
            >in either the <uicontrol>Text</uicontrol> tab or <uicontrol>XHTML</uicontrol> tab of
            the <xref
              href="xslt-debugger-perspective.dita#xslt-debugger-perspective/debug-output-view"
              >Output view</xref></ph><ph product="editorEclipse developerEclipse">in the
              <uicontrol>Output</uicontrol> view</ph>.</cmd>
        <info>
          <p>
            <fig id="xhtml-mapping" product="editor developer">
              <title>XHTML Output to Source Mapping</title>
              <image href="../img/sa_debugger_xhtml_mapping.png"/>
            </fig>
          </p>
          <p>
            <fig id="text-mapping-oxygen" product="editor developer">
              <title>Text Output to Source Mapping</title>
              <image href="../img/sa_debugger_text_mapping.png"/>
            </fig>
          </p>
          <p>
            <fig id="text-mapping-oxygenEclipse" product="editorEclipse developerEclipse">
              <title>Text Output to Source Mapping</title>
              <image href="../img/ec_debugger_text_mapping.png"/>
            </fig>
          </p>
        </info>
        <stepresult>This action will highlight the XSLT / XQuery element and the XML source context.
          This XSLT template/XQuery element that is highlighted in the XSLT/XQuery editor represents
          only the top of the stack of XSLT templates/XQuery elements that determined the state of
          the XSLT/XQuery processor at the moment of generating the clicked output section. In the
          case of complex transformations, inspecting the whole stack of XSLT templates/XQuery
          elements speeds up the debugging process. This stack is available in the <xref
            href="debug-output-mapping-stack-view.dita#debug-output-mapping-stack-view"
            format="dita"><uicontrol>Output Mapping Stack</uicontrol> view</xref>.</stepresult>
      </step>
    </steps>
  </taskbody>
  <related-links>
    <linklist>
      <title>Related Information:</title>
      <link href="debug-output-mapping-stack-view.dita#debug-output-mapping-stack-view"/>
      <link href="debug-trace-view.dita#debug-trace-view"/>
      <link href="debug-templates-view.dita#debug-templates-view"/>
    </linklist>
  </related-links>
</task>
