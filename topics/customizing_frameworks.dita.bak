<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="customizing_frameworks">
  <title>Integrating Web Author with Your Content by Creating Custom Frameworks</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Customizing your content for Web Author</indexterm>
        <indexterm>Customizing frameworks for Web Author</indexterm>
        <indexterm>Customizing document types for Web Author</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>You can customize <term>Web Author</term> to make it simple for everyone to write structured
      content and still adhere to your project conventions. This topic provides details about
      reusing frameworks between the standalone versions of <term>Oxygen</term> and <term>Web
        Author</term>, how to create customized frameworks, how to test and upload your
      customization, and other framework customization tips.</p>
    <section id="section_jqs_3sf_11b">
      <title>Examples of Framework Customization Use-Cases</title>
      <p>
        <dl>
          <dlentry>
            <dt>Document Schema</dt>
            <dd>Web Author supports any XML-based schema in any schema language. It also offers
                <xref href="webauthor-predefined-frameworks.dita#webauthor-predefined-frameworks"
                >built-in support for DITA, DocBook, TEI and XHTML</xref>.</dd>
          </dlentry>
          <dlentry>
            <dt>Add Support for a New XML Vocabulary</dt>
            <dd>You can customize <term>Web Author</term> to work with any XML-based document type.
              For example, you can customize <term>Web Author</term> to work with a <xref
                href="https://www.oxygenxml.com/doc/ug-editor/topics/dita-specialization-support.html"
                format="html" scope="external">DITA specialization</xref>.</dd>
          </dlentry>
          <dlentry>
            <dt>Authoring Experience</dt>
            <dd>You can configure how documents are rendered in <term>Web Author</term> or display
                <xref
                href="dg-form-controls-properties-matrix.dita#dg-form-controls-properties-matrix"
                >inline form-controls</xref> to allow users to edit attribute values.</dd>
          </dlentry>
          <dlentry>
            <dt>Business Rules</dt>
            <dd>
              <p>You can configure the automatic validation to use Schematron to enforce various
                business rules and propose solutions for them. For more information, see the <xref
                  href="https://www.oxygenxml.com/doc/ug-editor/topics/schematron-quick-fixes.html"
                  format="html" scope="external">Schematron Quick Fixes (SQF) section in the Oxygen
                  XML Editor User Manual</xref>. There is an interesting Blog post written on this
                subject available at: <xref
                  href="https://blog.oxygenxml.com/topics/SchematronBCs.html" format="html"
                  scope="external"/>.</p>
              <p>There is also a public project in the <b>Oxygen</b> GitHub account pages that
                offers guidance and instructions for integrating an <i>Intelligent Style Guide</i>
                for imposing business rules and assisting the content authors. You can download the
                project and try it for yourself at: <xref
                  href="https://github.com/oxygenxml/integrated-styleguide" format="html"
                  scope="external"/>.</p>
            </dd>
          </dlentry>
          <dlentry>
            <dt>Document Templates</dt>
            <dd>You can <xref href="#customizing_frameworks/new-templates-li" format="dita">specify
                document templates</xref> that users can choose from when creating a new
              document.</dd>
          </dlentry>
          <dlentry>
            <dt>Embedded Formats</dt>
            <dd>Web Author supports embedded formats such as MathML, SVG, videos, and others using
                <xref href="customizing_plugins.dita#customizing_plugins">plugins</xref> or <xref
                href="dg-form-controls-properties-matrix.dita#dg-form-controls-properties-matrix"
                >flexible form-controls</xref>. Also, support for embedded formats can be
              implemented by third parties. For example, <xref
                href="http://www.wiris.com/en/plugins/docs/oxygen" format="html" scope="external"
                >WIRIS provides a plugin</xref> that can be used to edit MathML equations in a
              visual way.</dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <section id="reusing_frameworks_between_and_web_author">
      <title>Reusing Frameworks Between Oxygen XML Editor/Author and Web Author</title>
      <p>Custom <xref keyref="glossentry_framework"><term>frameworks</term></xref> that are designed
        for documentation purposes can be reused interchangeably between <term>Oxygen</term>
        standalone distributions and the <ph keyref="webappProduct"/>. However, <xref
          href="wa-migrate-frameworks.dita">some fine-tuning might be necessary</xref> to maximize
        the editing experience for your content authors. The advantages of using a common
          <term>framework</term> include:<ul id="ul_rlf_yvy_1r">
          <li>Uniform experience across multiple <term>Oxygen XML Editor/Author</term>
            distributions.</li>
          <li>Ability to reuse previously developed <term>frameworks</term>.</li>
          <li>Many of the customized items that are added to your <term>framework</term> in the
              <term>Oxygen XML Editor/Author</term> standalone distribution also carry over to <ph
              keyref="webappProduct"/>. For example, items that are added to the list of proposals
            for the <xref keyref="glossentry_content-completion-assistant"><term>Content Completion
                Assistant</term></xref> will appear in both distributions.</li>
        </ul></p>
    </section>
    <section id="section_zzf_pns_vz">
      <title>How to Create a Custom Framework (Document Type)</title>
      <p>You can create a custom <term>framework</term> by extending an existing one: <ol>
          <li>In a location where you have full write access, create a folder structure similar to
            this: <filepath>custom_frameworks/dita-extension</filepath>. </li>
          <li>Open a standalone version of <term>Oxygen XML Editor/Author</term>.</li>
          <li>Open the <uicontrol>Preferences</uicontrol> dialog box <menucascade>
              <uicontrol>(Options</uicontrol>
              <uicontrol>Preferences)</uicontrol>
            </menucascade> and go to <menucascade>
              <uicontrol>Document Type Association</uicontrol>
              <uicontrol>Locations</uicontrol>
            </menucascade>. In this preferences page, add the path to your
              <filepath>custom_frameworks</filepath> folder in the <uicontrol>Additional frameworks
              directories</uicontrol> list.</li>
          <li>Go to the <uicontrol>Document Type Association</uicontrol> preferences page and select
            an existing <term>framework</term> configuration and use the
              <uicontrol>Extend</uicontrol> button to create an extension for it.</li>
          <li>Give the extension an appropriate name (for example, <b><i>DITA - Custom</i></b>),
            select <uicontrol>External</uicontrol> for the <uicontrol>Storage</uicontrol> option,
            and specify an appropriate path (for example,
              <filepath>path/to/.../custom_frameworks/dita-extension/dita-custom.framework</filepath>).</li>
          <li id="make-changes-li">Make your changes to the extension. There is a large variety of
            ways to customize your extended <term>framework</term>. These are just some of the ways:<ul>
              <li>The <xref
                  href="https://www.oxygenxml.com/doc/ug-editor/topics/the-document-type-dialog.html"
                  format="html" scope="external"><uicontrol>Document Type</uicontrol> configuration
                  dialog box</xref> contains various tabs and subtabs that allow you to configure
                the extended <term>framework</term>.</li>
              <li id="new-templates-li">You can <xref href="wa-file-templates.dita">create your own
                  custom document templates</xref> and once the framework is uploaded to <term>Web
                  Author</term>, users will have access to the templates when creating a new
                document.</li>
              <li>See the <xref
                  href="https://www.oxygenxml.com/doc/ug-editor/topics/dg-complex-customization-tutorial.html"
                  format="html" scope="external">Oxygen Advanced Framework Customization
                  section</xref> for numerous procedures and examples of how to configure various
                aspects of the extended <term>framework</term>.</li>
              <li>For information about using CSS files to configure the extended
                  <term>framework</term>, see <xref
                  href="https://www.oxygenxml.com/doc/ug-editor/topics/dg-customize-default-CSS.html"
                  format="html" scope="external">Customizing Author Mode Using CSS Files Associated
                  with a Framework</xref>.</li>
              <li>For information about configuring the Content Completion proposals for the
                extended <term>framework</term>, see <xref
                  href="wa-cc-configuration.dita#wa-cc-configuration"/>.</li>
            </ul></li>
          <li>Click <uicontrol>OK</uicontrol> to close the dialog box and then
              <uicontrol>OK</uicontrol> or <uicontrol>Apply</uicontrol> to save the changes.</li>
          <li>Create an archive that contains your custom framework folder that you created in the
            first step of this procedure. The archive should contain exactly one folder on the first
            level. You will need this archive structure to <xref
              href="#customizing_frameworks/deploying_a_framework" format="dita">upload the
                <term>framework</term> to Web Author</xref>.</li>
        </ol></p>
    </section>
    <section id="developing_and_testing_a_framework_using_the_weba">
      <title>Testing a Custom Framework Using the Oxygen XML Web Author Test Server Add-on</title>
      <p>The following procedure assumes that you have access to an <term>Oxygen XML
          Editor/Author</term> standalone installation. This is not a mandatory requirement, but
        rather a way to speed up the development process.</p>
      <p>
        <ol id="ol_g2c_pnz_1r">
          <li>Use the standalone installation of <term>Oxygen XML Editor/Author</term> to <xref
              href="#customizing_frameworks/section_zzf_pns_vz" format="dita">customize a specific
                <term>framework</term></xref>.</li>
          <li>
            <p>Install the <uicontrol>Oxygen Web Author Test Server</uicontrol> add-on.<ol
                id="ol_wkt_gf5_53b">
                <li>Go to <menucascade>
                    <uicontrol>Help</uicontrol>
                    <uicontrol>Install new add-ons</uicontrol>
                  </menucascade> to open an add-on selection dialog box.</li>
                <li>In the <uicontrol>Show add-ons from</uicontrol> text box, enter the following
                  URL:
                  <b>https://www.oxygenxml.com/InstData/Addons/optional/updateSite.xml</b>.</li>
                <li>Select the <b>Oxygen Web Author Test Server</b> add-on and click
                    <uicontrol>Next</uicontrol>.</li>
                <li>Select the <b>I accept all terms of the end user license agreement</b> option
                  and click <uicontrol>Finish</uicontrol>.</li>
                <li>Restart <term>Oxygen XML Editor/Author</term>.</li>
              </ol></p>
            <p><b>Result:</b> You should now have a <uicontrol>Start Web Author Server</uicontrol>
              button on the toolbar.</p>
          </li>
          <li>Open an XML file in <term>Oxygen XML Editor/Author</term>.<note type="note">The <b>Web
                Author Test Server</b> does not load <term>frameworks</term> that have the
                <uicontrol>Storage</uicontrol> option set to <uicontrol>Internal</uicontrol> in the
                <xref
                href="https://www.oxygenxml.com/doc/ug-editor/topics/the-document-type-dialog.html"
                format="html" scope="external"><uicontrol>Document Type</uicontrol> configuration
                dialog box</xref>. Therefore, the XML file needs to be from a <term>framework</term>
              that has that option set to <uicontrol>External</uicontrol>.</note></li>
          <li>
            <p>Click the <uicontrol>Start Web Author Server</uicontrol> button found on the toolbar.
              This starts a Tomcat server and opens a file chooser dialog box:</p>
            <p>
              <fig>
                <title>Web Author Test Server File Chooser Dialog Box</title>
                <image href="../img/wa_test_server_dialog1.png"/>
              </fig>
            </p>
            <p>The dialog box shows a URL entry for up to two network interfaces that are available
              on your desktop PC. The Tomcat server accesses the <term>frameworks</term> and options
              currently in use by <term>Oxygen XML Editor/Author</term>.</p>
          </li>
          <li>Open the XML document with one of the following methods:<ul>
              <li><b>Mobile Device</b> - To open the current document in your mobile device, click
                the <uicontrol>QR Code</uicontrol> button next to one of the network interface
                listings and use a QR code reader on your mobile device.</li>
              <li><b>Desktop Browser</b> - To open the current document in your desktop browser,
                click the <uicontrol>Open in Browser</uicontrol> button next to one of the network
                interface listings.</li>
            </ul></li>
          <li><xref href="#customizing_frameworks/make-changes-li" format="dita">Make whatever
              changes you want to your <term>framework</term></xref>. Note that these changes will
            not automatically be reflected in the <ph keyref="webappProduct"/> if it was already
            running. To see the results of changes, close the server using the <b>Close and stop
              server</b> button in the file chooser dialog box and start it again.</li>
        </ol>
      </p>
      <p>
        <note type="attention">When using this test server add-on, editing sessions have a limited
          duration. If the session stops working, click the <b>Close and stop server</b> button in
          the file chooser dialog box and start it again.</note>
      </p>
    </section>
    <section id="deploying_a_framework">
      <title>Uploading a Custom Framework to Web Author</title>
      <p>To upload a custom <term>framework</term> to your <term>Web Author</term> deployment,
        follow this procedure:<ol conkeyref="reusables-sdk-webauthor/upload-framework-ol">
          <li/>
        </ol></p>
    </section>
    <section id="adding_javascript_code_to_a_framework">
      <title>Adding JavaScript Code to a Framework</title>
      <p>To load JavaScript code, you can add JavaScript files (<filepath>.js</filepath> extension)
        directly inside the <filepath>[Framework_Directory]/web</filepath> folder. <note
          type="important">
          <ul id="ul_hk5_gfj_1mb">
            <li>All the files will be loaded in the browser in lexicographical order. </li>
            <li>JavaScript files located in subfolders of the <filepath>web</filepath> folder will
              not be loaded.</li>
            <li> If you have a framework extension, both the JavaScript files from the base
              framework and those from the extension will be loaded. If the extension contains a
              JavaScript file with the same name as a file in the base framework, the one in the
              extension takes precedence.</li>
          </ul>
        </note></p>
      <p>The framework's script needs to create an instance of <codeph>sync.ext.Extension</codeph>
        and register it in the <codeph>sync.ext.Registry.extension</codeph> field. For
        example:<codeblock outputclass="language-javascript">class MyExtension extends sync.ext.Extension {
  // your implementation here ...
}
sync.ext.Registry.extension = new MyExtension();</codeblock></p>
      <p>When extending a framework, it is recommended to register an
          <codeph>sync.ext.Extension</codeph> instance that delegates to the
          <codeph>sync.ext.Extension</codeph> instance registered by the base framework.</p>
      <p>These files can contain code that calls the <xref keyref="jscript_api">Web Author
          JavaScript API</xref> to implement custom editing actions. Some possible use cases
          include:<ul id="ul_x5q_s4y_hnb">
          <li>Create custom actions and add them to the toolbar or contextual menu. For more
            details, see the <xref keyref="jscript_api_customaction">JS Tutorial: Implementing a
              Custom Action</xref>.</li>
          <li>Create custom form controls. For more details, see the <xref
              keyref="jscript_api_formcontrol">JS Tutorial: Implementing a Custom Form
              Control</xref>.</li>
          <li>Add more views. For more details, see the <xref keyref="jscript_api_customview">JS
              Tutorial: Customizing the Side Views</xref>.</li>
        </ul></p>
      <p>The structure of the JavaScript extension should be the
          following:<codeblock outputclass="language-javascript">MyExtension = function() {}
MyExtension.prototype.editorCreated = function (editor) {
  // ... work with the editor...
};
// Register the extension so that it will be notified when the editor is created.
sync.ext.Registry.extension = new MyExtension();</codeblock><note type="tip">Some
          tutorials are available for other use cases in the <xref keyref="jscript_api">Oxygen XML
            Web Author Component API Documentation</xref>, in the <uicontrol>Tutorials</uicontrol>
          section.</note></p>
    </section>
    <section id="section_zfq_dfx_xkb">
      <title>Loading Static Resources from the Framework Directory</title>
      <p>All the resources (such as images, HTML, or CSS files) found in the
          <filepath>web</filepath> sub-folder of the framework folder can be accessed from the web
        browser using a URL obtained by evaluating <codeph>sync.ext.Registry.extensionURL</codeph>
        in JavaScript. For example, a file located at
          <filepath>&lt;framework-folder>/web/resources/image.png</filepath> can be accessed by the
        following
        URL:<codeblock outputclass="language-javascript">sync.ext.Registry.extensionURL + 'resources/image.png'</codeblock></p>
    </section>
    <section id="customization_tips">
      <title>Other Customization Tips</title>
      <p>
        <ul id="ol_css_3h1_br">
          <li>If you want to use CSS rules that only apply when the <term>framework</term> is used
            in the <ph keyref="webappProduct"/>, use the following <codeph>media</codeph>
            query:<codeblock outputclass="language-css">@media oxygen AND (platform:webapp) {
 ... 
}</codeblock></li>
          <li id="author-mode-operation-li">
            <p>If the <term>framework</term> contains custom <uicontrol>Author</uicontrol> mode
              operations (Java implementations of the
                <codeph>ro.sync.ecss.extensions.api.AuthorOperation</codeph> interface), they can be
              enabled to be used by the <ph keyref="webappProduct"/> using the
                <codeph>ro.sync.ecss.extensions.api.WebappCompatible</codeph> annotation.</p>
            <p>If you plan to invoke a custom <uicontrol>Author</uicontrol> mode operation from the
              JavaScript code (as in <xref keyref="jscript_api_customaction">this tutorial</xref>),
              the operation has to be annotated with
                <codeph>ro.sync.ecss.extensions.api.webapp.WebappRestSafe</codeph>. <note
                type="warning">Operations annotated with
                  <codeph>ro.sync.ecss.extensions.api.webapp.WebappRestSafe</codeph> can be invoked
                with user-supplied parameters. Use this annotation only for operations that are safe
                to execute with any parameter combination. For example, an action that would execute
                a process on the server based on a command-line script specified by the user is
                  <b>not</b> safe.</note></p>
            <p>
              <note><uicontrol>Author</uicontrol> mode operations that use <term>Java Swing</term>
                components to display a graphical interface are not compatible with the <ph
                  keyref="webappProduct"/> and they should not be annotated.</note>
            </p>
          </li>
          <li>The <ph keyref="webappProduct"/> continuously validates the XML documents using the
            default validation scenarios defined at <term>framework</term> level. Only the
            validation units that have the <xref
              href="https://www.oxygenxml.com/doc/ug-editor/topics/edit-validation-scenario.html#edit-validation-scenario__validation-config-dialog"
              format="html" scope="external"><uicontrol>Automatic Validation</uicontrol> option
              selected in the <uicontrol>Edit Scenario</uicontrol> dialog box</xref> that is
            accessed by editing a scenario in the <xref
              href="https://www.oxygenxml.com/doc/ug-editor/topics/document-type-validation-tab.html"
              format="html" scope="external"><uicontrol>Validation</uicontrol> subtab when editing a
              document type</xref>.</li>
        </ul>
      </p>
    </section>
  </body>
</topic>
