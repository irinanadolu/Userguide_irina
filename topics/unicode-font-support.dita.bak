<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="unicode-font-support">
  <title>Unicode Fallback Font Support</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Special characters<indexterm>Fallback Font Support</indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p><ph keyref="product"/> provides fonts for most common Unicode ranges. However, if you <xref
        href="unicode-toolbar.dita#unicode-toolbar">use special symbols or characters</xref> that
      are not included in the default fonts, they will be rendered as small rectangles. A
        <i>fallback</i> font is a reserve typeface that contains symbols for as many <xref
        href="working-with-unicode.dita#working-with-unicode">Unicode characters</xref> as possible.
      When a display system encounters a character that is not part of the range of any of the
      available fonts, <ph keyref="product"/> will try to find that symbol in a <i>fallback</i>
      font.</p>
    <section id="example_of_a_scenario_where_a_fallback_font_is_ne">
      <title>Example of a Scenario Where a Fallback Font is Needed</title>
      <p>Suppose that you need to insert the wheelchair symbol (<image
          href="../img/Wheelchair16.png" id="image_kld_4kc_vs"/> - <userinput>U+267F</userinput>)
        into your content in a Windows operating system. By default, <ph keyref="product"/> does not
        render this symbol correctly since it is not included in any of the default fonts. It is
        included in <b>Segoe UI Symbol</b>, but this font is not part of the default fonts that come
        with <ph keyref="product"/>. To allow <ph keyref="product"/> to recognize and render the
        symbol correctly, you can add <b>Segoe UI Symbol</b> as a <i>fallback</i> font.</p>
    </section>
    <section id="add_a_fallback_font_in_windows_7_or_later">
      <title>Adding a Fallback Font in Windows (7 or Later)</title>
      <p>To add a fallback font to the <ph keyref="product"/> installation, use the following
          procedure:<ol id="ol_lqt_pr3_5s">
          <li>Start Windows Explorer and browse to the <filepath><term
                conkeyref="reusables-user-guide/oxy-install-dir"/>/jre/lib/fonts</filepath>
            directory.</li>
          <li>Create a directory called <filepath>fallback</filepath> (if it is not already
            there).</li>
          <li>Copy a font file (True Type Font - TTF) that includes the special characters into this
              directory.<note type="tip">You could, for example, copy the <b>Segoe UI Symbol
                Regular</b> font from <filepath>C:\Windows\Fonts</filepath>.</note></li>
          <li>Restart <ph keyref="product"/> for the changes to take full effect.</li>
        </ol></p>
      <p><b>Result:</b> Whenever <ph keyref="product"/> finds a character that cannot be rendered
        using its standard fonts, it will look for the glyph in the fonts stored in the
          <filepath>fallback</filepath> folder.</p>
    </section>
    <section id="alternate_solution_for_other_platforms">
      <title>Adding a Fallback Font in Other Platforms</title>
      <p>For Mac OS X or other platforms, you could use the following approach:<ol
          id="ol_wsz_v23_5s">
          <li>Use a font editor (such as <xref href="http://fontforge.github.io/en-US/"
              format="html" scope="external">FontForge</xref>) to combine multiple true type fonts
            into a single custom font.</li>
          <li>Install the font file into the dedicated font folder of your operating system.</li>
          <li>In <ph keyref="product"/>, <ph
              conkeyref="reusables-preferences-pages/open-the-preferences-page"/>, go to
              <menucascade product="author developer editor">
              <uicontrol>Appearance</uicontrol>
              <uicontrol>Fonts</uicontrol>
            </menucascade><uicontrol product="authorEclipse developerEclipse editorEclipse"
              >Fonts</uicontrol>.</li>
          <li>Click the <uicontrol product="author developer editor">Choose</uicontrol><uicontrol
              product="authorEclipse developerEclipse editorEclipse">Change</uicontrol> button for
            the particular editing mode <ph product="author developer editor"
                >(<uicontrol>Editor</uicontrol> for <uicontrol>Text</uicontrol> mode) </ph> and
            select your custom font from the drop-down list in the subsequent dialog box.</li>
          <li>Restart <ph keyref="product"/> for the font changes to take full effect.</li>
        </ol></p>
    </section>
  </body>
  <related-links>
    <linklist>
      <title>Related Information:</title>
      <link href="working-with-unicode.dita#working-with-unicode"/>
      <link href="unicode-toolbar.dita#unicode-toolbar"/>
    </linklist>
  </related-links>
</topic>
