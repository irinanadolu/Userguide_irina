<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task
  PUBLIC "-//OASIS//DTD DITA Task//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/task.dtd">
<task id="dg-author-references-resolver">
  <title>Configuring a Reference Resolver</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Framework customization<indexterm>Extensions<indexterm>Author Reference
              Resolver</indexterm></indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <taskbody>
    <context>
      <p>This information is helpful if you need to provide a handler for resolving references and
        obtain the content they reference. For example, suppose the element that has references is
          <b>ref</b> and the attribute indicating the referenced resource is <b>location</b>. You
        need to implement a Java extension class for obtaining the referenced resources.</p>
    </context>
    <steps>
      <step>
        <cmd>Create the class <i>simple.documentation.framework.ReferencesResolver</i>. This class
          must implement the <xref
            href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorReferenceResolver.html"
            format="html" scope="external"
              ><i>ro.sync.ecss.extensions.api.AuthorReferenceResolver</i></xref> interface.</cmd>
        <info>
          <codeblock outputclass="language-java">import ro.sync.ecss.extensions.api.AuthorReferenceResolver;
import ro.sync.ecss.extensions.api.AuthorAccess;
import ro.sync.ecss.extensions.api.node.AttrValue;
import ro.sync.ecss.extensions.api.node.AuthorElement;
import ro.sync.ecss.extensions.api.node.AuthorNode;

public class ReferencesResolver 
      implements AuthorReferenceResolver {</codeblock>
        </info>
      </step>
      <step>
        <cmd>The <i>hasReferences</i> method verifies if the handler considers the node to have
          references. It takes <i>AuthorNode</i> as an argument that represents the node that will
          be verified. The method will return <codeph>true</codeph> if the node is considered to
          have references. In the following example, to be a reference, the node must be an element
          with the name <i>ref</i> and it must have an attribute named <i>location</i>.</cmd>
        <info>
          <codeblock outputclass="language-java">public boolean hasReferences(AuthorNode node) {
  boolean hasReferences = false;
  if (node.getType() == AuthorNode.NODE_TYPE_ELEMENT) {
    AuthorElement element = (AuthorElement) node;
    if ("ref".equals(element.getLocalName())) {
      AttrValue attrValue = element.getAttribute("location");
      hasReferences = attrValue != null;
    }
  }
  return hasReferences;
}</codeblock>
        </info>
      </step>
      <step>
        <cmd>The method <i>getDisplayName</i> returns the display name of the node that contains the
          expanded referenced content. It takes <i>AuthorNode</i> as an argument that represents the
          node that needs the display name. The referenced content engine will ask this
            <i>AuthorReferenceResolver</i> implementation for the display name for each node that is
          considered a reference. In the following example, the display name is the value of the
            <i>location</i> attribute from the <i>ref</i> element.</cmd>
        <info>
          <codeblock outputclass="language-java">public String getDisplayName(AuthorNode node) {
  String displayName = "ref-fragment";
  if (node.getType() == AuthorNode.NODE_TYPE_ELEMENT) {
    AuthorElement element = (AuthorElement) node;
    if ("ref".equals(element.getLocalName())) {
      AttrValue attrValue = element.getAttribute("location");
      if (attrValue != null) {
        displayName = attrValue.getValue();
      }
    }
  }
  return displayName;
}</codeblock>
        </info>
      </step>
      <step>
        <cmd>The method <i>resolveReference</i> resolves the reference of the node and returns a
            <i>SAXSource</i> with the parser and its input source. It takes <i>AuthorNode</i> as an
          argument that represents the node that needs the reference resolved, the
            <codeph>systemID</codeph> of the node, the <i>AuthorAccess</i> with access methods to
          the <uicontrol>Author</uicontrol> mode data model and a SAX <i>EntityResolver</i> that
          resolves resources that are already opened in another editor or resolve resources through
          the <xref keyref="glossentry_xml-catalog"><term>XML Catalog</term></xref>. In the
          implementation, you need to resolve the reference relative to the
            <codeph>systemID</codeph>, and create a parser and an input source over the resolved
          reference.</cmd>
        <info>
          <codeblock outputclass="language-java">public SAXSource resolveReference(
    AuthorNode node, 
    String systemID, 
    AuthorAccess authorAccess,
    EntityResolver  entityResolver) {
  SAXSource saxSource = null;
  
  if (node.getType() == AuthorNode.NODE_TYPE_ELEMENT) {
    AuthorElement element = (AuthorElement) node;
    if ("ref".equals(element.getLocalName())) {
      AttrValue attrValue = element.getAttribute("location");
      if (attrValue != null) {
        String attrStringVal = attrValue.getValue();
        try {
          URL absoluteUrl = new URL(new URL(systemID), 
          authorAccess.getUtilAccess().correctURL(attrStringVal));
          
          InputSource inputSource = entityResolver.resolveEntity(null, 
              absoluteUrl.toString());
          if(inputSource == null) {
            inputSource = new InputSource(absoluteUrl.toString());
          }
          
          XMLReader xmlReader = authorAccess.newNonValidatingXMLReader();
          xmlReader.setEntityResolver(entityResolver);
          
          saxSource = new SAXSource(xmlReader, inputSource);
        } catch (MalformedURLException e) {
          logger.error(e, e);
        } catch (SAXException e) {
          logger.error(e, e);
        } catch (IOException e) {
          logger.error(e, e);
        }
      }
    }
  }

  return saxSource;
}</codeblock>
        </info>
      </step>
      <step>
        <cmd>The method <i>getReferenceUniqueID</i> should return a unique identifier for the node
          reference. The unique identifier is used to avoid resolving the references recursively.
          The method takes <i>AuthorNode</i> as an argument that represents the node with the
          reference. In the following example, the unique identifier is the value of the
            <i>location</i> attribute from the <i>ref</i> element.</cmd>
        <info>
          <codeblock outputclass="language-java">public String getReferenceUniqueID(AuthorNode node) {
  String id = null;
  if (node.getType() == AuthorNode.NODE_TYPE_ELEMENT) {
    AuthorElement element = (AuthorElement) node;
    if ("ref".equals(element.getLocalName())) {
      AttrValue attrValue = element.getAttribute("location");
      if (attrValue != null) {
        id = attrValue.getValue();
      }
    }
  }
  return id;
}</codeblock>
        </info>
      </step>
      <step>
        <cmd>The method <i>getReferenceSystemID</i>should return the <codeph>systemID</codeph> of
          the referenced content. It takes <i>AuthorNode</i> as an argument that represents the node
          with the reference and the <i>AuthorAccess</i> with access methods to the
            <uicontrol>Author</uicontrol> mode data model. For example, the value of the
            <i>location</i> attribute is used from the <i>ref</i> element and resolved relatively to
          the XML base URL of the node.</cmd>
        <info>
          <p>
            <codeblock outputclass="language-java">public String getReferenceSystemID(AuthorNode node, 
                                   AuthorAccess authorAccess) {
  String systemID = null;
  if (node.getType() == AuthorNode.NODE_TYPE_ELEMENT) {
    AuthorElement element = (AuthorElement) node;
    if ("ref".equals(element.getLocalName())) {
      AttrValue attrValue = element.getAttribute("location");
      if (attrValue != null) {
        String attrStringVal = attrValue.getValue();
        try {
          URL absoluteUrl = new URL(node.getXMLBaseURL(), 
              authorAccess.getUtilAccess().correctURL(attrStringVal));
          systemID = absoluteUrl.toString();
        } catch (MalformedURLException e) {
          logger.error(e, e);
        }
      }
    }
  }
  return systemID;
}</codeblock>
          </p>
          <p>In the listing below, the XML document contains the <b>ref</b> element:</p>
          <codeblock outputclass="language-xml">&lt;ref location="referenced.xml"&gt;Reference&lt;/ref&gt;</codeblock>
        </info>
      </step>
    </steps>
    <result>
      <p>When no reference resolver is specified, the reference has the following layout:</p>
      <p>
        <fig>
          <title>Reference with no specified reference resolver</title>
          <image href="../img/dg_reference_norefres.png"/>
        </fig>
      </p>
      <p>When the above implementation is configured, the reference has the expected layout:</p>
      <p>
        <fig>
          <title>Reference with reference resolver</title>
          <image href="../img/dg_reference_withrefres.png"/>
        </fig>
      </p>
      <note conkeyref="reusable_notes_java-files/sdf_project"/>
    </result>
  </taskbody>
</task>
