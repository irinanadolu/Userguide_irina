<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="ch_tables">
  <title><?oxy_comment_start author="Steven" timestamp="20180308T085234+0200" comment="Merged into &quot;Element Layout&quot; and moved to not_used folder."?>Tables<?oxy_comment_end?></title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Tables</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>This section is of special interest if you are creating a CSS stylesheet for a custom XML
      document. For HTML, <ph keyref="product"/> already defines the needed selectors for the
        <codeph>table</codeph> element.</p>
    <p>Suppose you have a very simple table in an XML document:</p>
    <codeblock outputclass="language-xml">&lt;tbl>
    &lt;caption>A table.&lt;/caption>
    &lt;rw>
        &lt;c rspan="2"> Spans vertically &lt;/c>
        &lt;c> Other cell &lt;/c>
        &lt;c> Other cell &lt;/c>
    &lt;/rw>
    &lt;rw>
        &lt;c cspan="2"> Other cell, spanning to the right &lt;/c>
    &lt;/rw>
&lt;/tbl> </codeblock>
    <section id="section_lqt_v51_yz">
      <title>Defining Rows and Cells</title>
      <p>First, mark the <codeph>tbl</codeph> element as being a table:</p>
      <codeblock outputclass="language-css">tbl {
    display: table;
}</codeblock>
      <p>Next, the rows and cells:</p>
      <codeblock outputclass="language-css">rw {
    display: table-row;
}
c {
    display: table-cell;
}</codeblock>
    </section>
    <section id="section_hfr_pw1_yz">
      <title>Defining the Column and Row Span</title>
      <p>The processor needs to know how the cells are spanning multiple rows or columns. For these,
        there are two properties available: <codeph>table-column-span</codeph> and
          <codeph>table-row-span</codeph>.</p>
      <codeblock outputclass="language-css">c[cspan] {
    table-column-span: attr(cspan, integer);
}
c[rspan] {
    table-row-span: attr(rspan, integer);
}</codeblock>
    </section>
    <section id="section_vjt_b3t_cbb">
      <title>Defining the Table Caption</title>
      <p>You can do this by using the <codeph>display:table-caption</codeph>. To change the position
        of the caption relative to the table grid, you need to use the <codeph>caption-side</codeph>
        property:</p>
      <codeblock outputclass="language-css">caption {
    display:table-caption;
    caption-side:bottom;
}</codeblock>
    </section>
    <section id="section_fpf_jx1_yz">
      <title>Repeating Headers and Footers</title>
      <p>The elements marked with one of the properties <codeph>table-header-group</codeph> or
          <codeph>table-footer-group</codeph> are automatically repeated when a table is split over
        a sequence of pages. It is required that they contain only elements with the display
          <codeph>table-row</codeph>. </p>
      <codeblock outputclass="language-xml">&lt;tbl>
    &lt;head>
        &lt;rw>
            &lt;c> Name&lt;/c>
            &lt;c> Value &lt;/c>
        &lt;/rw>
    &lt;/head>
    &lt;body>
        &lt;rw> ... &lt;/rw>
        &lt;rw> ... &lt;/rw>
    &lt;/body>
&lt;/tbl> </codeblock>
      <p>The CSS:</p>
      <codeblock outputclass="language-css">head {
    display: table-header-group;
}
</codeblock>
    </section>
    <section id="section_sk5_1dl_zz">
      <title>Column Widths and Styles</title>
      <p><ph keyref="product"/> supports automatic layout of the tables. This means allocation of
        column widths is done automatically based on the content size. In the following example, the
        HTML table has an automatic layout (this is also the default):</p>
      <codeblock outputclass="language-css">table {
    table-layout:auto;
}</codeblock>
      <note type="tip">For large tables with long words that bleed out of the page, you can choose
        to hyphenate the words from the cells. If the table is using an automatic layout, you should
        specify a width (like 100%), otherwise the table columns will just be wide enough to
        accommodate the smaller hyphenated
        words:<codeblock outputclass="language-css">table {
  table-layout:auto;
  width: 100%;
  hyphens:auto;
}</codeblock></note>
      <p>To switch to a fixed layout:</p>
      <codeblock outputclass="language-css">table {
    table-layout:fixed;
}</codeblock>
      <p>If you use the fixed layout and you are not satisfied with equal column widths, for HTML
        you should use the <codeph>style</codeph> attribute on the <codeph>col</codeph> element:</p>
      <codeblock outputclass="language-xml"> &lt;table style="width:2in;">
        &lt;colgroup>
              &lt;col style="width: 40%; background-color:cyan"/>
              &lt;col style="width: 60%"/>
        &lt;/colgroup>
...</codeblock>
      <p>For arbitrary XML, you should set a display <codeph>table-column</codeph> to the element
        representing the column. Consider the following XML:</p>
      <codeblock outputclass="language-xml"> &lt;tbl>
        &lt;colgr>
              &lt;column wd="30%"/>
              &lt;column wd="70%"/>
        &lt;/colgr>
...</codeblock>
      <p>The following CSS links the <codeph>wd</codeph> attribute to the width property and defines
        a different background for the first column.</p>
      <codeblock outputclass="language-css">tbl { 
    disply:table; 
}
colgr { 
    display: table-column-group; 
}
column { 
    display: table-column; 
    width: attr(wd); 
}
column:first-of-type {
    background-color: yellow;
}
</codeblock>
      <p>Proportional column widths like the ones used in the CALS tables from DITA or DocBook are
        supported, but only when set in a <codeph>width</codeph> attribute on the column element
        (the one with display <codeph>table-column</codeph>):</p>
      <codeblock outputclass="language-css">...
&lt;column width="3*"/>
&lt;column width="7*"/>
...</codeblock>
    </section>
    <section id="section_vlp_jjt_cbb">
      <title>Rotating Tables</title>
      <p>There are cases where you have large tables and you need to rotate them to make them fit on
        your page. For instance, the default page is portrait, but because you have a table with
        many columns (and thus very wide), it would bleed to the right of the page.</p>
      <p>There are two ways of doing this:<ul id="ol_gqs_tjt_cbb">
          <li>Associate a wider page (i.e. landscape) to the table that needs more space. The
            disadvantage is that the table will force a page break before and after
            it.<codeblock outputclass="language-css">@page landscape-page-for-large-tables {
    size: A4 landscape;
}

tbl {
  display: table;
  page: landscape-page-for-large-tables;
}</codeblock></li>
          <li>Rotate the table using the <codeph>transform</codeph> CSS property. The table will not
            create page breaks, but is susceptible to bleeding if its height exceeds the page
              width.<codeblock outputclass="language-css">tbl {
  display: table;
  width: 200pt;
  transform: rotate(90deg);
}</codeblock><note>The
              table needs to have <codeph>table-layout: fixed</codeph>, and a
              <codeph>width</codeph>.</note></li>
        </ul></p>
      <p>The page is now landscape and you probably need to also change the headers and footers to
        match this new orientation. One way of doing this is to move the header content from the
          <codeph>@top-left</codeph>, <codeph>@top-center</codeph>, and <codeph>@top-right</codeph>
        rules into page margin boxes from the right, and apply a <codeph>transform</codeph> property
        on them.</p>
      <p>In the following example, for the normal pages there is static text in the top (header)
        that is either placed in the left or right side of the page, depending on the page
        position:<codeblock outputclass="language-css">@page :left {
  @top-left {
     content: string(maptitle) string(parttitle) string(chaptertitle) " | " counter(page);
     font-size:8pt;
  }
  @bottom-left {
      /**/
  }
  @bottom-right {
      /**/
  }
}

@page :right{
  @top-right {
     content: string(maptitle) string(parttitle) string(chaptertitle) " | " counter(page);
     font-size:8pt;
  }
  @bottom-right {
      /**/
  }
  @bottom-left {
      /**/
  }
}</codeblock></p>
      <p>For the landscape page, we can move content to either the right-bottom or right-top,
        depending on the page
        position:<codeblock outputclass="language-css"> /*
  * Table orientation.
  */
 @page table-landscape:right {
	size:landscape;

	@top-left{
		content:none;
	}
	@top-center{
		content:none;
	}
	@top-right{
		content:none;
	}
		
       @right-bottom{
    content: string(chaptertitle) " | " counter(page);
    font-size:8pt;
		transform:rotate(90);
		vertical-align: middle;
		text-align: right;
	}
 }
 @page table-landscape:left {
	size:landscape;
		
	@top-left{
		content:none;
	}
	@top-center{
		content:none;
	}
	@top-right{
		content:none;
	}
		
	@right-top{
    content: string(maptitle) string(parttitle) string(chaptertitle) " | " counter(page);
    font-size:8pt;
  	transform:rotate(90);
  	vertical-align: middle;
  	text-align: left;
       }
 }</codeblock></p>
    </section>
  </body>
</topic>
