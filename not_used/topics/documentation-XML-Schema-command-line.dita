<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd">
<topic id="documentation-XML-Schema-command-line">
  <title><?oxy_comment_start author="steven_higgs" timestamp="20190808T143832+0300" comment="Moved to the not_used folder because we don&apos;t want to make this option public since it now requires a scripting license."?>Generating
    XML Schema Documentation From the Command-Line Interface<?oxy_comment_end?></title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>XML Schemas<indexterm>Generate documentation for XML Schema<indexterm>From
              command line</indexterm></indexterm></indexterm>
        <indexterm>Generate XML Schema Documentation tool<indexterm>From command
          line</indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>You can export the settings of the <xref
      keyref="editing_XML-schema_generating-documentation"><uicontrol>XML Schema
          Documentation</uicontrol> dialog box</xref> to an XML file by pressing the
        <uicontrol>Export settings</uicontrol> button. With the exported configuration file, you can
      generate the same documentation from the command-line interface by running the following script:<ul>
        <li><filepath>schemaDocumentation.bat</filepath> on Windows.</li>
        <li><filepath>schemaDocumentation.sh</filepath> on OS X / Linux.</li>
      </ul>The script is located in the <ph keyref="product"/> installation folder. The script can
      be integrated in an external batch process launched from the command-line interface. The
      script accepts a variety of command-line arguments that allow you to configure the
      documentation.</p>
    <p>The accepted syntax and arguments are as follows:</p>
    <p>
      <syntaxdiagram id="syntaxdiagram_ihy_rtp_ls">
        <groupseq>
          <kwd>schemaDocumentation</kwd>
          <kwd>schemaFile</kwd>
          <sep>[</sep>
          <kwd>[-cfg:configFile]</kwd>
          <sep>|</sep>
          <sep>[</sep>
          <kwd>[-out:outputFile]</kwd>
          <kwd>[-format:&lt;value&gt;]</kwd>
          <kwd>[-xsl:&lt;xslFile&gt;]</kwd>
          <kwd>[-split:&lt;value&gt;]</kwd>
          <kwd>[-openInBrowser:&lt;value&gt;]</kwd>
          <sep>]</sep>
          <sep>|</sep>
          <kwd>--help</kwd>
          <sep>|</sep>
          <kwd>-help</kwd>
          <sep>|</sep>
          <kwd>--h</kwd>
          <sep>|</sep>
          <kwd>-h</kwd>
          <sep>]</sep>
        </groupseq>
      </syntaxdiagram>
    </p>
    <p>
      <parml>
        <plentry>
          <pt>schemaFile</pt>
          <pd>The XML Schema file.</pd>
        </plentry>
        <plentry>
          <pt>-cfg:configfile</pt>
          <pd>The exported configuration file. It contains the output file, output format options,
            split method, and some advanced options regarding the included components and components
            details. If an external configuration file is specified, all other supplied arguments
            except for the XML Schema file will be ignored.</pd>
        </plentry>
        <plentry>
          <pt>-out:outputFile</pt>
          <pd>The file where the generated documentation will be saved. By default, it is the name
            of the schema file with an <i>html</i> extension.</pd>
        </plentry>
        <plentry>
          <pt>-format:&lt;value&gt;</pt>
          <pd>The output format type used when generating the documentation. Possible values are as
              follows:<ul id="ul_h4c_5xp_ls">
              <li><b>html</b> - To generate documentation in HTML format.</li>
              <li><b>pdf</b> - To generate documentation in PDF format.</li>
              <li><b>docbook</b> - To generate documentation in DocBook format.</li>
              <li><b>custom</b> - To generate documentation in a custom format.</li>
            </ul></pd>
        </plentry>
        <plentry>
          <pt>-xsl:&lt;xslFile&gt;</pt>
          <pd>The XSL file to be applied on the intermediate XML format. If there is no XSL file
            provided, the result will be in the HTML format.</pd>
        </plentry>
        <plentry>
          <pt>-split:&lt;value&gt;</pt>
          <pd>The split method used when generating the documentation. Splitting is recommended for
            large schemas. Possible values are as follows:<ul id="ul_qvb_3yp_ls">
              <li><b>none</b> (default value) - To generate one single output file.</li>
              <li><b>namespace</b> - To generate an output file for every namespace in the
                schema.</li>
              <li><b>component</b> - To generate an output file for every component in the
                schema.</li>
              <li><b>location</b> - To generate an output file for every schema
                location.</li>
            </ul></pd>
        </plentry>
        <plentry>
          <pt>-openInBrowser:&lt;value&gt;</pt>
          <pd>Opens the result of the transformation in a browser or system application. Possible
            values are <codeph>true</codeph> or <codeph>false</codeph> (default value).</pd>
        </plentry>
        <plentry>
          <pt>--help | -help | --h | -h</pt>
          <pd>Displays the available options.</pd>
        </plentry>
      </parml>
    </p>
    <p><b><u>Example:</u></b></p>
    <p>Example of the script in a Windows command
      line:<codeblock outputclass="language-ini">schemaDocumentation example.xsd -out:schemaDocumentation.html
    -format:custom -xsl:example.xsl -split:namespace</codeblock></p>
  </body>
</topic>
