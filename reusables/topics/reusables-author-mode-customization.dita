<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="urn:oasis:names:tc:dita:rng:topic.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<topic id="reusables-author-mode-customization">
  <title>Reusable Components in Author Mode Customization</title>
  <body>
    <!--Styles dropdown menu description-->
    <p id="css.styles.intro"><ph keyref="product"/> provides a <uicontrol>Styles</uicontrol>
      drop-down menu on the toolbar that allows you to select one <xref
        keyref="glossentry_main-css-style"><term>main (non-alternate) CSS style</term></xref> and
      multiple <xref keyref="glossentry_alternate-css-style"><term>alternate CSS
        styles</term></xref>. This makes it easy to change the look of the document as it appears in
        <uicontrol>Author</uicontrol> mode and the output without having to continually edit the CSS
      stylesheets.</p>
    <!--List of builtin form controls-->
    <ul id="built-in-form-controls-ul">
      <li><xref href="../../topics/oxy-audio-form-control.dita#oxy-audio-form-control"
            ><ph>Audio</ph></xref> - A media object that plays audio clips.</li>
      <li><xref href="../../topics/oxy-browser-form-control.dita#oxy-browser-form-control"
            ><ph>Browser</ph></xref> - A media object that renders HTML frames or interact with SVG
        documents</li>
      <li><xref href="../../topics/button-editor.dita"><ph>Button</ph></xref> - A graphical user
        interface object that performs a specific action.</li>
      <li><xref href="../../topics/button-group-editor.dita"><ph>Button Group</ph></xref> - A
        graphical user interface group of buttons (such as radio buttons) that perform specific
        actions.</li>
      <li><xref href="../../topics/check-box-editor.dita"><ph>Checkbox</ph></xref> - A graphical
        user interface box that you can click to select or deselect a value.</li>
      <li><xref href="../../topics/combo-box-editor.dita"><ph>Combo Box</ph></xref> - A graphical
        user interface object that can be a drop-down menu or a combination of a drop-down menu and
        a single-line text field.</li>
      <li><xref href="../../topics/date-picker-editor.dita"><ph>Date Picker</ph></xref> - A form
        control object that allows you to select a date in a specified format.</li>
      <li><xref href="../../topics/html-content-form-control.dita"><ph>HTML Content</ph></xref> - A
        graphical user interface box that is used for rendering HTML content.</li>
      <li><xref href="../../topics/pop-up-editor.dita"><ph>Pop-up</ph></xref> - A contextual menu
        that provides quick access to various actions.</li>
      <li><xref href="../../topics/dg-text-area-form-control.dita"><ph>Text Area</ph></xref> - A box
        that allows you to enter multiple lines of text.</li>
      <li><xref href="../../topics/text-field-editor.dita"><ph>Text Field</ph></xref> - A graphical
        user interface box that allows you to enter a single line of text.</li>
      <li><xref href="../../topics/url-chooser-editor.dita"><ph>URL Chooser</ph></xref> - A dialog
        box that allows you to select the location of local or remote resources.</li>
      <li><xref href="../../topics/oxy-video-form-control.dita#oxy-video-form-control"
            ><ph>Video</ph></xref> - A media object that plays videos.</li>
    </ul>
    <!--Form controls properties-->
    <section product="author developer editor authorEclipse developerEclipse editorEclipse"
      id="form_control_properties"><title>Form Control Properties</title><p><ph id="edit_property"
            ><b>edit</b> - Lets you edit the value of an attribute, the text content of an element,
          or Processing Instructions (PI). This property can have the following values:</ph><ul
          id="edit_property_ul">
          <li id="attr-name-li"><b>@attribute_name</b> - The name of the attribute whose value is
            being edited. If the attribute is in a namespace, the value of the property must be a
              <xref keyref="glossentry_qname"><term>QName</term></xref> and the CSS must have a
            namespace declaration for the prefix.</li>
          <li id="text-li"><b>#text</b> - Specifies that the presented/edited value is the simple
            text value of an element.<note>You can set the value of the <xref
                href="../../topics/dg-visibility-css-extension.dita"><codeph>visibility</codeph>
                property to <codeph>-oxy-collapse-text</codeph></xref> to render the text only in
              the form control that the <codeph>oxy_editor</codeph> function specifies.</note></li>
        </ul></p><p><ph id="columns-property"><b>columns</b> - Controls the width of the form
          control. The unit size is the width of the <uicontrol>w</uicontrol>
          character.</ph></p><p><ph id="width-property"><b>width</b> - Specifies the width of the
          content area using relative (<codeph>em</codeph>, <codeph>ex</codeph>), absolute
            (<codeph>in</codeph>, <codeph>cm</codeph>, <codeph>mm</codeph>, <codeph>pt</codeph>,
            <codeph>pc</codeph>, <codeph>px</codeph>), and percentage (followed by the
            <codeph>%</codeph> character) length units. The <codeph>width</codeph> property takes
          precedence over the <codeph>columns</codeph> property (if the two are used
        together).</ph></p><p><ph id="width-property-simple"><b>width</b> - Specifies the width of
          the content area using relative (<codeph>em</codeph>, <codeph>ex</codeph>), absolute
            (<codeph>in</codeph>, <codeph>cm</codeph>, <codeph>mm</codeph>, <codeph>pt</codeph>,
            <codeph>pc</codeph>, <codeph>px</codeph>), and percentage (followed by the
            <codeph>%</codeph> character) length units.</ph></p><p><ph id="height-property"
            ><b>height</b> - Specifies the height of the form control area using relative
            (<codeph>em</codeph>, <codeph>ex</codeph>), absolute (<codeph>in</codeph>,
            <codeph>cm</codeph>, <codeph>mm</codeph>, <codeph>pt</codeph>, <codeph>pc</codeph>,
            <codeph>px</codeph>), and percentage (followed by the <codeph>%</codeph> character)
          length units.</ph></p><p><ph id="fontInherit-property"><b>fontInherit</b> - This value
          specifies whether or not the form control inherits its font from its parent element. The
          values of this property can be <codeph>true</codeph> or <codeph>false</codeph> (default
          value). To make the form control inherit its font from its parent element, set the
            <codeph>fontInherit</codeph> property to <codeph>true</codeph>.</ph></p><p><ph
          id="visible-property"><b>visible</b> - Specifies whether or not the form control is
          visible. The possible values of this property are <codeph>true</codeph> (default value)
          and <codeph>false</codeph>.</ph></p><p><ph id="values-property"><b>values</b> - Specifies
          the values that populate the list of proposals. If these values are not specified in the
          CSS, they are collected from the associated XML Schema.</ph></p><p><ph id="values"
            ><b>values</b> - Specifies the values that are committed when the check-boxes are
          selected. If these values are not specified in the CSS, they are collected from the
          associated XML Schema.</ph><note id="values-note">Typically, when you use a comma in the
          values of a form control, the content that follows a comma is considered a new value. If
          you want to include a comma in the values, precede the comma with two backslashes. For
          example, <codeph>(values, '1\\, 2\\, 3, 4, edit, false)</codeph> will display a form
          control that has <b>1, 2, 3</b> for the first value and <b>4</b> for the second
          value.</note></p><p><ph id="tooltips-property"><b>tooltips</b> - Associates tooltips to
          each value in the <codeph>values</codeph> property. The value of this property is a list
          of tooltip messages separated by commas. If you want the tooltip to display a comma, use
          the <xref href="../../topics/editor-variables.dita#editor-variables/edVar-comma"
              ><codeph>${comma}</codeph> variable</xref>.</ph></p><p><ph id="tooltip-property"
            ><b>tooltip</b> - Specifies a tooltip to be displayed when you hover over the form
          control.</ph></p><p><ph id="color-property"><b>color</b> - Specifies the foreground color
          of the form control. If the value of the <codeph>color</codeph> property is
            <codeph>inherit</codeph>, the form control has the same color as the element that was used to insert it.</ph></p><p><ph id="hover-property-li"><b>hoverPseudoclassName</b> - Allows
          you to change the way an element is rendered when you hover over a form control. The value
          is the name of a CSS pseudo-class. When you hover over the form control, the specified
          pseudo-class will be set on the element that contains the form control.</ph></p><p><ph
          id="labels-property"><b>labels</b> - This property must have the same number of items as
          the <codeph>values</codeph> property. Each item provides a literal description of the
          items listed in the <codeph>values</codeph> property. These labels can be translated using
          the <xref href="../../topics/editor-variables.dita#editor-variables/localization"
              ><i>${i18n()}</i> editor variable</xref>.</ph></p><p>
        <note id="note-form-control-code-templates">You can use the <xref
            keyref="glossentry_content-completion-assistant"><term>Content Completion
              Assistant</term></xref> in the CSS <ph product="author developer editor">or LESS
          </ph>editor to easily insert a sample of the form control by selecting the corresponding
          code template. The form control code templates are displayed with a <image
            href="../../img/CodeTemplates12.gif" id="image_tlk_c2h_5r"/> symbol in the content
          complete list.</note>
      </p><ph id="samples-ph">To see more detailed examples and more information about how form
        controls work in <ph keyref="product"/>, see the sample files in the following directory:
              <b><filepath><term conkeyref="reusables-user-guide/oxy-install-dir"
            />/samples/form-controls</filepath></b>.</ph><p><ph id="resultSeparator-property"
            ><b>resultSeparator</b> - If multiple check-boxes are used, the separator is used to
          compose the final result. If not specified, the <i>space</i> character is
          used.</ph></p><p><ph id="uncheckedValues-property"><b>uncheckedValues</b> - Specifies the
          values that are committed when check-boxes are not selected.</ph></p><p><ph
          id="property-rows"><b>rows</b> - This property specifies the number of rows that the form
          control presents.</ph></p><p><ph id="action-property"><b>action</b> - Defines an action
          directly, rather than using the <codeph>actionID</codeph> parameter to reference an action
          from the <xref href="../../topics/the-action-dialog.dita"><term>document type
              association</term></xref>. This property is defined using the <xref
            href="../../topics/dg-action-function.dita"><i>oxy_action</i>
          function</xref>.</ph></p><p><ph id="action-list-property"><b>actions</b> - Defines a
          sequential list of actions directly, rather than using the <codeph>actionID</codeph>
          parameter to reference actions from the <xref href="../../topics/the-action-dialog.dita"
              ><term>document type association</term></xref>. This property is defined using the
            <xref href="../../topics/dg-action-list-function.dita"><i>oxy_action_list</i>
            function</xref>.</ph></p><p><ph id="actionDisplayStyle-property"><b>actionStyle</b> -
          Specifies what to display for an action in the form control. The values of this property
          can be <codeph>text</codeph> (default value), <codeph>icon</codeph>, or
            <codeph>both</codeph>.</ph></p><p><ph id="background-color-property"
            ><b>background-color</b> - Specifies the background color of the form control. If the
          value of the <codeph>background-color</codeph> property is <codeph>inherit</codeph>, the
              form control has the same color as the element that was used to insert it.</ph></p>
      <ph id="contentType_property"><b>contentType</b> - Specifies the type of content that the
        form control will format with syntax highlighting. The following values are supported:
          <codeph>text/css; text/shell; text/cc; text/xquery; text/xml; text/python; text/xsd;
          text/c; text/xpath; text/javascript; text/xsl; text/wsdl; text/html; text/xproc;
          text/properties; text/sql; text/rng; text/sch; text/json; text/perl; text/php; text/java;
          text/batch; text/rnc; text/dtd; text/nvdl; text/plain.</codeph></ph><p><ph id="editorSort"
            ><b>editorSort</b> - Specifies the sorting of the values displayed after clicking the
          popup control (for example, clicking a drop-down arrow button). The possible values of
          this property are <codeph>ascending</codeph> and
          <codeph>descending</codeph>.</ph></p><p><ph id="enable-read-only-context-property"
            ><b>enableInReadOnlyContext</b> - To enable <xref
            href="../../topics/button-editor.dita#button-editor">button form controls</xref> or
            <xref href="../../topics/button-group-editor.dita#button-group-editor">groups of buttons
            form controls</xref> this property needs to be set to <codeph>true</codeph>. This
          property can be used to specify areas as <i>read-only</i> (by setting the
            <codeph>-oxy-editable</codeph> property to <codeph>false</codeph>). This is useful when
          you want to use an action that does not modify the context.</ph></p><p><ph
          id="href-property"><b>href</b> - The absolute or relative location of a
          resource.</ph></p><p><ph id="id-property"><b>id</b> - The unique identifier of an
          item.</ph></p><p><ph id="indentOnTab_property"><b>indentOnTab</b> - Specifies the behavior
          of the <uicontrol><shortcut>Tab</shortcut></uicontrol> key. If the value of this property
          is set to <codeph>true</codeph> (default value), the
            <uicontrol><shortcut>Tab</shortcut></uicontrol> key inserts characters. If it is set to
            <codeph>false</codeph>, <uicontrol><shortcut>Tab</shortcut></uicontrol> is used for
          navigation, jumping to the next editable position in the document.</ph></p><p><ph
          id="rendererSeparator-property"><b>rendererSeparator</b> - Defines a separator used when
          multiple values are rendered. If not specified, the value of the
            <codeph>resultSeparator</codeph> property is used.</ph></p><p><ph id="rendererSort"
            ><b>rendererSort</b> - Specifies the sorting of the values (labels) displayed on the
          form control before clicking the popup control. The possible values of this property are
            <codeph>ascending</codeph> and <codeph>descending</codeph>.</ph></p><p><ph
          id="selectionMode-property"><b>selectionMode</b> - Specifies whether the form control
          allows the selection of a single value or multiple values. The predefined values of this
          property are <codeph>single</codeph> (default value) and
        <codeph>multiple</codeph>.</ph></p>
      <ph id="show_icon"><b>showIcon</b> - Specifies if the action icon should be displayed on the
        button form control. If this property is missing then the button displays the icon only if
        it is available, or the text if the icon is not available. The values of this property can
        be <codeph>true</codeph> or <codeph>false</codeph>.</ph><codeblock id="show_icon_codeblock" outputclass="language-css">element {
  content: oxy_button(actionID, 'remove.attribute', showIcon, true);
}</codeblock>
      <ph id="show_text"><b>showText</b> - Specifies if the action text should be displayed on the
        button form control. If this property is missing then the button displays the icon only if
        it is available, or the text if the icon is not available. The values of this property can
        be <codeph>true</codeph> or
          <codeph>false</codeph>.</ph><codeblock id="show_text_codeblock" outputclass="language-css">element {
  content: oxy_button(actionID, 'remove.attribute', showText, true);
}</codeblock><p><ph
          id="sort"><b>sort</b> - Specifies the default sorting of the form control values (the
          values displayed before and after clicking the popup control). However, the
            <codeph>editorSort</codeph> and <codeph>rendererSort</codeph> properties have a higher
          priority. The possible values of this property are <codeph>ascending</codeph> and
            <codeph>descending</codeph>.</ph></p><p>
        <ph id="text-align"><b>text-align</b> - Specifies the alignment of the generated content in
          its reserved space. This property has three possible values: <uicontrol>left</uicontrol>
          (default value), <uicontrol>right</uicontrol>,
        <uicontrol>center</uicontrol>.</ph><codeblock id="text-align_codeblock" outputclass="language-css">element {
  content: 
    oxy_label(text, "Label1:", width, 20em, text-align, center)
    oxy_label(text, "Label2:", width, 100px, text-align, right)
}</codeblock></p><p><ph
          id="text-property"><b>text</b> - This property specifies the built-in form control you are
          using.</ph></p><p><ph id="transparent-property"><b>transparent</b> - Flattens the aspect
          of the button form control, removing its border and background. The values of this
          property can be <codeph>true</codeph> or <codeph>false</codeph> (default
          value).</ph></p><p><ph id="type-property"><b>type</b> - This property specifies the
          built-in form control you are using. This property can have one of the following
          values:</ph></p><p><ph id="actionContext-property"><b>actionContext</b> - Specifies the
          context that the action associated with the form control is executed. Its possible
          values are <codeph>element</codeph> (default value) and <codeph>caret</codeph>. If you
          select the <codeph>element</codeph> value, the context is the element that holds the form
          control. If you select the <codeph>caret</codeph> value, the action is invoked at the
          cursor location. If the cursor is not inside the element that holds the form control, the
            <codeph>element</codeph> value is selected automatically.</ph><ul>
          <li id="actionID-property"><b>actionID</b> - The ID of the action, specified in the <xref
              href="../../topics/the-action-dialog.dita"><term>document type
              association</term></xref>, that is invoked when you click the button.<note>The element
              that contains the form control represents the context where the action is
              invoked.</note></li>
          <li>[Dummy li to avoid validation warning]</li>
        </ul></p></section>
    <p id="oxy-action-properties1">
      <ul>
        <li><b>name</b> - The name of the action. It will be displayed as the label for the button
          or menu item.</li>
        <li><b>description</b> (optional) - A short description with details about the result of the
          action.</li>
        <li id="icon-li"><b>icon</b> (optional) - A path relative to the CSS pointing to an image
          (the icon for the action). The path can point to resources that are packed in <ph
            keyref="product"/> (<filepath>oxygen.jar</filepath>) by starting its value with
            <codeph>/</codeph> (for example, <filepath>/images/Remove16.png</filepath>). It can also
          be expressed using an <xref href="../../topics/editor-variables.dita"><term>editor
              variable</term></xref>.</li>
        <li id="operation-li"><b>operation</b> - The name of the Java class implementing the <xref
            href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorOperation.html"
            format="html" scope="external"><i>ro.sync.ecss.extensions.api.AuthorOperation</i></xref>
          interface. There is also a variety of <xref
            href="../../topics/dg-default-author-operations.dita">predefined operations</xref> that
          can be used. <note>If the name of the operation specified in the CSS is not qualified (has
            no Java package name), then it is considered to be one of the built-in <ph
              keyref="product"/> operations from
              <codeph>ro.sync.ecss.extensions.commons.operations</codeph> package. If the class is
            not found in this package, then it will be loaded using the specified name.</note></li>
        <li id="arg-li"><b>arg-<i>&lt;string></i></b> - All arguments with the <codeph>arg-</codeph>
          prefix are passed to the operation (the string that follows the <codeph>arg-</codeph>
          prefix is passed).</li>
        <li id="id-li"><b>ID</b> - (optional) - The ID of the action from the
          <term>framework</term>. If this is specified, all others parameters are disregarded.</li>
      </ul>
    </p>
    <!--Default Author operations-->
    <p><ph id="schema_aware_argument">This argument applies only on the surround with element
        operation and controls whether or not the insertion is valid, based upon the schema. If the
        insertion is not valid, then wrapping action will be broken up into smaller intervals until
        the wrapping action is valid. For example, if you try to wrap a <i>paragraph</i> element
        with a <i>bold</i> element, it would not be valid, so the operation will wrap the text
        inside the paragraph instead, since it would be valid at that position.</ph></p>
    <!--CSS Subject Selector notes-->
    <section id="processing-instruction-section">
      <title>Taking Processing Instructions into Account in CSS Subject Selectors</title>
      <p>You can test for the existence of specific processing instructions (<codeph>PI</codeph>) in
        the child hierarchy of a subject selector.</p>
      <p>For
        example:<codeblock outputclass="language-css">@namespace oxy "http://www.oxygenxml.com/extensions/author";

chapter! > oxy|processing-instruction[important][level="high"]{
  color:red;
}</codeblock></p>
      <p>This would change the color of a DocBook chapter to red if it contains the
          <codeph>important</codeph> processing
        instruction:<codeblock outputclass="language-xml">&lt;chapter>
   &lt;title>A title&lt;/title>
   &lt;?important level='high'?>
&lt;/chapter></codeblock></p>
    </section>
    <section id="descendant-selector-limitation">
      <title>Descendant Selectors Limitation</title>
      <note type="important">The current implementation has a known limitation. The general
        descendant selectors are taken into account as direct child selectors. For example, the
        following two CSS selectors are considered
        equivalent:<codeblock outputclass="language-ini">a:has(b c)</codeblock>and:<codeblock outputclass="language-ini">a:has(b>c)</codeblock></note>
    </section>
    <!--Sample framework package tip-->
    <note type="tip" id="sample-framework-tip">A sample framework customization package is available
      that you can dabble with and use to help you get started. It can be downloaded from: <xref
        href="https://www.oxygenxml.com/php/get_oxygen_sample_framework.php" format="html"
        scope="external"/>. The package includes a sample CSS file, XSL file, schema files, document
      templates, an XML catalog file, custom icons, and other resources.</note>
    <!--Framework customization notes-->
    <p>
      <note id="note-editing-action-files">You can add or edit the action files outside of <ph
          keyref="product"/>, but you will need to restart the application each time to reload the
        changes.</note>
    </p>
  </body>
</topic>
