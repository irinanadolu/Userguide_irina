<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="urn:oasis:names:tc:dita:rng:topic.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<topic id="reusables-editor-variables">
  <title>Reusable Components in Editor Variables</title>
  <body>
    <p><!--List of Editor Variables--></p>
    <ul>
      <li id="edVar-oxygenHome"><b>${oxygenHome}</b> - <ph keyref="product"/> installation folder as
        URL.c</li>
      <li id="edVar-oxygenInstallDir"><b>${oxygenInstallDir}</b> - <ph keyref="product"/>
        installation folder as file path.</li>
      <li id="edVar-configured_ditaot_dir"
        product="author developer editor authorEclipse developerEclipse editorEclipse"
          ><b>${configured.ditaot.dir}</b> - The default directory of the DITA Open Toolkit
        distribution, as configured in the <xref
          href="../../topics/preferences-dita.dita#preferences-dita/DITA-OT-section"
            ><uicontrol>DITA</uicontrol> preferences page</xref>.</li>
      <li id="edVar-framework"><b>${framework}</b> - The path (as URL) of the current
          <filepath>frameworks</filepath> directory.</li>
      <li id="edVar-framework-fr-name"><b>${framework(fr_name)}</b> - The path (as URL) of the
          <i>fr_name</i> framework.</li>
      <li id="edVar-frameworkDir-fr-name"
        product="author developer editor authorEclipse developerEclipse editorEclipse"
          ><b>${frameworkDir(fr_name)}</b> - The path (as file path) of the <i>fr_name</i>
          framework.<note>Since multiple <term>frameworks</term> might have the same name (although
          it is not recommended), for both <i>${framework(fr_name)}</i> and
            <i>${frameworkDir(fr_name)}</i> editor variables <ph keyref="product"/> employs the
          following algorithm when searching for a given <term>framework</term> name:<ul>
            <li>All <term>frameworks</term> are sorted, from high to low, according to their <xref
                href="../../topics/the-document-type-dialog.dita#the-document-type-dialog/dta_priority"
                  ><uicontrol>Priority</uicontrol></xref> setting from the <xref
                href="../../topics/the-document-type-dialog.dita#the-document-type-dialog"
                  ><uicontrol>Document Type</uicontrol> configuration dialog box</xref>. Only
                <term>frameworks</term> that have the <uicontrol>Enabled</uicontrol> checkbox
              selected are taken into account.</li>
            <li>Next, if the two or more <term>frameworks</term> have the same name and priority, a
              further sorting based on the <uicontrol>Storage</uicontrol> setting is made, in the
              exact following order:<ul>
                <li><term>Frameworks</term> stored in the internal <ph keyref="product"/>
                  options.</li>
                <li>Additional <term>frameworks</term> added in the <xref
                    href="../../topics/framework-location.dita#framework-location"
                      ><uicontrol>Locations</uicontrol> preferences page</xref>.</li>
                <li><term>Frameworks</term> installed using the add-ons support.</li>
                <li><term>Frameworks</term> found in the <xref
                    href="../../topics/framework-location.dita#framework-location">main
                      <term>framework</term> location</xref> (<uicontrol>Default</uicontrol> or
                    <uicontrol>Custom</uicontrol>).</li>
              </ul></li>
          </ul></note></li>
      <li id="edVar-frameworks"><b>${frameworks}</b> - The path (as URL) of the
          <filepath>frameworks</filepath> directory. When used to define references inside a
        framework configuration, it expands to the parent folder of that specific framework folder.
        Otherwise, it expands to the main frameworks folder defined in the <menucascade>
          <uicontrol>Document Type Association</uicontrol>
          <uicontrol>Locations</uicontrol>
        </menucascade> preferences page.</li>
      <li id="edVar-frameworkDir"><b>${frameworkDir}</b> - The path (as file path) of the current
          <filepath>frameworks</filepath> directory.</li>
      <li id="edVar-frameworksDir"><b>${frameworksDir}</b> - The path (as file path) of the
          <filepath>frameworks</filepath> directory. When used to define references inside a
        framework configuration, it expands to the parent folder of that specific framework folder.
        Otherwise, it expands to the main <filepath>frameworks</filepath> folder defined in the <menucascade>
          <uicontrol>Document Type Association</uicontrol>
          <uicontrol>Locations</uicontrol>
        </menucascade> preferences page.</li>
      <li id="edVar-home"><b>${home}</b> - The path (as URL) of the user home folder.</li>
      <li id="edVar-homeDir"><b>${homeDir}</b> - The path (as file path) of the user home
        folder.</li>
      <li id="edVar-pdu"><b>${pdu}</b> - The URL path to the folder that contains the current
        project file (<filepath>.xpr</filepath>).</li>
      <li id="edVar-pluginDir"><b>${pluginDir(pluginID)}</b> - Each plugin has an ID specified in
        its <filepath>plugin.xml</filepath> file. This editor variable expands to the file path of
        the folder that contains the <filepath>plugin.xml</filepath> file where that specific plugin
        ID is located.</li>
      <li id="edVar-pluginDirURL"><b>${pluginDirURL(pluginID)}</b> - Each plugin has an ID specified
        in its <filepath>plugin.xml</filepath> file. This editor variable expands to the URL path of
        the folder that contains the <filepath>plugin.xml</filepath> file where that specific plugin
        ID is located.</li>
      <li id="edVar-pd"><b>${pd}</b> - The file path to the folder that contains the current project
        file (<filepath>.xpr</filepath>).</li>
      <li id="edVar-pn"><b>${pn}</b> - Current project name.</li>
      <li id="edVar-cfdu"><b>${cfdu}</b> - Current file folder as URL, that is the path of the
        currently edited document up to the name of the parent folder, represented as a URL.</li>
      <li id="edVar-cfd"><b>${cfd}</b> - Current file folder as file path, that is the path of the
        currently edited document up to the name of the parent folder.</li>
      <li id="edVar-cfn"><b>${cfn}</b> - Current file name without the extension and parent folder.
        The current file is the one currently open and selected.</li>
      <li id="edVar-cfne"><b>${cfne}</b> - Current file name with extension. The current file is the
        one currently open and selected.</li>
      <li id="edVar-comma"><b>${comma}</b> - Used to display a comma when the actual comma symbol
        would be considered part of some sort of instruction or delimiter.</li>
      <li id="edvar-cf"><b>${cf}</b> - Current file as file path, that is the absolute file path of
        the currently edited document.</li>
      <li id="edVar-activeConditionSet"
        product="author developer editor authorEclipse developerEclipse editorEclipse"
          ><b>${activeConditionSet}</b> - Current active <xref
          href="../../topics/condition-sets-management.dita#condition-sets-management"
          product="author editor authorEclipse editorEclipse">profiling condition set</xref><ph
          product="developer developerEclipse">profiling condition set</ph> name. If there is no
        active condition set, the variable will be replaced with an <i>empty string</i>.</li>
      <li id="edVar-af"><b>${af}</b> - The local file path of the ZIP archive that includes the
        currently edited document.</li>
      <li id="edVar-afu"><b>${afu}</b> - The URL path of the ZIP archive that includes the currently
        edited document.</li>
      <li id="edVar-afd"><b>${afd}</b> - The local directory path of the ZIP archive that includes
        the currently edited document.</li>
      <li id="edVar-afdu"><b>${afdu}</b> - The URL path of the directory of the ZIP archive that
        includes the currently edited document.</li>
      <li id="edVar-afn"><b>${afn}</b> - The file name (without parent directory and without file
        extension) of the zip archive that includes the currently edited file.</li>
      <li id="edVar-afne"><b>${afne}</b> - The file name (with file extension, for example
          <filepath>.zip</filepath> or <filepath>.epub</filepath>, but without parent directory) of
        the zip archive that includes the currently edited file.</li>
      <li id="edVar-author_name" product="author editor authorEclipse editorEclipse"
          ><b>${author.name}</b> - Expands to the current author name that is set in the <xref
          href="../../topics/preferences-track-changes.dita#preferences-track-changes"
            ><uicontrol>Review</uicontrol> preferences page</xref>.</li>
      <li id="edVar-currentFileURL"><b>${currentFileURL}</b> - Current file as URL, that is the
        absolute file path of the currently edited document represented as URL.</li>
      <li id="edVar-ps"><b>${ps}</b> - Path separator, which is the separator that can be used on
        the current platform (Windows, OS X, Linux) between library files specified in the class
        path.</li>
      <li id="edvar-timestamp"><b>${timeStamp}</b> - The timestamp, which is the current time in
        Unix format. For example, it can be used to save transformation results in multiple output
        files on each transformation.</li>
      <li id="edVar-caret"><b>${caret}</b> - The position where the cursor is located. This variable
        can be used in a code template, in <uicontrol>Author</uicontrol> mode operations, or in a
          <b>selection</b>
        <term>plugin</term>.<note product="author editor authorEclipse editorEclipse">The
            <b>${caret}</b> editor variable is available only for parameters that take XML content
          as values. It is replaced with the <b>${UNIQUE_CARET_MARKER_FOR_AUTHOR}</b> macro. The
          default Author operations process this macro and position the cursor at the designated
          offset.</note><note product="author editor authorEclipse editorEclipse">The
            <b>${caret}</b> editor variable can be used for setting a fixed cursor position inside
          an XML fragment. To set the cursor position depending on the fragment inserted in the
          document, you can use <b>AuthorDocumentFilter </b> and inside the
            <b>insertFragment(AuthorDocumentFilterBypass, int, AuthorDocumentFragment)</b> method,
          use the <b>AuthorDocumentFragment.setSuggestedRelativeCaretOffset(int)</b> API on the
          given fragment. </note></li>
      <li id="edvar-selection"><b>${selection}</b> - The currently selected text content in the
        currently edited document. This variable can be used in a code template, in
          <uicontrol>Author</uicontrol> mode operations, or in a <b>selection</b>
        <term>plugin</term>.</li>
      <li id="edVar-id"><b>${id}</b> - Application-level unique identifier. It is a short sequence
        of 10-12 letters and digits that is not guaranteed to be universally unique.</li>
      <li id="edvar-uuid"><b>${uuid}</b> - Universally unique identifier, a unique sequence of 32
        hexadecimal digits generated by the Java <xref
          href="http://docs.oracle.com/javase/7/docs/api/java/util/UUID.html" format="html"
          scope="external">UUID</xref> class.</li>
      <li id="edvar-env"><b>${env(VAR_NAME)}</b> - Value of the <i>VAR_NAME</i> environment
        variable. The environment variables are managed by the operating system. If you are looking
        for Java System Properties, use the <b>${system(var.name)}</b> editor variable.</li>
      <li id="edVar-system"><b id="java_system_properties">${system(var.name)}</b> - Value of the
          <i>var.name</i> Java System Property. The Java system properties can be specified in the
        command-line arguments of the Java runtime as <i>-Dvar.name=var.value</i>. If you are
        looking for operating system environment variables, use the <b>${env(VAR_NAME)}</b> editor
        variable instead.</li>
      <li id="edVar-answer">
        <p><b>${answer(@id)}</b> - Used in conjunction with the <b>${ask}</b> editor variable. The
            <b>@id</b> parameter is required and identifies the answer from the <b>${ask}</b> editor
          variable with the same ID.</p>
        <p><b>Example:</b><codeblock outputclass="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
&lt;topic id="topic_lcf_1c4_tdb">
    &lt;title>&lt;/title>
    &lt;body>
        &lt;data name="${ask('Set a data name', String, 'name', @name)}">&lt;/data> 
        &lt;p>The name is: ${answer(@name)}&lt;/p>
    &lt;/body>
&lt;/topic></codeblock></p>
      </li>
      <li id="edVar-ask"><b>${ask('message', type, ('real_value1':'rendered_value1';
          'real_value2':'rendered_value2'; ...), 'default_value', @id)}</b> - To prompt for values
        at runtime, use the <i>ask('message', type, ('real_value1':'rendered_value1';
          'real_value2':'rendered_value2'; ...), 'default-value'')</i> editor variable. You can set
        the following parameters:<ul>
          <li><b>'message'</b> - The displayed message. Note the quotes that enclose the
            message.</li>
          <li><b>'default-value'</b> - Optional parameter. Provides a default value.</li>
          <li><b>@id</b> - Optional parameter. Used for identifying the variable to reuse the answer
            using the <b>${answer(@id)}</b> editor variable.</li>
          <li><b>type</b> - Optional parameter (defaults to <b>generic</b>), with one of the
            following values:<note>The title of the dialog box will be determined by the type of
              parameter and as follows:<ul>
                <li>For <i>url</i> and <i>relative_url</i> parameters, the title will be the name of
                  the parameter and the value of the <i>'message'</i>.</li>
                <li>For the other parameters listed below, the title will be the name of that
                  respective parameter.</li>
                <li>If no parameter is used, the title will be "Input".</li>
              </ul></note><table frame="all" rowsep="1" colsep="1">
              <tgroup cols="2">
                <colspec colname="c1" colnum="1" colwidth="1*"/>
                <colspec colname="c2" colnum="2" colwidth="3.71*"/>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry/>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry morerows="2"><b>generic</b> (default)</entry>
                    <entry><b>Format</b>: <i>${ask('message', generic, 'default')}</i></entry>
                  </row>
                  <row>
                    <entry><b>Description:</b> The input is considered to be generic text that
                      requires no special handling.</entry>
                  </row>
                  <row>
                    <entry><b>Example:</b><ul id="ul_lm4_mvq_fnb">
                        <li><i>${ask('Hello world!')}</i> - The dialog box has a <i>Hello world!</i>
                          message displayed.</li>
                        <li><i>${ask('Hello world!', generic, 'Hello again!')}</i> - The dialog box
                          has a <i>Hello world!</i> message displayed and the value displayed in the
                          input box is <i>'Hello again!'</i>.</li>
                      </ul></entry>
                  </row>
                  <row>
                    <entry morerows="2"><b>url</b></entry>
                    <entry><b>Format:</b>
                      <i>${ask('message', url, 'default_value')}</i></entry>
                  </row>
                  <row>
                    <entry><b>Description:</b> Input is considered a URL. <ph keyref="product"/>
                      checks that the provided URL is valid.</entry>
                  </row>
                  <row>
                    <entry><b>Example:</b><ul>
                        <li><i>${ask('Input URL', url)}</i> - The displayed dialog box has the name
                            <i>Input URL</i>. The expected input type is URL.</li>
                        <li><i>${ask('Input URL', url, 'http://www.example.com')}</i> - The
                          displayed dialog box has the name <i>Input URL</i>. The expected input
                          type is URL. The input field displays the default value
                            <i>http://www.example.com</i>.</li>
                      </ul></entry>
                  </row>
                  <row>
                    <entry morerows="2"><b>relative_url</b></entry>
                    <entry><b>Format:</b>
                      <i>${ask('message', relative_url, 'default')}</i></entry>
                  </row>
                  <row>
                    <entry><b>Description:</b> Input is considered a URL. <ph keyref="product"/>
                      tries to make the URL relative to that of the document you are
                        editing.<note>If the <i>$ask</i> editor variable is expanded in content that
                        is not yet saved (such as an <i>untitled</i> file, whose path cannot be
                        determined), then <ph keyref="product"/> will transform it into an absolute
                        URL.</note></entry>
                  </row>
                  <row>
                    <entry>
                      <p><b>Example:</b></p>
                      <p><i>${ask('File location', relative_url, 'C:/example.txt')}</i> - The dialog
                        box has the name <i>'File location'</i>. The URL inserted in the input box
                        is made relative to the currently edited document location. </p>
                    </entry>
                  </row>
                  <row>
                    <entry morerows="2"><b>password</b></entry>
                    <entry><b>Format</b>: <i>${ask('message', password, 'default')}</i></entry>
                  </row>
                  <row>
                    <entry><b>Description:</b> The input is hidden with bullet characters.</entry>
                  </row>
                  <row>
                    <entry><b>Example:</b>
                      <ul>
                        <li><i>${ask('Input password', password)}</i> - The displayed dialog box has
                          the name <i>'Input password'</i> and the input is hidden with bullet
                          symbols.</li>
                        <li><i>${ask('Input password', password, 'abcd')}</i> - The displayed dialog
                          box has the name <i>'Input password'</i> and the input hidden with bullet
                          symbols. The input field already contains the default <b>abcd</b> value.
                        </li>
                      </ul></entry>
                  </row>
                  <row>
                    <entry morerows="2"><b>combobox</b></entry>
                    <entry><b>Format:</b>
                      <i>${ask('message', combobox,
                        ('real_value1':'rendered_value1';...;'real_valueN':'rendered_valueN'),
                        'default')}</i></entry>
                  </row>
                  <row>
                    <entry><b>Description:</b> Displays a dialog box that offers a drop-down menu.
                      The drop-down menu is populated with the given <i>rendered_value</i> values.
                      Choosing such a value will return its associated value
                        (<i>real_value</i>).<note>The <i>'default'</i> parameter specifies the
                        default-selected value and can match either a key or a value.</note></entry>
                  </row>
                  <row>
                    <entry><b>Example:</b><p>
                        <ul>
                          <li><i>${ask('Operating System', combobox, ('win':'Microsoft
                              Windows';'osx':'Mac OS X';'lnx':'Linux/UNIX'), 'osx')}</i> - The
                            dialog box has the name <i>'Operating System'</i>. The drop-down menu
                            displays the three given operating systems. The associated value will be
                            returned based upon your selection. <note>In this example, the default
                              value is indicated by the <i>osx</i> key. However, the same result
                              could be obtained if the default value is indicated by <i>Mac OS
                              X</i>, as in the following example: <i>${ask('Operating System',
                                combobox, ('win':'Microsoft Windows';'osx':'Mac OS
                                X';'lnx':'Linux/UNIX'), 'Mac OS X')}</i></note></li>
                          <li><i>${ask('Mobile OS', combobox, ('win':'Windows
                              Mobile';'ios':'iOS';'and':'Android'), 'Android')}</i></li>
                        </ul>
                      </p></entry>
                  </row>
                  <row>
                    <entry morerows="2"><b>editable_combobox</b></entry>
                    <entry><b>Format:</b>
                      <i>${ask('message', editable_combobox,
                        ('real_value1':'rendered_value1';...;'real_valueN':'rendered_valueN'),
                        'default')}</i></entry>
                  </row>
                  <row>
                    <entry><b>Description:</b> Displays a dialog box that offers a drop-down menu
                      with editable elements. The drop-down menu is populated with the given
                        <i>rendered_value</i> values. Choosing such a value will return its
                      associated real value (<i>real_value</i>) or the value inserted when you edit
                      a list entry.<note>The <i>'default'</i> parameter specifies the
                        default-selected value and can match either a key or a value.</note></entry>
                  </row>
                  <row>
                    <entry><b>Example:</b><p><i>${ask('Operating System', editable_combobox,
                          ('win':'Microsoft Windows';'osx':'Mac OS X';'lnx':'Linux/UNIX'),
                          'osx')}</i> - The dialog box has the name <i>'Operating System'</i>. The
                        drop-down menu displays the three given operating systems and also allows
                        you to edit the entry. The associated value will be returned based upon your
                        selection or the text you input. </p></entry>
                  </row>
                  <row>
                    <entry morerows="2"><b>radio</b></entry>
                    <entry><b>Format:</b>
                      <i>${ask('message', radio,
                        ('real_value1':'rendered_value1';...;'real_valueN':'rendered_valueN'),
                        'default')}</i></entry>
                  </row>
                  <row>
                    <entry><b>Description:</b> Displays a dialog box that offers a series of radio
                      buttons. Each radio button displays a <i>'rendered_value</i> and will return
                      an associated <i>real_value</i>.<note>The <i>'default'</i> parameter specifies
                        the default-selected value and can match either a key or a
                      value.</note></entry>
                  </row>
                  <row>
                    <entry><b>Example:</b><p><i>${ask('Operating System', radio, ('win':'Microsoft
                          Windows';'osx':'Mac OS X';'lnx':'Linux/UNIX'), 'osx')}</i> - The dialog
                        box has the name <i>'Operating System'</i>. The radio button group allows
                        you to choose between the three operating systems.<note>In this example,
                            <codeph>Mac OS X</codeph> is the default-selected value and if selected,
                          it would return <i>osx</i> for the output.</note></p></entry>
                  </row>
                </tbody>
              </tgroup>
            </table></li>
        </ul></li>
      <li id="edVar-date"><b>${date(pattern)}</b> - Current date. The allowed patterns are
        equivalent to the ones in the <xref
          href="http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html"
          format="html" scope="external">Java SimpleDateFormat class</xref>. <b>Example:</b>
        <i>yyyy-MM-dd</i>.<note>This editor variable supports both the <b>xs:date</b> and
            <b>xs:datetime</b> parameters. For details about <b>xs:date</b>, go to: <xref
            href="http://www.w3.org/TR/xmlschema-2/#date" format="html" scope="external"/>. For
          details about <b>xs:datetime</b>, go to: <xref
            href="http://www.w3.org/TR/xmlschema-2/#dateTime" format="html" scope="external"
          />.</note></li>
      <li id="edVar-dbgXML"><b>${dbgXML}</b> - The local file path to the XML document that is
        currently selected in the Debugger source combo box (for tools started from the XSLT/XQuery
        Debugger).</li>
      <li id="edVar-dbgXSL"><b>${dbgXSL}</b> - The local file path to the XSL/XQuery document that
        is currently selected in the Debugger stylesheet combo box (for tools started from the
        XSLT/XQuery Debugger).</li>
      <li id="edVar-tsf"><b>${tsf}</b> - The transformation result file path. If the current opened
        file has an associated scenario that specifies a transformation output file, this variable
        expands to it.</li>
      <li id="edVar-dsu"><b>${dsu}</b> - The path of the detected schema as a URL for the current
        validated XML document.</li>
      <li id="edVar-ds"><b>${ds}</b> - The path of the detected schema as a local file path for the
        current validated XML document.</li>
      <li id="edVar_cp"><b>${cp}</b> - Current page number. Used to display the current page number
        on each printed page in the <b>Editor / Print</b> Preferences page.</li>
      <li id="edVar_tp"><b>${tp}</b> - Total number of pages in the document. Used to display the
        total number of pages on each printed page in the <b>Editor / Print</b> Preferences
        page.</li>
      <li id="edVar-xmlCatalogList"><b>${xmlCatalogFilesList}</b> - A list of file paths that point
        to all known XML catalog files, separated by semi-colons (;).</li>
      <li id="edVar-xpath"><b>${xpath_eval(expression)}</b> - Evaluates an XPath expression.
        Depending on the context, the expression can be:<ul id="ul_bby_sss_wn">
          <li>
            <p><b>static</b> - When executed in a non-XML context. For example, you can use such
              static expressions to perform string operations on other editor variables for
              composing the name of the output file in a transformation scenario's <b>Output</b>
              tab.</p>
            <p><b>Example:</b><codeblock outputclass="language-ini">${xpath_eval(upper-case(substring('${cfn}', 1, 4)))}</codeblock></p>
          </li>
          <li>
            <p><b>dynamic</b> - When executed in an XML context. For example, you can use such
              dynamic expression in a code template or as a value of a parameter of an
                <uicontrol>Author</uicontrol> mode operation.</p>
            <p><b>Example:</b><codeblock outputclass="language-ini">${ask('Set new ID attribute', generic, '${xpath_eval(@id)}')}</codeblock></p>
          </li>
        </ul></li>
      <li id="edVar-i18n"><b>${i18n(key)}</b> - Editor variable used only at
        <term>framework</term>-level to allow translating names and descriptions of
          <uicontrol>Author</uicontrol> mode actions in multiple actions.<ph
          product="author editor authorEclipse editorEclipse"> For more details, see <xref
            href="../../topics/localizing_frameworks.dita"/>.</ph></li>
      <li id="make-relative">
        <p><b>${makeRelative(base,location)}</b> - Takes two URL-like paths as parameters and tries
          to return a relative path. A use-case would be to insert content references to a certain
          reusable component when defining code templates.</p>
        <p><b>Example:</b><codeblock outputclass="language-ini">${makeRelative(${currentFileURL}, ${dictionaryURL}#gogu)}</codeblock></p>
      </li>
      <li id="dita_dir"><b>${dita.dir.url}</b> - A special local contextual editor variable that
        gets expanded only in the <uicontrol>Libraries</uicontrol> dialog box that is accessible
        from the <uicontrol>Advanced</uicontrol> tab of DITA transformation scenarios. The
          <uicontrol>Libraries</uicontrol> dialog box allows you to specify additional libraries
          (<xref keyref="glossentry_jar"><term>JAR</term></xref> files or additional class paths) to
        be used by the transformer. This <i>${dita.dir.url}</i> editor variable gets expanded to the
        value of the <i>dita.dir</i> parameter from the <uicontrol>Parameters</uicontrol> tab of the
        DITA transformation scenario.</li>
      <li id="root-map-file"><b>${rootMapFile}</b> - Will be expanded to the current root map file
        path.</li>
      <li id="root-map-dir"><b>${rootMapDir}</b> - Will be expanded to the current root map parent
        directory file path.</li>
      <li id="root-map-url"><b>${rootMapURL}</b> - Will be expanded to the current root map URL. For
        example, if in the main DITA Map you define a key with a certain
        value:<codeblock outputclass="language-xml">  &lt;keydef keys="test">
    &lt;topicmeta>&lt;keywords>&lt;keyword>ABC&lt;/keyword>&lt;/keywords>&lt;/topicmeta>
  &lt;/keydef></codeblock>you
        can modify a DITA-OT publishing parameter to have the value:
          <codeph>${xpath_eval(doc('${rootMapURL}')//keydef[@keys='test']/keywords/keyword/text())}</codeph>.
        It will be expanded to the value of that specified key name.</li>
      <li id="root-map-dir-url"><b>${rootMapDirURL}</b> - Will be expanded to the current root map
        parent directory URL.</li>
    </ul>
  </body>
</topic>
